<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ruby Journal]]></title>
  <link href="http://ruby-journal.com/atom.xml" rel="self"/>
  <link href="http://ruby-journal.com/"/>
  <updated>2014-04-23T22:18:48+10:00</updated>
  <id>http://ruby-journal.com/</id>
  <author>
    <name><![CDATA[Trung LÃª]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to write custom serializer for ActiveRecord#serialize]]></title>
    <link href="http://ruby-journal.com/how-to-write-custom-serializer-for-activerecord-number-serialize/"/>
    <updated>2014-04-21T07:49:00+10:00</updated>
    <id>http://ruby-journal.com/how-to-write-custom-serializer-for-activerecord-number-serialize</id>
    <content type="html"><![CDATA[
<p>Rails comes with a powerful and convenient <code>serialize</code> method that would do the serialization/deserializtion
for a specify column of an ActiveRecord model. In today tutorial, I&#8217;ll walk you through on how to write a
custom serializer that would encrypt/decrypt your serialized value for extra security.</p>

<!--more-->

<h2 id="the-basic">The Basic</h2>

<p>ActiveRecord model has access to class method <code>serialize</code> which by default would serialize/deserialize the
specified column value with YAML.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Product</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class="line">  <span class="n">serialize</span> <span class="ss">:properties</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>As you can see in the example above, our <code>Product</code> class has column <code>properties</code> which we will store an
array of properties hash:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">o</span> <span class="o">=</span> <span class="no">Product</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;The Uber Kubik&#39;</span><span class="p">)</span>
</span><span class="line"><span class="n">o</span><span class="o">.</span><span class="n">properties</span> <span class="o">=</span> <span class="o">[</span><span class="ss">length</span><span class="p">:</span> <span class="s1">&#39;10cm&#39;</span><span class="p">,</span> <span class="ss">width</span><span class="p">:</span> <span class="s1">&#39;20cm&#39;</span><span class="o">]</span>
</span><span class="line"><span class="n">o</span><span class="o">.</span><span class="n">save!</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and you might be wondering what sort of magic has happened. Let&#8217;s check the output log:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="text"><span class="line"> (0.1ms)  begin transaction
</span><span class="line">SQL (0.4ms)  INSERT INTO &quot;products&quot; (&quot;name&quot;, &quot;created_at&quot;, &quot;properties&quot;, &quot;updated_at&quot;) VALUES (?, ?, ?)  [[&quot;name&quot;, &quot;The Uber Kubik&quot;], [&quot;created_at&quot;, &quot;2014-04-20 21:59:47.486719&quot;], [&quot;properties&quot;, &quot;---\n- :length: 10cm\n  :width: 20cm\n&quot;], [&quot;updated_at&quot;, &quot;2014-04-20 21:59:47.486719&quot;]]
</span><span class="line"> (1.2ms)  commit transaction
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>clearly we learn that Rails store a YAML string <code>---\n- :length: 10cm\n  :width: 20cm\n</code> into DB. Again, Rails
also does the magic to deserialize this YAML string back to object:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">o</span><span class="o">.</span><span class="n">properties</span>
</span><span class="line"><span class="c1">#=&gt; [length: &#39;10cm&#39;, width: &#39;20cm&#39;]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="alternative-serializer">Alternative serializer</h2>

<p>Rails takes in two arguments for class method <code>serialize</code>, the first is the column name and the second is the <em>coder
classname</em>. The coder class is the name of the serializer class. Rails comes with two serialzers, YAML and JSON.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Product</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class="line">  <span class="n">serialize</span> <span class="ss">:properties</span><span class="p">,</span> <span class="no">JSON</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>By specifying <code>JSON</code> as the second argument for <code>serialize</code> we tell Rails to use serialize/deseralize the column
value with JSON.</p>

<p>Again, you might be wondering how YAML and JSON serializers work? Well, the basically they are class that have two
class methods, that is <code>load</code> for serialization and <code>dump</code> for deserialization.</p>

<p>Let&#8217;s write a JSON serializer that encrypt/decrypt the value with RSA key.</p>

<p>We create a very naive and primitive cipher that simply un/reverse the string:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># lib/protected_json_serializer.rb</span>
</span><span class="line"><span class="k">class</span> <span class="nc">ProtectedJsonSerializer</span>
</span><span class="line">  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">load</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class="line">    <span class="no">JSON</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">decrypt</span><span class="p">(</span><span class="n">value</span><span class="p">))</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">dump</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class="line">    <span class="n">encrypt</span><span class="p">(</span><span class="no">JSON</span><span class="o">.</span><span class="n">dump</span><span class="p">(</span><span class="n">value</span><span class="p">))</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="kp">private</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">encrypt</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class="line">    <span class="n">value</span><span class="o">.</span><span class="n">reverse</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">decrypt</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class="line">    <span class="n">value</span><span class="o">.</span><span class="n">reverse</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and set the coder to <code>ProtectedJsonSerializer</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;protected_json_serializer&#39;</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Product</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class="line">  <span class="n">serialize</span> <span class="ss">:properties</span><span class="p">,</span> <span class="no">ProtectedJsonSerializer</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and now let&#8217;s see the magic:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">o</span> <span class="o">=</span> <span class="no">Product</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;The Uber Kubik&#39;</span><span class="p">)</span>
</span><span class="line"><span class="n">o</span><span class="o">.</span><span class="n">properties</span> <span class="o">=</span> <span class="o">[</span><span class="ss">length</span><span class="p">:</span> <span class="s1">&#39;10cm&#39;</span><span class="p">,</span> <span class="ss">width</span><span class="p">:</span> <span class="s1">&#39;20cm&#39;</span><span class="o">]</span>
</span><span class="line"><span class="n">o</span><span class="o">.</span><span class="n">save!</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>would yield log output:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="text"><span class="line"> (0.1ms)  begin transaction
</span><span class="line">SQL (0.4ms)  INSERT INTO &quot;products&quot; (&quot;name&quot;, &quot;created_at&quot;, &quot;properties&quot;, &quot;updated_at&quot;) VALUES (?, ?, ?)  [[&quot;name&quot;, &quot;The Uber Kubik&quot;], [&quot;created_at&quot;, &quot;2014-04-20 21:59:47.486719&quot;], [&quot;properties&quot;, &quot;]}\&quot;mc02\&quot;:\&quot;htdiw\&quot;,\&quot;mc01\&quot;:\&quot;htgnel\&quot;{[&quot;], [&quot;updated_at&quot;, &quot;2014-04-20 21:59:47.486719&quot;]]
</span><span class="line"> (1.2ms)  commit transaction
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>the output clearly shows that our <code>properties</code> value is encryted <code>["properties", "]}\"mc02\":\"htdiw\",\"mc01\":\"htgnel\"{["]</code></p>

<p>so now we can rest assured that even RSA has access to our DB, they could not read our data (well, you need
to do a better job with the encryption than my naive implementation).</p>

<h3 id="summary">Summary</h3>

<p>For most of common cases, you probably don&#8217;t have to worry about custom serializer. But the power is there
if you ever need it. Please remember that <code>serialzie</code> takes the serializer class name as the second argument
and the serializer must have 2 methods <code>load</code> and <code>dump</code>.</p>

<p>That&#8217;s all folks. Keep on learning!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to override :id param for Rails resource routing]]></title>
    <link href="http://ruby-journal.com/how-to-override-default-id-param-for-rails-resource-routing/"/>
    <updated>2014-04-18T10:28:00+10:00</updated>
    <id>http://ruby-journal.com/how-to-override-default-id-param-for-rails-resource-routing</id>
    <content type="html"><![CDATA[
<p>By default, every resource routing is generated with <code>:id</code> as the identifier param.
What if you want to change this <code>:id</code> to something? Read on and I&#8217;ll show you how.</p>

<!--more-->

<p>When I was working with Spree, there is a requirement to find Order by its <code>number</code>
column. The way Spree solved this problem (this is pre-Rails 4 era), is to override
the <code>Order#to_param</code> like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># app/models/order.rb</span>
</span><span class="line"><span class="k">def</span> <span class="nf">to_param</span>
</span><span class="line">  <span class="n">number</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">to_url</span><span class="o">.</span><span class="n">upcase</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Yet I find the solution more problematic as we now have a unorthodox <code>to_param</code> which
does not refer to our default integer <code>:id</code> column. Furthermore, our <code>OrdersController</code>
still find object with <code>params[:id]</code>, which might be confusing for users.</p>

<p>There is a better solution if you are on Rails 4, that is modifying the routing.</p>

<p>We have a routing like below:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># config/routes.rb</span>
</span><span class="line"><span class="n">resources</span> <span class="ss">:orders</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>which would generates:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="text"><span class="line">bundle exec rake routes
</span><span class="line">            Prefix Verb  URI Pattern                   Controller#Action
</span><span class="line">           orders GET    /orders(.:format)             orders#index
</span><span class="line">                  POST   /orders(.:format)             orders#create
</span><span class="line">        new_order GET    /orders/new(.:format)         orders#new
</span><span class="line">       edit_order GET    /orders/:id/edit(.:format)    orders#edit
</span><span class="line">            order GET    /orders/:id(.:format)         orders#show
</span><span class="line">                  PATCH  /orders/:id(.:format)         orders#update
</span><span class="line">                  PUT    /orders/:id(.:format)         orders#update
</span><span class="line">                  DELETE /orders/:id(.:format)         orders#destroy
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now if the business logic is to use <code>:number</code> instead of <code>:id</code>, we could override the
default routing by using <code>param</code> argument:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># config/routes.rb</span>
</span><span class="line"><span class="n">resources</span> <span class="ss">:orders</span><span class="p">,</span> <span class="ss">param</span><span class="p">:</span> <span class="ss">:number</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and we double-check with:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="text"><span class="line">bundle exec rake routes
</span><span class="line">            Prefix Verb  URI Pattern                       Controller#Action
</span><span class="line">           orders GET    /orders(.:format)                 orders#index
</span><span class="line">                  POST   /orders(.:format)                 orders#create
</span><span class="line">        new_order GET    /orders/new(.:format)             orders#new
</span><span class="line">       edit_order GET    /orders/:number/edit(.:format)    orders#edit
</span><span class="line">            order GET    /orders/:number(.:format)         orders#show
</span><span class="line">                  PATCH  /orders/:number(.:format)         orders#update
</span><span class="line">                  PUT    /orders/:number(.:format)         orders#update
</span><span class="line">                  DELETE /orders/:number(.:format)         orders#destroy
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Please be noted that you need to modify the <code>OrdersController</code> to find Order record
with <code>params[:number]</code> instead of <code>params[:id]</code>.</p>

<p>For most of the cases, the Rails convention of using <code>:id</code> as primary key does the job
well. However should you need to use something different, please do not hesistate to
use custom column for the job. And IMHO, please refrain from overriding the <code>to_param</code>.</p>

<p>That&#8217;s it folks, keep on learning!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to DRY your Rails routes]]></title>
    <link href="http://ruby-journal.com/how-to-dry-your-rails-routes/"/>
    <updated>2014-04-18T09:29:00+10:00</updated>
    <id>http://ruby-journal.com/how-to-dry-your-rails-routes</id>
    <content type="html"><![CDATA[
<p>So you have duplicated routes in your resources? In today tutorial, I&#8217;ll show you how to DRY it up abit.</p>

<!--more-->

<h2 id="sample-code">Sample code</h2>

<p>Just imagine we have following routes:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># config/routes.rb</span>
</span><span class="line">
</span><span class="line"><span class="n">resources</span> <span class="ss">:pamphlets</span> <span class="k">do</span>
</span><span class="line">  <span class="n">member</span> <span class="k">do</span>
</span><span class="line">    <span class="n">post</span> <span class="ss">:print</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">resources</span> <span class="ss">:posters</span> <span class="k">do</span>
</span><span class="line">  <span class="n">member</span> <span class="k">do</span>
</span><span class="line">    <span class="n">post</span> <span class="ss">:print</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="n">collection</span> <span class="k">do</span>
</span><span class="line">    <span class="n">post</span> <span class="ss">:bulk_print</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>As we could see in the code above, we have two resources <code>:pamphlets</code> and <code>:posters</code> that both share same
<code>post :print</code> route.</p>

<h2 id="dry-with-rails-3">DRY with Rails 3</h2>

<p>In order to DRY it, we could extract the block <code>member { post :print }</code> to a shared proc <code>printable</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">printable</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span>
</span><span class="line">  <span class="n">member</span> <span class="k">do</span>
</span><span class="line">    <span class="n">post</span> <span class="ss">:print</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">resources</span> <span class="ss">:pamphlets</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">printable</span>
</span><span class="line">
</span><span class="line"><span class="n">resources</span> <span class="ss">:posters</span> <span class="k">do</span>
</span><span class="line">  <span class="n">printable</span><span class="o">.</span><span class="n">call</span>
</span><span class="line">
</span><span class="line">  <span class="n">collection</span> <span class="k">do</span>
</span><span class="line">    <span class="n">post</span> <span class="ss">:bulk_print</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>resources</code> method take in a block, so for <code>pamphlets</code> we parse the whole <code>printable</code> in as block. It is
a bit different with <code>posters</code> because this resource already have a block, here what we do is we call
the proc <code>printable</code> within the block by using <code>call</code>.</p>

<h3 id="dry-with-rails-4">DRY with Rails 4</h3>

<p>With Rails 4, it is much easier by using routing concern. Here&#8217;s how:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">concern</span> <span class="ss">:printable</span> <span class="k">do</span>
</span><span class="line">  <span class="n">member</span> <span class="k">do</span>
</span><span class="line">    <span class="n">post</span> <span class="ss">:print</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">resources</span> <span class="ss">:pamphlets</span><span class="p">,</span> <span class="ss">concerns</span><span class="p">:</span> <span class="ss">:printable</span>
</span><span class="line">
</span><span class="line"><span class="n">resources</span> <span class="ss">:posters</span><span class="p">,</span> <span class="ss">concerns</span><span class="p">:</span> <span class="ss">:printable</span> <span class="k">do</span>
</span><span class="line">  <span class="n">collection</span> <span class="k">do</span>
</span><span class="line">    <span class="n">post</span> <span class="ss">:bulk_print</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>We create a routing concern by using method <code>concern</code> and specify which concern we want to use for each resource
via argument <code>concerns</code>.</p>

<h3 id="summary">Summary</h3>

<p>Rails routing is very powerful and there are many magic that I want to talk to you in near future. For now, you learn
how to extract shared routes into concern to DRY your routes. Go on, share it with everyone and keep on learning!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Liquid template in Ruby done right]]></title>
    <link href="http://ruby-journal.com/liquid-template-in-ruby-done-right/"/>
    <updated>2014-04-10T16:48:00+10:00</updated>
    <id>http://ruby-journal.com/liquid-template-in-ruby-done-right</id>
    <content type="html"><![CDATA[
<p>Liquid Templating Engine is an awesome technology and with the power of gem &#8216;liquid&#8217;,
everybody can start using without much hassles. I saw many projects used this gem
but sadly most of them are quite bad. In this tutorial, I&#8217;ll go through a bad example
and show you how to refactor it.</p>

<!--more-->

<h2 id="the-smell">The smell</h2>

<p>Below code is for a report generation function for a car dealer Rails app.</p>

<p>Let&#8217;s see the codes:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># app/models/car_issue.rb</span>
</span><span class="line"><span class="k">class</span> <span class="nc">CarIssue</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class="line">  <span class="n">belongs_to</span> <span class="ss">:car</span>
</span><span class="line">
</span><span class="line">  <span class="n">liquid_methods</span> <span class="ss">:description</span><span class="p">,</span> <span class="ss">:reference_number</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="c1"># app/models/car.rb</span>
</span><span class="line"><span class="k">class</span> <span class="nc">Car</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class="line">  <span class="n">has_many</span> <span class="ss">:car_issues</span>
</span><span class="line">  <span class="n">belongs_to</span> <span class="ss">:customer</span>
</span><span class="line">
</span><span class="line">  <span class="n">liquid_methods</span> <span class="ss">:car_make</span><span class="p">,</span> <span class="ss">:owner</span><span class="p">,</span> <span class="ss">:dealer_contact_details</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">owner</span>
</span><span class="line">    <span class="n">customer</span><span class="o">.</span><span class="n">full_name</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">car_make</span>
</span><span class="line">    <span class="s2">&quot;</span><span class="si">#{</span><span class="n">brand</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">model</span><span class="si">}</span><span class="s2"> MY </span><span class="si">#{</span><span class="n">manufacturer_year</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">dealer_contact_details</span>
</span><span class="line"><span class="o">&lt;&lt;-</span><span class="no">CONTACT</span>
</span><span class="line"><span class="sh">  Uber Dealer</span>
</span><span class="line">
</span><span class="line"><span class="sh">  9 Sesame St</span>
</span><span class="line"><span class="sh">  Emo Town</span>
</span><span class="line"><span class="no">CONTACT</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="c1"># app/models/customer.rb</span>
</span><span class="line"><span class="k">class</span> <span class="nc">Customer</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class="line">  <span class="n">liquid_methods</span> <span class="ss">:full_name</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">full_name</span>
</span><span class="line">    <span class="s2">&quot;</span><span class="si">#{</span><span class="n">first_name</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">last_name</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="c1"># app/services/car_report_generation.rb</span>
</span><span class="line"><span class="k">class</span> <span class="nc">CarReportGeneration</span> <span class="k">do</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">car</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@car</span> <span class="o">=</span> <span class="n">car</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">template</span>
</span><span class="line"><span class="o">&lt;&lt;-</span><span class="no">TEMPLATE</span>
</span><span class="line"><span class="sh">  Dear {{ car.owner }},</span>
</span><span class="line">
</span><span class="line"><span class="sh">  We&#39;ve performed inspection on your {{ car.car_make }} and found following issues:</span>
</span><span class="line">
</span><span class="line"><span class="sh">  {% for issue in car.issues %}</span>
</span><span class="line"><span class="sh">    * {{ issue.reference_number }} - {{ issue.description }}</span>
</span><span class="line"><span class="sh">  {% endfor %}</span>
</span><span class="line">
</span><span class="line"><span class="sh">  Please call us back for quotes</span>
</span><span class="line">
</span><span class="line"><span class="sh">  Sincerely yours</span>
</span><span class="line">
</span><span class="line"><span class="sh">  {{ car.dealer_contact_details }}</span>
</span><span class="line"><span class="no">TEMPLATE</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">generate_report</span>
</span><span class="line">    <span class="ss">Liquid</span><span class="p">:</span><span class="ss">:Template</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">template</span><span class="p">)</span><span class="o">.</span><span class="n">render</span> <span class="s1">&#39;car&#39;</span> <span class="o">=&gt;</span> <span class="vi">@car</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>As you can see above, the main logic is <code>CarReportGeneration#generate_report</code> which
render the report template using Liquid to populate fields.</p>

<p>What&#8217;s so stink about the above code? In fact, I think it&#8217;s perfectly fine. However should
the report requires more details, user will create more methods within Car model to serve
as report details getter and this could get very ugly quickly as the coupling emerges more
clearly.</p>

<h2 id="refactoring">Refactoring</h2>

<p>We will take many little steps.</p>

<p>The first step is to reduce the coupling between our models and Liquid. As you can see
above that the code exposes methods to Liquid with method <code>liquid_methods</code>. This method
meta-programmingly create for you a class which is a subclass of Liquid::Drop then create
instance methods that matches the parsed method names.</p>

<p>So our Car&#8217;s <code>liquid_methods :car_make, :owner, :dealer_contact_details</code> would do following implicit things:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">Car</span><span class="o">.</span><span class="n">class_eval</span> <span class="k">do</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">to_liquid</span>
</span><span class="line">    <span class="ss">Car</span><span class="p">:</span><span class="ss">:LiquidDropClass</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Car</span><span class="o">::</span><span class="no">LiquidDropClass</span> <span class="o">&lt;</span> <span class="ss">Liquid</span><span class="p">:</span><span class="ss">:Drop</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initalize</span><span class="p">(</span><span class="n">object</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@object</span> <span class="o">=</span> <span class="n">object</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">owner</span>
</span><span class="line">    <span class="vi">@object</span><span class="o">.</span><span class="n">customer</span><span class="o">.</span><span class="n">full_name</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">car_make</span>
</span><span class="line">    <span class="vi">@object</span><span class="o">.</span><span class="n">car_make</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">dealer_contact_details</span>
</span><span class="line">    <span class="vi">@object</span><span class="o">.</span><span class="n">dealer_contact_details</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>We see that the magic lies in method <code>to_liquid</code> which point to a <code>Liquid::Drop</code> class.
This special object is what Liquid template takes in to render the template.</p>

<p>Now we could replicate the logic easily. See the code below:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># app/models/car.rb</span>
</span><span class="line"><span class="k">class</span> <span class="nc">Car</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class="line">  <span class="n">has_many</span> <span class="ss">:car_issues</span>
</span><span class="line">  <span class="n">belongs_to</span> <span class="ss">:customer</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">to_liquid</span>
</span><span class="line">    <span class="no">CarMergeField</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="c1"># app/merge_fields/car_merge_field.rb</span>
</span><span class="line"><span class="k">class</span> <span class="nc">CarMergeField</span> <span class="o">&lt;</span> <span class="ss">Liquid</span><span class="p">:</span><span class="ss">:Drop</span>
</span><span class="line">  <span class="kp">attr_reader</span> <span class="ss">:car</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initalize</span><span class="p">(</span><span class="n">car</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@car</span> <span class="o">=</span> <span class="n">car</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">owner</span>
</span><span class="line">    <span class="n">car</span><span class="o">.</span><span class="n">customer</span><span class="o">.</span><span class="n">full_name</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">car_make</span>
</span><span class="line">    <span class="s2">&quot;</span><span class="si">#{</span><span class="n">car</span><span class="o">.</span><span class="n">brand</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">car</span><span class="o">.</span><span class="n">model</span><span class="si">}</span><span class="s2"> MY </span><span class="si">#{</span><span class="n">car</span><span class="o">.</span><span class="n">manufacturer_year</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">dealer_contact_details</span>
</span><span class="line"><span class="o">&lt;&lt;-</span><span class="no">CONTACT</span>
</span><span class="line"><span class="sh">  Uber Dealer</span>
</span><span class="line">
</span><span class="line"><span class="sh">  9 Sesame St</span>
</span><span class="line"><span class="sh">  Emo Town</span>
</span><span class="line"><span class="no">CONTACT</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>By moving all Liquid-related methods to a separate class, we leave Car model
clean and slim, well with a cost of one function, that is <code>Car#to_liquid</code>, but
I guess we could live with that for now.</p>

<p>But that&#8217;s the end of refactoring yet, we could see that <code>CarMergeField#dealer_contact_details</code>
should not belong to Car model and would be shared between many reports in the future.</p>

<p>So we create a new class for that:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">DealerMergeField</span> <span class="o">&lt;</span> <span class="ss">Liquid</span><span class="p">:</span><span class="ss">:Drop</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">contact_details</span>
</span><span class="line"><span class="o">&lt;&lt;-</span><span class="no">CONTACT</span>
</span><span class="line"><span class="sh">  Uber Dealer</span>
</span><span class="line">
</span><span class="line"><span class="sh">  9 Sesame St</span>
</span><span class="line"><span class="sh">  Emo Town</span>
</span><span class="line"><span class="no">CONTACT</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and make sure we also remove <code>CarMergeField#dealer_contact_details</code> and update our template:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># app/services/car_report_generation.rb</span>
</span><span class="line"><span class="k">class</span> <span class="nc">CarReportGeneration</span> <span class="k">do</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># ...</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">template</span>
</span><span class="line"><span class="o">&lt;&lt;-</span><span class="no">TEMPLATE</span>
</span><span class="line"><span class="sh">  Dear {{ car.owner }},</span>
</span><span class="line">
</span><span class="line"><span class="sh">  We&#39;ve performed inspection on your {{ car.car_make }} and found following issues:</span>
</span><span class="line">
</span><span class="line"><span class="sh">  {% for issue in car.issues %}</span>
</span><span class="line"><span class="sh">    * {{ issue.reference_number }} - {{ issue.description }}</span>
</span><span class="line"><span class="sh">  {% endfor %}</span>
</span><span class="line">
</span><span class="line"><span class="sh">  Please call us back for quotes</span>
</span><span class="line">
</span><span class="line"><span class="sh">  Sincerely yours</span>
</span><span class="line">
</span><span class="line"><span class="sh">  {{ dealer.contact_details }}</span>
</span><span class="line"><span class="no">TEMPLATE</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">generate_report</span>
</span><span class="line">    <span class="n">liquid_drops</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">      <span class="s1">&#39;car&#39;</span> <span class="o">=&gt;</span> <span class="vi">@car</span><span class="p">,</span>
</span><span class="line">      <span class="s1">&#39;dealer&#39;</span> <span class="o">=&gt;</span> <span class="no">DealerMergeField</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="ss">Liquid</span><span class="p">:</span><span class="ss">:Template</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">template</span><span class="p">)</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="n">liquid_drops</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Please pay attention closely to the <code>CarReportGeneration#generate_report</code>, you could
see that I parse in new liquid drop <code>dealer</code> which is an object of <code>DealerMergeField</code>.
FYI, the liquid does not have to tie to a model. We now could carry on and apply
the same technique for model CarIssue.</p>

<p>Yet, I am not satisfied, we could push abit further by extraction common liquid
rendering logic into its own class and encourage reusability of this class for
other reports.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># app/services/report_generation.rb</span>
</span><span class="line"><span class="k">class</span> <span class="nc">ReportGeneration</span>
</span><span class="line">  <span class="kp">attr_reader</span> <span class="ss">:report</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">report</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@report</span> <span class="o">=</span> <span class="n">report</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">generate_report</span>
</span><span class="line">    <span class="ss">Liquid</span><span class="p">:</span><span class="ss">:Template</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">report</span><span class="o">.</span><span class="n">template</span><span class="p">)</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="n">report</span><span class="o">.</span><span class="n">liquid_drops</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="c1"># app/reports/car_report.rb</span>
</span><span class="line"><span class="k">class</span> <span class="nc">CarReport</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">car</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@car</span> <span class="o">=</span> <span class="n">car</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">template</span>
</span><span class="line"><span class="o">&lt;&lt;-</span><span class="no">TEMPLATE</span>
</span><span class="line"><span class="sh">  Dear {{ car.owner }},</span>
</span><span class="line">
</span><span class="line"><span class="sh">  We&#39;ve performed inspection on your {{ car.car_make }} and found following issues:</span>
</span><span class="line">
</span><span class="line"><span class="sh">  {% for issue in car.issues %}</span>
</span><span class="line"><span class="sh">    * {{ issue.reference_number }} - {{ issue.description }}</span>
</span><span class="line"><span class="sh">  {% endfor %}</span>
</span><span class="line">
</span><span class="line"><span class="sh">  Please call us back for quotes</span>
</span><span class="line">
</span><span class="line"><span class="sh">  Sincerely yours</span>
</span><span class="line">
</span><span class="line"><span class="sh">  {{ dealer.contact_details }}</span>
</span><span class="line"><span class="no">TEMPLATE</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">liquid_drops</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">      <span class="s1">&#39;car&#39;</span> <span class="o">=&gt;</span> <span class="vi">@car</span><span class="p">,</span>
</span><span class="line">      <span class="s1">&#39;dealer&#39;</span> <span class="o">=&gt;</span> <span class="no">DealerMergeField</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and to use it we do:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">car_report</span> <span class="o">=</span> <span class="no">CarReport</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vi">@car</span><span class="p">)</span>
</span><span class="line"><span class="no">ReportGeneration</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">car_report</span><span class="p">)</span><span class="o">.</span><span class="n">generate_report</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="conclusion">Conclusion</h2>

<p>Never let a gem manipulate you. If you see a gem makes you do bad things,
then you should dig deeper. Even writing new thing your own is not a bad
solution. If you don&#8217;t have time for that, make sure you write abstract
method that could help you untangle the coupling later.</p>

<p>I hope this is useful to some. I really welcome feedbacks.</p>

<p>Keep on learning folks!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to style kaminari pagination with Twitter Bootstrap 3]]></title>
    <link href="http://ruby-journal.com/how-to-style-kaminari-pagination-with-twitter-bootstrap-3/"/>
    <updated>2014-04-01T19:04:00+11:00</updated>
    <id>http://ruby-journal.com/how-to-style-kaminari-pagination-with-twitter-bootstrap-3</id>
    <content type="html"><![CDATA[
<p>Kamiari is an awesome that would do all heavy-lifting work if you want to do pagination.
Yet Kaminari&#8217;s default layout does not fit well with Twitter Bootstrap pagination styling.
In this tutorial, I&#8217;ll show you how to make Kaminari play well with Bootstrap v3.</p>

<!--more-->

<p>First thing, assume we have <code>app/views/products/index.html.haml</code>, place the
Kaminari&#8217;s <code>paginate</code> call in this template:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="haml"><span class="line">...
</span><span class="line"><span class="p">=</span> <span class="n">paginate</span> <span class="vi">@products</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>By default, Kaminari will generate a list of <code>nav</code> wrapped under a div, which is
totally different to the <code>ul li</code> structures of Bootstrap pagination.</p>

<p>No problemo! we could tweak this. Now we need to tell bootstrap to generate template files:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="haml"><span class="line">rails generate kaminari:views bootstrap
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>which create various fields under <code>app/views/kaminari</code>.</p>

<p>Next, we need to edit <code>app/views/kaminari/_paginator.html.haml</code> and replace the
content with:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="haml"><span class="line"><span class="p">=</span> <span class="n">paginator</span><span class="o">.</span><span class="n">render</span> <span class="k">do</span>
</span><span class="line">  <span class="nt">%ul</span><span class="nc">.pagination.pagination-lg</span>
</span><span class="line">    <span class="p">=</span> <span class="n">first_page_tag</span> <span class="k">unless</span> <span class="n">current_page</span><span class="o">.</span><span class="n">first?</span>
</span><span class="line">    <span class="p">=</span> <span class="n">prev_page_tag</span> <span class="k">unless</span> <span class="n">current_page</span><span class="o">.</span><span class="n">first?</span>
</span><span class="line">    <span class="p">-</span> <span class="n">each_page</span> <span class="k">do</span> <span class="o">|</span><span class="n">page</span><span class="o">|</span>
</span><span class="line">      <span class="p">-</span> <span class="k">if</span> <span class="n">page</span><span class="o">.</span><span class="n">left_outer?</span> <span class="o">||</span> <span class="n">page</span><span class="o">.</span><span class="n">right_outer?</span> <span class="o">||</span> <span class="n">page</span><span class="o">.</span><span class="n">inside_window?</span>
</span><span class="line">        <span class="p">=</span> <span class="n">page_tag</span> <span class="n">page</span>
</span><span class="line">      <span class="p">-</span> <span class="k">elsif</span> <span class="o">!</span><span class="n">page</span><span class="o">.</span><span class="n">was_truncated?</span>
</span><span class="line">        <span class="p">=</span> <span class="n">gap_tag</span>
</span><span class="line">    <span class="p">=</span> <span class="n">next_page_tag</span> <span class="k">unless</span> <span class="n">current_page</span><span class="o">.</span><span class="n">last?</span>
</span><span class="line">    <span class="p">=</span> <span class="n">last_page_tag</span> <span class="k">unless</span> <span class="n">current_page</span><span class="o">.</span><span class="n">last?</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>What we did above is getting rid of <code>div.pagination</code> and adding class
<code>pagination</code> to <code>ul</code> tag</p>

<p>That&#8217;s it, now you have Twitter Bootstrap 3 pagination powered by Kaminari!</p>

<p>Keep on learning guys!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Create dummy controller for testing with rspec-rails]]></title>
    <link href="http://ruby-journal.com/create-dummy-controller-for-testing-with-rspec-rails/"/>
    <updated>2014-03-24T09:21:00+11:00</updated>
    <id>http://ruby-journal.com/create-dummy-controller-for-testing-with-rspec-rails</id>
    <content type="html"><![CDATA[
<p>Today I learned a nitfy trick from Jon Rowe on how to to create anonymous controller
with rspec-rails for controller spec. This would aid testing action callbacks testing
in controller.</p>

<!--more-->

<p>Say you are testing <code>before_action :authenticate!</code> in your ApplicationController.</p>

<p>Here is my <code>ApplicationController</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">ApplicationController</span> <span class="o">&lt;</span> <span class="ss">ActionController</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class="line">
</span><span class="line">  <span class="n">before_action</span> <span class="ss">:authenticate!</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now, I want to test this callback. There are many ways to tackle this, I could create
a dummy controller like below:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">DummyController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">dummy</span>
</span><span class="line">    <span class="n">render</span> <span class="ss">text</span><span class="p">:</span> <span class="s1">&#39;Hello World&#39;</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="c1"># adding dummy routing dynamically - prepare for the hacky hacky!</span>
</span><span class="line"><span class="k">begin</span>
</span><span class="line">  <span class="n">_routes</span> <span class="o">=</span> <span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">routes</span>
</span><span class="line">  <span class="n">_routes</span><span class="o">.</span><span class="n">disable_clear_and_finalize</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class="line">  <span class="n">_routes</span><span class="o">.</span><span class="n">clear!</span>
</span><span class="line">  <span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">routes_reloader</span><span class="o">.</span><span class="n">paths</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">path</span><span class="o">|</span> <span class="nb">load</span><span class="p">(</span><span class="n">path</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line">  <span class="n">_routes</span><span class="o">.</span><span class="n">draw</span> <span class="k">do</span>
</span><span class="line">    <span class="n">get</span> <span class="s1">&#39;/dummy&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;dummy#dummy&#39;</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">  <span class="no">ActiveSupport</span><span class="o">.</span><span class="n">on_load</span><span class="p">(</span><span class="ss">:action_controller</span><span class="p">)</span> <span class="p">{</span> <span class="n">_routes</span><span class="o">.</span><span class="n">finalize!</span> <span class="p">}</span>
</span><span class="line"><span class="k">ensure</span>
</span><span class="line">  <span class="n">_routes</span><span class="o">.</span><span class="n">disable_clear_and_finalize</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="n">describe</span> <span class="no">ApplicationController</span> <span class="k">do</span>
</span><span class="line">  <span class="c1"># your test</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Oh gosh, that&#8217;s surely ugly! We could refactor all above with:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">describe</span> <span class="no">ApplicationController</span> <span class="k">do</span>
</span><span class="line">  <span class="n">controller</span> <span class="k">do</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">dummy</span>
</span><span class="line">      <span class="n">render</span> <span class="ss">text</span><span class="p">:</span> <span class="s1">&#39;Hello world&#39;</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="n">describe</span> <span class="s1">&#39;authenticate! action callback&#39;</span> <span class="k">do</span>
</span><span class="line">    <span class="n">it</span> <span class="s1">&#39;does redirect if user not sign in&#39;</span> <span class="k">do</span>
</span><span class="line">      <span class="c1"># ...</span>
</span><span class="line">      <span class="n">get</span> <span class="ss">:dummy</span>
</span><span class="line">
</span><span class="line">      <span class="c1"># ...</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Thanks to rspec-rails, we have the <code>controller</code> helper which creates
an anonymous controller (that inherits from ApplicationController).
It saves you many hacky lines and plus you don&#8217;t need to care about
routing.</p>

<p>See? You know know a powerful trick! So go on, try it! Keep on learning!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Genereate gems dependency graph with Bundler]]></title>
    <link href="http://ruby-journal.com/genereate-gems-dependency-graph-with-bundler/"/>
    <updated>2014-03-18T13:34:00+11:00</updated>
    <id>http://ruby-journal.com/genereate-gems-dependency-graph-with-bundler</id>
    <content type="html"><![CDATA[
<p>One of the features I like about RubyMine is the gems dependency graph.
This graps shows you all explicit/implicit dependencies of gems defined in
your Gemfile. In this short tutorial, I&#8217;ll show how to generate this graph
with Bundler.</p>

<!--more-->

<p>You&#8217;ll need graphviz installed first. On my Mac, I install it with Homebrew:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">brew install graphviz</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You could find packages for your flavor on the Internet if you are on Linux.</p>

<p>In order to generate graph, you need to change directory to the app folder
where the Gemfile file resides then use command:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">bundle viz
</span><span class="line"># Resolving dependencies...
</span><span class="line"># /app_path/gem_graph.png</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If there is no errors, you should see the image file path in the output.</p>

<p>Open it up and you&#8217;ll see something like this for a stock Rails 4 app:</p>

<p><img class="left" src="http://ruby-journal.com/images/2014-03-18-genereate-gems-dependency-graph-with-bundler/gem_graph.png" /></p>

<p>That&#8217;s it for today folks! Keep on learning!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to switch between selenium and poltergeist in capybara for Rails integration RSpec test]]></title>
    <link href="http://ruby-journal.com/how-to-switch-between-selenium-and-poltergeist-for-rails-integration-rsped-test/"/>
    <updated>2014-03-14T09:20:00+11:00</updated>
    <id>http://ruby-journal.com/how-to-switch-between-selenium-and-poltergeist-for-rails-integration-rsped-test</id>
    <content type="html"><![CDATA[
<p>Debugging integration is still a pain with headless driver like poltergeist. In this tutorial
I&#8217;ll show you a good tip how to switch to selenium for debugging with Firefox.</p>

<!--more-->

<p>Testing with selenium-webdriver is always slower than headless poltergeist, abeit easier to debug.
Debugging with selenium brings up Firefox browser window with CSS and JS correctly loaded whilst
it&#8217;s not the same case with poltergeist.</p>

<p>I am going to show you to have both of drivers in same Rails app and you could switch to selenium
for debugging easily!</p>

<p>First thing is to add into your <code>Gemfile</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">group</span> <span class="ss">:test</span> <span class="k">do</span>
</span><span class="line">  <span class="n">gem</span> <span class="s1">&#39;selenium-webdriver&#39;</span><span class="p">,</span> <span class="nb">require</span><span class="p">:</span> <span class="kp">false</span>
</span><span class="line">  <span class="n">gem</span> <span class="s1">&#39;poltergeist&#39;</span><span class="p">,</span> <span class="nb">require</span><span class="p">:</span> <span class="kp">false</span>
</span><span class="line">  <span class="n">gem</span> <span class="s1">&#39;capybara&#39;</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I want to point out that we explicitly set <code>reauire: false</code> so that capybara won&#8217;t load any driver.
This help avoid conflicts when two drivers are loaded at same time.</p>

<p>Please make sure you run &#8216;bundle install&#8217;  before moving to the next step.</p>

<p>Now I assume that you are using default RSpec&#8217;s helper <code>spec/spec_helper</code> for your integration test. Please ensure
that this line is in your file:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;capybara/rspec&#39;</span>
</span><span class="line">
</span><span class="line"><span class="no">Dir</span><span class="o">[</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;spec/support/**/*.rb&quot;</span><span class="p">)</span><span class="o">].</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="nb">require</span> <span class="n">f</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The above line tells RSpec to pick up any extensions/helpers that we place under <code>spec/support</code> folder.</p>

<p>Next we create new <code>spec/support/feature_spec_extensions.rb</code> with content:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">module</span> <span class="nn">FeatureSpecExtensions</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">hang</span>
</span><span class="line">    <span class="nb">print</span> <span class="s2">&quot;Waiting.... Press return if you wanna continue&quot;</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;FF&#39;</span><span class="o">]</span> <span class="o">==</span> <span class="s1">&#39;true&#39;</span>
</span><span class="line">      <span class="no">STDIN</span><span class="o">.</span><span class="n">getc</span>
</span><span class="line">    <span class="k">else</span>
</span><span class="line">      <span class="n">page</span><span class="o">.</span><span class="n">driver</span><span class="o">.</span><span class="n">debug</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="no">RSpec</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class="line">  <span class="n">config</span><span class="o">.</span><span class="n">include</span> <span class="no">FeatureSpecExtensions</span><span class="p">,</span> <span class="ss">type</span><span class="p">:</span> <span class="ss">:feature</span>
</span><span class="line">
</span><span class="line">  <span class="n">config</span><span class="o">.</span><span class="n">before</span> <span class="ss">:suite</span><span class="p">,</span> <span class="ss">type</span><span class="p">:</span> <span class="ss">:feature</span> <span class="k">do</span>
</span><span class="line">    <span class="k">if</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;FF&#39;</span><span class="o">]</span> <span class="o">==</span> <span class="s1">&#39;true&#39;</span> <span class="c1"># in case you wanna run it with selenium</span>
</span><span class="line">      <span class="nb">require</span> <span class="s1">&#39;selenium-webdriver&#39;</span>
</span><span class="line">    <span class="k">else</span>
</span><span class="line">      <span class="nb">require</span> <span class="s1">&#39;capybara/poltergeist&#39;</span>
</span><span class="line">      <span class="no">Capybara</span><span class="o">.</span><span class="n">register_driver</span> <span class="ss">:poltergeist</span> <span class="k">do</span> <span class="o">|</span><span class="n">app</span><span class="o">|</span>
</span><span class="line">        <span class="ss">Capybara</span><span class="p">:</span><span class="ss">:Poltergeist</span><span class="o">::</span><span class="no">Driver</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="p">{</span>
</span><span class="line">          <span class="n">js_errors</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span>
</span><span class="line">          <span class="ss">inspector</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span>
</span><span class="line">          <span class="n">phantomjs_options</span><span class="p">:</span> <span class="o">[</span><span class="s1">&#39;--load-images=no&#39;</span><span class="p">,</span> <span class="s1">&#39;--ignore-ssl-errors=yes&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class="line">          <span class="ss">timeout</span><span class="p">:</span> <span class="mi">120</span>
</span><span class="line">        <span class="p">})</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="n">config</span><span class="o">.</span><span class="n">before</span> <span class="ss">:each</span><span class="p">,</span> <span class="ss">type</span><span class="p">:</span> <span class="ss">:feature</span> <span class="k">do</span>
</span><span class="line">    <span class="no">Capybara</span><span class="o">.</span><span class="n">current_driver</span> <span class="o">=</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;FF&#39;</span><span class="o">]</span> <span class="o">==</span> <span class="s1">&#39;true&#39;</span> <span class="p">?</span> <span class="no">Capybara</span><span class="o">.</span><span class="n">javascript_driver</span> <span class="p">:</span> <span class="ss">:poltergeist</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The above RSpec helper sets default driver to poltergeist and should ENV variable FF is set, it will
switch to selenium-webdriver.</p>

<p>So to run a feature spec in poltergeist, we do:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">bundle</span> <span class="nb">exec</span> <span class="n">rspec</span> <span class="n">spec</span><span class="o">/</span><span class="n">features</span><span class="o">/</span><span class="n">the_uber_spec</span><span class="o">.</span><span class="n">rb</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and to test with selenium-webdriver, we do:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">FF</span><span class="o">=</span><span class="kp">true</span> <span class="n">bundle</span> <span class="nb">exec</span> <span class="n">rspec</span> <span class="n">spec</span><span class="o">/</span><span class="n">features</span><span class="o">/</span><span class="n">the_uber_spec</span><span class="o">.</span><span class="n">rb</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I also provide a helper method <code>hang</code> which will hang the page. Simply place it to the line
that you want and Firefox browser will open up if selenium is used. Eg:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">scenario</span> <span class="s1">&#39;some uber case&#39;</span> <span class="k">do</span>
</span><span class="line">  <span class="n">click_on</span> <span class="s1">&#39;Sign In&#39;</span>
</span><span class="line">
</span><span class="line">  <span class="n">hang</span>
</span><span class="line">
</span><span class="line">  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>That&#8217;s it for now folks. Credits to Nikolai Nemshilov, my ex-colleague who came up with this brilliant hybrid idea.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Speed up your PostgreSQL dump restore]]></title>
    <link href="http://ruby-journal.com/speed-up-your-postgresql-dump-restore/"/>
    <updated>2014-03-11T16:20:00+11:00</updated>
    <id>http://ruby-journal.com/speed-up-your-postgresql-dump-restore</id>
    <content type="html"><![CDATA[
<p>Restore a DB dump with pg_restore is always a time-consuming process. However if
you are using Postgres 8.4 or newer, you could speed it up easily by having
multiple concurrent process do it for you.</p>

<!--more-->

<p>Version 8.4 introduced the <code>-j</code> or <code>--jobs</code> parameter for the pg_restore.</p>

<p>This speed up the restore process drastically on a multi-cores machine.</p>

<p>Here is how to use it:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">pg_restore [connection-options...] -j &lt;number_of_jobs&gt; [other-options...] [filename]</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Says, you specify <code>-j 4</code>, this tells pg_restore to run 4 jobs. Each job
is one process or one thread depending on the OS and uses a separate
connection to the server.</p>

<p>So what is the optimal number? If you have to work this out by yourself,
a good start is number of core minus 2, and then try to bump the number up
while measuring the time taken to run. If the number is too high, it actually
slow down the process due to thrashing.</p>

<p>FYI, restoring a 500MB dump on 4 core with <code>-j 4</code> takes 6min instead of 17&#8217;.</p>

<p>One more important thing that I should mention is that, this feature only
works with custom and directory archive dump.</p>

<p>That&#8217;s it for today, folks. Keep on learning!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to update attributes with validations and callbacks skipped]]></title>
    <link href="http://ruby-journal.com/rails/how-to-update-attributes-with-validations-and-callbacks-skipped/"/>
    <updated>2014-02-26T18:20:00+11:00</updated>
    <id>http://ruby-journal.com/rails/how-to-update-attributes-with-validations-and-callbacks-skipped</id>
    <content type="html"><![CDATA[
<p>In this short tutorial, I&#8217;ll show you how to update attributes for ActiveRecord model with:</p>

<ul>
  <li>Validations are skipped.</li>
  <li>Callbacks are skipped.</li>
  <li><code>updated_at</code>/<code>updated_on</code> are not updated.</li>
</ul>

<p>Solutions for both Rails 3 and 4 are provided.</p>

<!--more-->

<h2 id="rails-4">Rails 4</h2>

<p>Rails 4 comes with method <code>update_columns</code> which takes in a hash parameter.</p>

<p>Here is one example how to use it:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">user</span><span class="o">.</span><span class="n">update_columns</span><span class="p">(</span><span class="n">last_request_at</span><span class="p">:</span> <span class="no">Time</span><span class="o">.</span><span class="n">current</span><span class="p">,</span> <span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;Trung Le&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>At the background, one SQL UPDATE is run and will update both two attributes.</p>

<h2 id="rails-3">Rails 3</h2>

<p>Rails 3 does not have <code>update_columns</code> method, however there is <code>update_column</code> method, so we could loop through the parameters like below:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="p">{</span> <span class="n">last_request_at</span><span class="p">:</span> <span class="no">Time</span><span class="o">.</span><span class="n">current</span><span class="p">,</span> <span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;Trung Le&#39;</span> <span class="p">}</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="o">|</span>
</span><span class="line">  <span class="n">user</span><span class="o">.</span><span class="n">update_column</span><span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>However this solution sucks because there are 2 SQL UPDATE queries involved!</p>

<p>There is a work-around by using <code>update_all</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">User</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="nb">id</span><span class="p">:</span> <span class="n">user</span><span class="o">.</span><span class="n">id</span><span class="p">)</span><span class="o">.</span><span class="n">update_all</span><span class="p">(</span><span class="n">last_request_at</span><span class="p">:</span> <span class="no">Time</span><span class="o">.</span><span class="n">current</span><span class="p">,</span> <span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;Trung Le&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Which only generate only 1 SQL UPDATE query.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Graceful fallback for not found ActiveRecord lookup with NullObject pattern]]></title>
    <link href="http://ruby-journal.com/graceful-fallback-for-not-found-activerecord-lookup-with-nullobject-pattern/"/>
    <updated>2013-11-23T23:27:00+11:00</updated>
    <id>http://ruby-journal.com/graceful-fallback-for-not-found-activerecord-lookup-with-nullobject-pattern</id>
    <content type="html"><![CDATA[
<p>In my application, I bump to Exception when trying to delegate a method to an unfound ActiveRecord instance. This poses two issues for me:</p>

<ul>
  <li>Hard to write test for you have to set up fixture/factory correctly</li>
  <li>Not a good user experience to see error on production</li>
</ul>

<p>I tackle this with NullObject pattern to provide a graceful fallback.</p>

<!--more-->

<p>Firstly, let me show you my code:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Employee</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class="line">  <span class="c1"># in schema, each employee has a unique email column as :string type</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">employee_of_the_month?</span>
</span><span class="line">    <span class="c1"># yeah, code to determine</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">EmployeeLookupService</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">find_employee_by_email</span><span class="p">(</span><span class="n">email</span><span class="p">)</span>
</span><span class="line">    <span class="no">Employee</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">email</span><span class="p">:</span> <span class="n">email</span><span class="p">)</span><span class="o">.</span><span class="n">first</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">ReportService</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">generate_for_email</span><span class="p">(</span><span class="n">email</span><span class="p">)</span>
</span><span class="line">    <span class="n">employee</span> <span class="o">=</span> <span class="no">EmployeeLookupService</span><span class="o">.</span><span class="n">find_employee_by_email</span><span class="p">(</span><span class="n">email</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="n">employee</span><span class="o">.</span><span class="n">employee_of_the_month?</span>
</span><span class="line">      <span class="c1"># do something</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I have a Report which generates report for an employee with matching email. As you can in the above
code, if the employee could be be found by email, <code>EmployeeLookupService.find_employee_by_email</code> would yield a <code>nil</code> and calling <code>employee_of_the_month?</code> on <code>nil</code> would raise exception. So how could we make sure that our code could handle this exception gracefully?</p>

<h2 id="bad-way">Bad way</h2>

<p>Well, there is one quick bad way, that is to add a addtional presence check for employee, so:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">ReportService</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">generate_for_email</span><span class="p">(</span><span class="n">email</span><span class="p">)</span>
</span><span class="line">    <span class="n">employee</span> <span class="o">=</span> <span class="no">EmployeeLookupService</span><span class="o">.</span><span class="n">find_employee_by_email</span><span class="p">(</span><span class="n">email</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="n">employee</span> <span class="o">&amp;&amp;</span> <span class="n">employee</span><span class="o">.</span><span class="n">employee_of_the_month?</span>
</span><span class="line">      <span class="c1"># do something</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>As you can see, I add <code>if employee</code> clause to ensure the presence of employee. What&#8217;s wrong with this way? I find many Rails developers code this way, but to me it is not good enough. In term of OO design, I expect <code>EmployeeLookupService.find_employee_by_email</code> returns me an object which responds to <code>employee_of_the_month?</code> consistently instead of returning me a <code>nil</code>. Furthermore, it is not the responsibiltiy of <code>ReportService</code> to do presence checkup.</p>

<h2 id="good-way">Good way</h2>

<p>Here is how I refactor the code, I use NullObject pattern to create a new class, called <code>NullEmployee</code> and ensure that this class has the same interface as <code>Employee</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">NullEmployee</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">email</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@email</span> <span class="o">=</span> <span class="n">email</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">employee_of_the_month?</span>
</span><span class="line">    <span class="kp">nil</span>
</span><span class="line">  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and I also refactor my lookup code:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">EmployeeLookupService</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">find_employee_by_email</span><span class="p">(</span><span class="n">email</span><span class="p">)</span>
</span><span class="line">    <span class="no">Employee</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">email</span><span class="p">:</span> <span class="n">email</span><span class="p">)</span><span class="o">.</span><span class="n">first</span> <span class="o">||</span> <span class="no">NullEmployee</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">email</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Let&#8217;s digest what I did above, I make <code>EmployeeLookupService.find_employee_by_email</code> to create a new instance of <code>NullEmployee</code> class if not found and this <code>NullEmployee#employee_of_the_month?</code> always return <code>nil</code>. Now we do have a consistency in returned employee object. And testing it would be much more pleasant, we do not have to care about setting up this employee fixture correctly, we could simply stub <code>employee_of_the_month?</code> which makes testing faster and reduces coupling.</p>

<p>Now, there is one caveat with this NullObject patter and ActiveRecord, what if we call an ActiveRecord API on this NullEmployee instance. Well, we could add all ActiveRecord API into our class and return nil, right? No, I must be kidding in saying that. There are hundreds of them, our class would look messy. The elegant solution is provide graceful fallback for missing methods by implement <code>method_missing</code> call. Here is the code:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">NullEmployee</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># whatever there before</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">method_missing</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class="line">    <span class="kp">nil</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now calling a missing method won&#8217;t yield any exception.</p>

<p>That&#8217;s it folks. I hope you enjoy it and please never keep learning and remembering these thumb rules:</p>

<ul>
  <li>Single Reponsibility</li>
  <li>Interface Consistency</li>
  <li>Never mix persisence layer with business logic layer</li>
  <li>If hard to write test, your code might be wrong</li>
</ul>

<p>See you in the next article. Peace!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Avoid unless syntax in a chain of conditions statement]]></title>
    <link href="http://ruby-journal.com/avoid-unless-method-in-a-chain-of-conditions-statement/"/>
    <updated>2013-11-23T23:11:00+11:00</updated>
    <id>http://ruby-journal.com/avoid-unless-method-in-a-chain-of-conditions-statement</id>
    <content type="html"><![CDATA[
<p>Ruby gives us a nice human friendly <code>unless</code> which is equivalent to negation of <code>if</code>. Yet if we abuse using this method in a long complex statements, it could add more confusion for normal readers. In this article, I&#8217;ll give you one example to prove that you should not use <code>unless</code> in a chain of conditions statement.</p>

<!--more-->

<p>I have been using <code>unless</code> for a long time and to my surprise using this method in a chain of conditions is confusing for human brain as many of my colleagues misinterpret the code all the time. Here is one example:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">unless</span> <span class="vi">@employee</span><span class="o">.</span><span class="n">on_annual_leave?</span> <span class="o">||</span> <span class="vi">@employee</span><span class="o">.</span><span class="n">on_parental_leave?</span>
</span><span class="line">  <span class="nb">puts</span> <span class="s2">&quot;You have no leave yet!&quot;</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Majority of normal human would read it as &#8220;if employee is not on annual leave or employee is on parental leave&#8221;. Which is completely wrong, this ambiguous code is supposed to read &#8220;if employee is <em>not</em> annual leave and employee is <em>not</em> on parental leave&#8221;. And for a complex piece of code, misreading this condition could yield detrimental issues. So I&#8217;d suggest not to use <code>unless</code> and instead to use <code>if !condition</code>. Let&#8217;s refactor our code:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">if</span> <span class="o">!</span><span class="vi">@employee</span><span class="o">.</span><span class="n">on_annual_leave?</span> <span class="o">||</span> <span class="o">!</span><span class="vi">@employee</span><span class="o">.</span><span class="n">on_parental_leave?</span>
</span><span class="line">  <span class="nb">puts</span> <span class="s2">&quot;You have no leave yet!&quot;</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This code would always read as &#8220;if employee is not on annual leave or employee is not on parental leave&#8221;, which is precise to the context. So be wise before using <code>unless</code>, in cases negation with <code>if</code> is much more concise.</p>

<p>I hope you enjoy this short article, and please leave comments if you like it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Digesting pumactl]]></title>
    <link href="http://ruby-journal.com/digesting-pumactl/"/>
    <updated>2013-11-22T16:39:00+11:00</updated>
    <id>http://ruby-journal.com/digesting-pumactl</id>
    <content type="html"><![CDATA[
<p>Puma is multi-threaded web server which is implemented in Ruby and has become a popular choice
for many production servers in the world. Given its short time of development, you&#8217;ll likely
to see issues. One of the issue that I and many people often bump into is processes management.
By default, puma offers <code>pumactl</code>, yet this utitlity hasn&#8217;t lived up to expectation (this is a year
ago), thus people seeks different approaches with custom bash script by calling <code>puma</code> directly,
upstart, monit, etc. However, today when I revisit <code>pumactl</code>, this tool has been polished and
now does exactly what it promises. In this short article, I&#8217;ll go through with you how to use
<code>pumactl</code> to manage your puma processes.</p>

<!--more-->

<h2 id="anatomy-of-puma-processes">Anatomy of puma processes</h2>

<p>Like any other UNIX web server, puma is run as daemon, spawning child processes (in puma term,
they called in puma cluster worker) to handle requests from the outside world.</p>

<p>For example:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ ps aux | grep puma
</span><span class="line">1000      2527  0.0  0.2  80824 20312 ?        Sl   Nov21   0:02 puma -C config/puma.rb
</span><span class="line">1000      2530  0.0  2.2 870928 184180 ?       Sl   Nov21   0:33 puma: cluster worker: 2527
</span><span class="line">1000      2533  0.0  2.3 870868 188284 ?       Sl   Nov21   0:32 puma: cluster worker: 2527</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You can see above that process with PID 2527 is our mother process which spawn two children.
Both children with PID 2530 and 2533 respectively clearly states that its mother is PID 2527.</p>

<p>Next, we are going to look into how to manage puma process manually.</p>

<h3 id="stop-puma-process">Stop puma process</h3>

<p>To stop this process, we send a SIGTERM signal to PID 2557</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ kill -s SIGTERM 2557</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And we could check if the process has been cleanly killed with:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ ps aux | grep puma | grep 2557
</span><span class="line"># yields no results</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="hard-restart-puma-process">Hard restart puma process</h3>

<p>To restart this process, we send a SIGUSR2 signal to PID 2557.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ kill -s SIGUSR 2557</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Please note, this action is equivalent to killing the mother process and start a new one. Avoid this thing in production environment at all cost. Because we do not want downtime.</p>

<p>Checking the ps yields:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ ps aux | grep puma
</span><span class="line">1000      3001  0.0  0.2  80824 20312 ?        Sl   Nov21   0:02 puma -C config/puma.rb
</span><span class="line">1000      3010  0.0  2.2 880321 184180 ?       Sl   Nov21   0:33 puma: cluster worker: 3001
</span><span class="line">1000      3020  0.0  2.3 700828 188284 ?       Sl   Nov21   0:32 puma: cluster worker: 3001</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The output shows that our PID 2557 is killed and a new PID 3001 is created.</p>

<h3 id="graceful-restart-puma-process">Graceful restart puma process</h3>

<p>In order to achieve zero downtime, we only kill these 2 children and respawn
with 2 new one instead of killing the mother process. In puma term, they call it <code>phased-restart</code>,
that is sending SIGUSR1 signal to PID 2557.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ kill -S SIGUSR1 2557</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Let verify the result:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ ps aux | grep puma
</span><span class="line">1000      2527  0.0  0.2  80824 20312 ?        Sl   Nov21   0:02 puma -C config/puma.rb
</span><span class="line">1000      3001  0.0  2.2 870928 184180 ?       Sl   Nov21   0:33 puma: cluster worker: 2527
</span><span class="line">1000      3002  0.0  2.3 870868 188284 ?       Sl   Nov21   0:32 puma: cluster worker: 2527</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The 2 children are killed and two new spawn children appears. Just what we expect.</p>

<h3 id="checking-status-of-puma-process">Checking status of puma process</h3>

<p>In order to check process, you have to start puma with <code>-S</code> parameter, this points to a state
file which stores all statuses of our puma process. Example:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ puma -S /var/run/app.state</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now you could hook this file into any monitoring tools. I find this state file idea not helpful
as many of us relies on other system to manage status such as monit or god.</p>

<h2 id="introduction-to-pumactl">Introduction to pumactl</h2>

<p>As we can see that above operations can be tedious and error prone and definitely not fun to work
with a big deployment scale. Introducing pumactl, this utility automates all of above tasks. Let&#8217;s
see how we could reproduce all above steps</p>

<h3 id="start-puma-process">Start puma process</h3>

<p>We setup a config file that asks puma to store its PID in a pid file and run in daemon mode. We&#8217;ll
carry out a test on an Rails app. Create <code>config/puma.rb</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">environment ENV['RAILS_ENV'] || 'production'
</span><span class="line">daemonize
</span><span class="line">
</span><span class="line">workers    2 # should be same number of your CPU core
</span><span class="line">threads    1, 6
</span><span class="line">
</span><span class="line">pidfile    "/var/run/puma_app1.pid"</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>We now can start puma with:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ bundle exec pumactl -F config/puma.rb start</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Verify with:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ ps aux | grep puma
</span><span class="line">1000      2527  0.0  0.2  80824 20312 ?        Sl   Nov21   0:02 puma -C config/puma.rb
</span><span class="line">1000      2530  0.0  2.2 870928 184180 ?       Sl   Nov21   0:33 puma: cluster worker: 2527
</span><span class="line">1000      2533  0.0  2.3 870868 188284 ?       Sl   Nov21   0:32 puma: cluster worker: 2527</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>we can see above that pumactl will start our server with <code>puma -C config/puma.rb</code>. Sweet. Next
we check to see if pid file store correct PID:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ cat /var/run/puma_app1.pid
</span><span class="line">2527</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Just as expected.</p>

<h3 id="stop-puma-process-1">Stop puma process</h3>

<p>Simply with:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ bundle exec pumactl -F config/puma.rb stop</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>There is no output yielded with</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ ps aux | grep puma | grep 2557</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>indicates that the process is cleanly killed</p>

<h3 id="hard-restart-puma-process-1">Hard restart puma process</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ bundle exec pumactl -F config/puma.rb restart</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ ps aux | grep puma
</span><span class="line">1000      3001  0.0  0.2  80824 20312 ?        Sl   Nov21   0:02 puma -C config/puma.rb
</span><span class="line">1000      3010  0.0  2.2 880321 184180 ?       Sl   Nov21   0:33 puma: cluster worker: 3001
</span><span class="line">1000      3020  0.0  2.3 700828 188284 ?       Sl   Nov21   0:32 puma: cluster worker: 3001</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The output shows that 2557 is killed and new PID 3001 is created. We could check to see if
our pid file is updated with 3001:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ cat /var/run/puma_app1.pid
</span><span class="line">3001</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Magic! It&#8217;s working!</p>

<h3 id="graceful-restart-puma-process-1">Graceful restart puma process</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ bundle exec pumactl -F config/puma.rb phased-restart</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and check again:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ ps aux | grep puma
</span><span class="line">1000      2527  0.0  0.2  80824 20312 ?        Sl   Nov21   0:02 puma -C config/puma.rb
</span><span class="line">1000      3001  0.0  2.2 870928 184180 ?       Sl   Nov21   0:33 puma: cluster worker: 2527
</span><span class="line">1000      3002  0.0  2.3 870868 188284 ?       Sl   Nov21   0:32 puma: cluster worker: 2527</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>PID 2527 is still there and only its children are respawned. Perfect!</p>

<h3 id="checking-status-of-puma-process-1">Checking status of puma process</h3>

<p>Now we do not need other tool to tell if our PID is running, we could do with one command:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ bundle exec pumactl -F config/puma.rb status</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>if PID is running we would get output:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">PID 2557 is running</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>else</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">No puma process</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="conclusion">Conclusion</h2>

<p>That&#8217;s it folk. Now you know how to use pumactl, why don&#8217;t you delete your custom script and replace
it with pumactl. See you in the next article.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to import millions records via ActiveRecord within minutes not hours]]></title>
    <link href="http://ruby-journal.com/how-to-import-millions-records-via-activerecord-within-minutes-not-hours/"/>
    <updated>2013-10-30T17:23:00+11:00</updated>
    <id>http://ruby-journal.com/how-to-import-millions-records-via-activerecord-within-minutes-not-hours</id>
    <content type="html"><![CDATA[
<p>In today tutorial, I&#8217;ll show you how to optimise a ActiveRecord import script by 300%. My solution is better than other solution as it doesn&#8217;t use any SQL hack, thus you can retain the integrity with the data by running it through ActiveRecord normally.</p>

<!--more-->

<p>At work, I am assigned a task to import millions rows of records from a 300MB CSV file into Rails app. The rake task takes in FILE and process it with ActiveRecord.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">FILE=/tmp/big_file.csv rake data:import</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And the rake task would call my <code>ProductsImporter.run</code> method, summarised below:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">ProductsImporter</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">run</span>
</span><span class="line">    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class="line">    <span class="c1"># read the CSV files and assigns rows to variable rows</span>
</span><span class="line">
</span><span class="line">    <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span><span class="o">.</span><span class="n">transaction</span> <span class="k">do</span>
</span><span class="line">      <span class="n">rows</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">row</span><span class="o">|</span>
</span><span class="line">        <span class="nb">p</span> <span class="o">=</span> <span class="no">Product</span><span class="o">.</span><span class="n">find_or_initialize_by_product_id</span><span class="p">(</span><span class="n">row</span><span class="o">[</span><span class="ss">:product_id</span><span class="o">]</span><span class="p">)</span>
</span><span class="line">        <span class="nb">p</span><span class="o">.</span><span class="n">assign_attributes</span><span class="p">(</span><span class="n">row</span><span class="p">)</span>
</span><span class="line">        <span class="nb">p</span><span class="o">.</span><span class="n">save!</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And soon I bumped into performance issue because ActiveRecord::Transaction could not release garbage effectively. The script tooks <em>~2hrs</em> to complete. This is unacceptable to my standard.</p>

<p>There are various workarounds on the net such as using <code>ar_import</code> gem which uses SQL INSERT. However I do not like these SQL solutions as there are so many callbacks with my models and data integrity is very important. So I come up with an alternative solution:</p>

<ul>
  <li>Split the big_file.csv into smaller files</li>
  <li>Loop through these smaller chunks and recursively run rake task on each</li>
</ul>

<p>So now you wonder how the above solution works better. It is because now we run many small processes in which Rails won&#8217;t have to deal much with big GC. Once a process is completed, memory will be instantly released. Now, let&#8217;s code this up using shell script, I chose bash as example (please adapt to fit your purpose):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c">#! /bin/bash</span>
</span><span class="line">
</span><span class="line"><span class="nv">NUMBER_OF_SPLIT_LINES</span><span class="o">=</span>50000
</span><span class="line"><span class="nv">SPLIT_FILE_PREFIX</span><span class="o">=</span><span class="s1">&#39;small_&#39;</span>
</span><span class="line"><span class="nv">BIG_FILE_PATH</span><span class="o">=</span>/tmp/big_file.csv
</span><span class="line"><span class="nv">SPLIT_FILES</span><span class="o">=</span>/tmp/<span class="nv">$SPLIT_FILE_PREFIX</span>*
</span><span class="line">
</span><span class="line">temp_home <span class="o">()</span> <span class="o">{</span>
</span><span class="line">  <span class="nb">cd</span> /tmp
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line">rails_app_home <span class="o">()</span> <span class="o">{</span>
</span><span class="line">  <span class="nb">cd</span> /your_app
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line">split_big_csv_into_small_chunks <span class="o">()</span> <span class="o">{</span>
</span><span class="line">  <span class="nb">echo</span> <span class="s2">&quot;Split $BIG_FILE_PATH file into small chunks with size $NUMBER_OF_SPLIT_LINES lines...&quot;</span>
</span><span class="line">  temp_home <span class="o">&amp;&amp;</span> split -l <span class="nv">$NUMBER_OF_SPLIT_LINES</span> <span class="nv">$BIG_FILE_PATH</span> <span class="nv">$SPLIT_FILE_PREFIX</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line">process_split_files <span class="o">()</span> <span class="o">{</span>
</span><span class="line">  <span class="k">for </span>f in <span class="nv">$SPLIT_FILES</span>
</span><span class="line">  <span class="k">do</span>
</span><span class="line"><span class="k">    </span><span class="nb">echo</span> <span class="s2">&quot;Processing $f file...&quot;</span>
</span><span class="line">    rails_app_home <span class="o">&amp;&amp;</span> <span class="nv">FILE</span><span class="o">=</span><span class="nv">$f</span> nohup rake data:import &amp;
</span><span class="line">  <span class="k">done</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line">split_big_csv_into_small_chunks
</span><span class="line">process_split_files
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Let&#8217;s go through the above script. I use <code>split</code> UNIX command to split the big file into many smaller files, each with 50000 lines. Then I loop through these small files and parse it to rake task to run. I utilise <code>nohup</code> to make sure my script is not killed by SIGHUP (in my case, I run this script on remote host via SSH). Be noted that, I run each process in the background.</p>

<p>If you want a better performant version of <code>split</code>, I highly recommend you give <code>csv_split</code> a try, please download it at https://github.com/PerformanceHorizonGroup/csv-split.</p>

<p>Now, how many minutes you think our bash script would take to finish? It is <em>3 mintutes</em> - no kidding! This is a massive gain compared to 2hrs.</p>

<p>Ruby/Rails are not the best for dealing with huge chunk of memory. So before deciding to try some SQL way, you can be pragmatic and abuse UNIX by spawning as many processes as your computer can handle and you&#8217;ll be surprised on how much gain you would achieve. Good luck!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Faster TravisCI test]]></title>
    <link href="http://ruby-journal.com/faster-travisci-test/"/>
    <updated>2013-10-11T12:37:00+11:00</updated>
    <id>http://ruby-journal.com/faster-travisci-test</id>
    <content type="html"><![CDATA[
<p>Running test suite is time consuming. There are various techniques to optimize the runtime performance of the CI by stub/mock, parallel_test, etc. In this short tutorial, I&#8217;ll show you how to optimize your TravisCI test suite by splitting your test suit into concurrent jobs, which drastically improve the build time.</p>

<!--more-->

<p>I have a Rails app with rspec. Here are specs that are run sequentially:</p>

<ul>
  <li>models</li>
  <li>controllers</li>
  <li>helpers</li>
  <li>routing</li>
  <li>views</li>
  <li>features</li>
</ul>

<p>Running specs sequentially is slow. Travis can break these specs into concurrent jobs for you. You need to modify your <code>.travis.yml</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class=""><span class="line">language: ruby
</span><span class="line">rvm:
</span><span class="line">  - 2.0.0
</span><span class="line">bundler_args: --without development production --quiet
</span><span class="line">env:
</span><span class="line">  - TEST_SUITE=features
</span><span class="line">  - TEST_SUITE=controllers
</span><span class="line">  - TEST_SUITE=helpers
</span><span class="line">  - TEST_SUITE=models
</span><span class="line">  - TEST_SUITE=routing
</span><span class="line">  - TEST_SUITE=views
</span><span class="line">script:
</span><span class="line">  - bundle exec rspec spec/$TEST_SUITE/*</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>As you can see in the above YAML file, we set <code>$TEST_SUITE</code> env variable with the name of our spec folders. This variable will get substitute into <code>bundle exec rspec spec/$TEST_SUITE/*</code> call.</p>

<p>Once you push new change to your GitHub, TravisCI now run 6 concurrent jobs at the same time. My build before take 45mins, now reduce to 18mins. That&#8217;s a great improvement. Please be noted that, please upgrade to 10 concurrent build plan if you are using Travis Pro service.</p>

<p>Furthmore, you could cut at least 3 more mins by enabling the experimental bundler caching (which is only available for Travis Pro plan now). Append to your <code>.travis.yml</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">cache: bundler</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Travis will cache your bundler and next build will not waste their time with bundler install anymore which save time.</p>

<p>By using <code>env</code> and <code>cache</code> option, you could reduce the build time by at least 60%. You could push further by breaking your slow specs and group them together and have them run separately too. Or you could introduce parallel_test gem into your app, this would save you at least 30% more. I hope you enjoy the tutorial and see you next time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to uninstall all Ruby gems]]></title>
    <link href="http://ruby-journal.com/how-to-uninstall-all-ruby-gems/"/>
    <updated>2013-10-11T12:01:00+11:00</updated>
    <id>http://ruby-journal.com/how-to-uninstall-all-ruby-gems</id>
    <content type="html"><![CDATA[
<p>In order to uninstall all gems, you have to loop through all entries in <code>gem list</code> with bash scripting. This method is very inconveninent. Thanks to Rubygems 2.1.0, you now could do it with one command.</p>

<!--more-->

<p>Firstly, please make sure you upgrade your Rubygems to 2.1.0 or newer:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">gem</span> <span class="n">update</span> <span class="o">--</span><span class="nb">system</span>
</span><span class="line"><span class="n">gem</span> <span class="o">--</span><span class="n">version</span>
</span><span class="line"><span class="c1"># 2.1.8</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and in order to uninstall all gems:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">gem</span> <span class="n">uninstall</span> <span class="o">--</span><span class="n">all</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>That&#8217;s it folks!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Becareful with space in lambda rocket syntax between Ruby 1.9 and 2.0]]></title>
    <link href="http://ruby-journal.com/becareful-with-space-in-lambda-hash-rocket-syntax-between-ruby-1-dot-9-and-2-dot-0/"/>
    <updated>2013-10-03T19:45:00+10:00</updated>
    <id>http://ruby-journal.com/becareful-with-space-in-lambda-hash-rocket-syntax-between-ruby-1-dot-9-and-2-dot-0</id>
    <content type="html"><![CDATA[
<p>Majority of Ruby 2.0 syntaxes are backward-compatible with Ruby 1.9. Yet there is one tiny change in the way that Ruby 2.0 does lambda rocket that would break backward-compatability with Ruby 1.9. That is&#8230;a single space. Yes, you heard it correctly.</p>

<!--more-->

<p>So, in Ruby 2.0, you could declare shorthand <code>lambda</code> with <code>-&gt;</code>. Here is example:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">hello_world</span> <span class="o">=</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="n">message</span><span class="p">)</span> <span class="p">{</span> <span class="nb">puts</span> <span class="n">message</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The above code runs fine under 2.0 yet failed spectacularly with 1.9:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="ss">SyntaxError</span><span class="p">:</span> <span class="p">(</span><span class="n">irb</span><span class="p">):</span><span class="mi">1</span><span class="p">:</span> <span class="n">syntax</span> <span class="n">error</span><span class="p">,</span> <span class="n">unexpected</span> <span class="n">tLPAREN_ARG</span><span class="p">,</span> <span class="n">expecting</span> <span class="n">keyword_do_LAMBDA</span> <span class="ow">or</span> <span class="n">tLAMBEG</span>
</span><span class="line"><span class="n">hello_world</span> <span class="o">=</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="n">message</span><span class="p">)</span> <span class="p">{</span> <span class="nb">puts</span> <span class="n">message</span> <span class="p">}</span>
</span><span class="line">                  <span class="o">^</span>
</span><span class="line"><span class="p">(</span><span class="n">irb</span><span class="p">):</span><span class="mi">1</span><span class="p">:</span> <span class="n">syntax</span> <span class="n">error</span><span class="p">,</span> <span class="n">unexpected</span> <span class="n">tLAMBEG</span><span class="p">,</span> <span class="n">expecting</span> <span class="vg">$end</span>
</span><span class="line"><span class="n">hello_world</span> <span class="o">=</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="n">message</span><span class="p">)</span> <span class="p">{</span> <span class="nb">puts</span> <span class="n">message</span> <span class="p">}</span>
</span><span class="line">                            <span class="o">^</span>
</span><span class="line">  <span class="n">from</span> <span class="sr">/Users/</span><span class="n">trung_le</span><span class="o">/.</span><span class="n">rubies</span><span class="o">/</span><span class="n">ruby</span><span class="o">-</span><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="o">-</span><span class="n">p448</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="ss">irb</span><span class="p">:</span><span class="mi">12</span><span class="ss">:in</span> <span class="sb">`&lt;main&gt;&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In order to fix this issue, we have to rid of the space between <code>-&gt;</code> and <code>(message)</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">hello_world</span> <span class="o">=</span> <span class="o">-&gt;</span><span class="p">(</span><span class="n">message</span><span class="p">)</span> <span class="p">{</span> <span class="nb">puts</span> <span class="n">message</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Weird, isn&#8217;t it? At least you are aware of this discrepancy now.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 4 changes habtm join table naming convention]]></title>
    <link href="http://ruby-journal.com/rails-4-changes-join-table-naming-convention/"/>
    <updated>2013-10-03T18:55:00+10:00</updated>
    <id>http://ruby-journal.com/rails-4-changes-join-table-naming-convention</id>
    <content type="html"><![CDATA[
<p>When upgrading my app from Rails 3.2.14 to Rails 4, I bumped into an error in which
habtm association complains missing DB join table. To my surprise, Rails 4 has changed the default naming convention for join table.</p>

<!--more-->

<p>Here is the Rails 3 code:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">ContactPlan</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class="line">  <span class="n">has_and_belongs_to_many</span> <span class="ss">:contact_types</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">ContactType</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class="line">  <span class="n">has_and_belongs_to_many</span> <span class="ss">:contact_plans</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">CreateContactPlansContactTypes</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Migration</span>
</span><span class="line">  <span class="n">create_table</span> <span class="ss">:contact_plans_contact_types</span><span class="p">,</span> <span class="nb">id</span><span class="p">:</span> <span class="kp">false</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class="line">    <span class="n">t</span><span class="o">.</span><span class="n">integer</span> <span class="ss">:contact_plan_id</span><span class="p">,</span> <span class="ss">null</span><span class="p">:</span> <span class="kp">false</span>
</span><span class="line">    <span class="n">t</span><span class="o">.</span><span class="n">integer</span> <span class="ss">:contact_type_id</span><span class="p">,</span> <span class="ss">null</span><span class="p">:</span> <span class="kp">false</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>As you can see from above migrarion, my join table naming is <code>contact_plans_contact_types</code>. Yet Rails 4 fails to run the migration and asks for the existence of <code>contact_plans_types</code>. If you are upgrading from Rails 3 app, I highly recommend you avoid renaming this join table. Instead, you should explicitly declare the join table for habtm association:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">ContactPlan</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class="line">  <span class="n">has_and_belongs_to_many</span> <span class="ss">:contact_types</span><span class="p">,</span> <span class="n">join_table</span><span class="p">:</span> <span class="ss">:contact_plans_contact_types</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">ContactType</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class="line">  <span class="n">has_and_belongs_to_many</span> <span class="ss">:contact_plans</span><span class="p">,</span> <span class="n">join_table</span><span class="p">:</span> <span class="ss">:contact_plans_contact_types</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This technique mitigates regressions. And you can always go back to renaming if you feel like after stablising the build.</p>

<p>I can see that Rails 4 try to be smart by detecting duplication in model naming. I welcome this sort of change as it would reduce the complexity in the naming. Furthermore, if you bump into this issue, it is very likely that you should rethink your model naming.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to track changes of a model in a `after_callbacks` in Rails 3 or newer]]></title>
    <link href="http://ruby-journal.com/how-to-track-changes-with-after-callbacks-in-rails-3-or-newer/"/>
    <updated>2013-09-23T16:43:00+10:00</updated>
    <id>http://ruby-journal.com/how-to-track-changes-with-after-callbacks-in-rails-3-or-newer</id>
    <content type="html"><![CDATA[
<p>You can track changes to a ActiveRecord model with <code>ActiveRecord::Dirty#changed?</code>. Yet there is one caveat though, the tracking is lost after the model is saved. In this tutorial I&#8217;ll show how to track the changes to a record even the record has been saved, this comes handy when being used with ActiveRecord <code>after</code> callbacks</p>

<!--more-->

<p>Imagine that we have a <code>Product</code> model with <code>name</code>, we make change to <code>name</code> with:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="vi">@product</span><span class="o">.</span><span class="n">name</span> <span class="c1"># =&gt; &quot;Diamond&quot;</span>
</span><span class="line"><span class="vi">@product</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;Ruby&#39;</span>
</span><span class="line"><span class="vi">@product</span><span class="o">.</span><span class="n">changed?</span> <span class="c1"># =&gt; true</span>
</span><span class="line"><span class="vi">@product</span><span class="o">.</span><span class="n">name_changed?</span> <span class="c1"># =&gt; true</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>By using ActiveRecord::Dirty, we could tell if the model or attribute <code>name</code> is changed.</p>

<p>If we save our model</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="vi">@product</span><span class="o">.</span><span class="n">save</span>
</span><span class="line"><span class="vi">@product</span><span class="o">.</span><span class="n">changed?</span> <span class="c1"># =&gt; false</span>
</span><span class="line"><span class="vi">@product</span><span class="o">.</span><span class="n">name_changed?</span> <span class="c1"># =&gt; false</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The <code>false</code> value indicates that ActiveRecord::Dirty is not persisent after the model is saved. What if now you are being asked to add in a code to notify the inventory system if product name is changed? We can
simply workaround by using <code>around</code> callback. Here is details:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Product</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class="line">  <span class="n">around_update</span> <span class="ss">:notify_systtem_if_name_is_changed</span>
</span><span class="line">
</span><span class="line">  <span class="kp">private</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">notify_systtem_if_name_is_changed</span>
</span><span class="line">    <span class="n">name_changed</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">name_changed?</span>
</span><span class="line">
</span><span class="line">    <span class="k">yield</span>
</span><span class="line">
</span><span class="line">    <span class="n">notify_system</span> <span class="k">if</span> <span class="n">named_changed</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>around</code> callback is introduced in Rails 3. This callback consists of 3 parts:</p>

<ul>
  <li>The part before <code>yield</code> is codes prior to the action is called</li>
  <li>The <code>yield</code> is action that gets called</li>
  <li>The part after <code>yield</code> is codes after the action is called</li>
</ul>

<p>In our example above, we store the changing state of attribute <code>name</code> into <code>named_change</code> variable. The <code>yield</code> executes the <code>update</code> action. The changing state then can be referenced afterward and will send out notification if name is truly changed.</p>

<p>The <code>around</code> callbacks are very powerful features of ActiveRecord. I hope that you should take advantage of it more. See you in the next tutorial.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to write Rails View test with RSpec]]></title>
    <link href="http://ruby-journal.com/how-to-write-rails-view-test-with-rspec/"/>
    <updated>2013-09-16T16:18:00+10:00</updated>
    <id>http://ruby-journal.com/how-to-write-rails-view-test-with-rspec</id>
    <content type="html"><![CDATA[
<p>In this short tutorial, I will show you how to do a View test with Rspec + capybara</p>

<!--more-->

<p>To my surprise that not many people is aware of View test provided by rspec-rails gem. It is partially
because they migrate from default Rails stack testing in which functional test performs both controllers
and views testing.</p>

<p>Testing View is to assert the template contain the piece of expected informations that is parsed from the controllers.</p>

<p>The default Rails stack ships with ActionDispatch::Assertions::SelectorAssertions which consits of method &#8216;assert_select&#8217;
to traverse through our DOM nodes whilst default rspec does not provide any CSS or XPath selector method, the only available
method is <code>contain</code>.</p>

<p>So if we have our view like the example below:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="erb"><span class="line"><span class="x"># app/views/products/show.html.erb</span>
</span><span class="line">
</span><span class="line"><span class="x">&lt;table id=&quot;product_</span><span class="cp">&lt;%=</span> <span class="vi">@product</span><span class="o">.</span><span class="n">id</span> <span class="cp">%&gt;</span><span class="x">&quot;&gt;</span>
</span><span class="line"><span class="x">  &lt;thead&gt;</span>
</span><span class="line"><span class="x">    &lt;tr&gt;</span>
</span><span class="line"><span class="x">      &lt;th&gt;Name&lt;/th&gt;</span>
</span><span class="line"><span class="x">      &lt;th&gt;Price&lt;/th&gt;</span>
</span><span class="line"><span class="x">    &lt;/tr&gt;</span>
</span><span class="line"><span class="x">  &lt;/thead&gt;</span>
</span><span class="line"><span class="x">  &lt;tbody&gt;</span>
</span><span class="line"><span class="x">    &lt;tr&gt;</span>
</span><span class="line"><span class="x">      &lt;td&gt;</span><span class="cp">&lt;%=</span> <span class="vi">@product</span><span class="o">.</span><span class="n">name</span> <span class="cp">%&gt;</span><span class="x">&lt;/td&gt;</span>
</span><span class="line"><span class="x">      &lt;td&gt;</span><span class="cp">&lt;%=</span> <span class="vi">@product</span><span class="o">.</span><span class="n">price</span> <span class="cp">%&gt;</span><span class="x">&lt;/td&gt;</span>
</span><span class="line"><span class="x">    &lt;/tr&gt;</span>
</span><span class="line"><span class="x">  &lt;/tbody&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>we could write our spec:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># spec/views/products/show.html.erb_spec.rb</span>
</span><span class="line">
</span><span class="line"><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">describe</span> <span class="s1">&#39;products/show.html.erb&#39;</span> <span class="k">do</span>
</span><span class="line">  <span class="n">it</span> <span class="s1">&#39;displays product details correctly&#39;</span> <span class="k">do</span>
</span><span class="line">    <span class="n">assign</span><span class="p">(</span><span class="ss">:product</span><span class="p">,</span> <span class="no">Product</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;Shirt&#39;</span><span class="p">,</span> <span class="ss">price</span><span class="p">:</span> <span class="mi">50</span><span class="o">.</span><span class="mi">0</span><span class="p">))</span>
</span><span class="line">
</span><span class="line">    <span class="n">render</span>
</span><span class="line">
</span><span class="line">    <span class="n">rendered</span><span class="o">.</span><span class="n">should</span> <span class="n">contain</span><span class="p">(</span><span class="s1">&#39;Shirt&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="n">rendered</span><span class="o">.</span><span class="n">should</span> <span class="n">contain</span><span class="p">(</span><span class="s1">&#39;50.0&#39;</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>the View spec is not associated with controller, thus we have to assign the @product into
<code>products/show.html.erb</code> template with method <code>#assign</code>. The <code>#render</code> method is the same
as <code>ActionView#render</code>. Lastly, the <code>#rendered</code> returns the HTML response, of which assertions
can be performed upon.</p>

<p>The <code>contain</code> matcher is not suffice to perform explicit check on DOM level. Therefore I
use capybara. Some might prefer webrat. Please ensure you install capybara with Gemfile
and add this line into your <code>spec/spec_helper.rb</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># spec/spec_helper.rb</span>
</span><span class="line">
</span><span class="line"><span class="nb">require</span> <span class="s1">&#39;capybara/rspec&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>that inject all rspec matchers that capybara provides, in which we are interested in <code>#has_selector</code> matcher.</p>

<p>and the above spec can be refactored to:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># spec/views/products/show.html.erb_spec.rb</span>
</span><span class="line">
</span><span class="line"><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">describe</span> <span class="s1">&#39;products/show.html.erb&#39;</span> <span class="k">do</span>
</span><span class="line">  <span class="n">it</span> <span class="s1">&#39;displays product details correctly&#39;</span> <span class="k">do</span>
</span><span class="line">    <span class="n">assign</span><span class="p">(</span><span class="ss">:product</span><span class="p">,</span> <span class="no">Product</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;Shirt&#39;</span><span class="p">,</span> <span class="ss">price</span><span class="p">:</span> <span class="mi">50</span><span class="o">.</span><span class="mi">0</span><span class="p">))</span>
</span><span class="line">
</span><span class="line">    <span class="n">render</span>
</span><span class="line">
</span><span class="line">    <span class="n">rendered</span><span class="o">.</span><span class="n">should</span> <span class="n">have_selector</span><span class="p">(</span><span class="s2">&quot;table#product_</span><span class="si">#{</span><span class="vi">@product</span><span class="o">.</span><span class="n">id</span><span class="si">}</span><span class="s2"> tbody tr:nth-of-type(1) td:nth-of-type(1)&quot;</span><span class="p">,</span> <span class="ss">text</span><span class="p">:</span> <span class="s1">&#39;Shirt&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="n">rendered</span><span class="o">.</span><span class="n">should</span> <span class="n">have_selector</span><span class="p">(</span><span class="s2">&quot;table#product_</span><span class="si">#{</span><span class="vi">@product</span><span class="o">.</span><span class="n">id</span><span class="si">}</span><span class="s2"> tbody tr:nth-of-type(1) td:nth-of-type(2)&quot;</span><span class="p">,</span> <span class="ss">text</span><span class="p">:</span> <span class="s1">&#39;50.0&#39;</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The <code>#has_selector</code> accept CSS and XPath rule and comes with many userful options, it fills in the gap of ActionDispatch::Assertions::SelectorAssertions.</p>

<p>I hope you like this short tutorial, comments are welcome.</p>
]]></content>
  </entry>
  
</feed>
