<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ruby Journal]]></title>
  <link href="http://ruby-journal.com/atom.xml" rel="self"/>
  <link href="http://ruby-journal.com/"/>
  <updated>2013-04-13T10:29:29+10:00</updated>
  <id>http://ruby-journal.com/</id>
  <author>
    <name><![CDATA[Trung LÃª]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to install Ruby 2.0 on OSX 10.7 or newer]]></title>
    <link href="http://ruby-journal.com/how-to-install-ruby-2-dot-0-on-osx-10-dot-7-or-newer/"/>
    <updated>2013-03-16T17:58:00+11:00</updated>
    <id>http://ruby-journal.com/how-to-install-ruby-2-dot-0-on-osx-10-dot-7-or-newer</id>
    <content type="html"><![CDATA[
<p>This short tutorial, I will show you how to install Ruby 2.0.0 on OSX 10.7+ or newer</p>

<!--more-->

<h2 id="rvm">RVM:</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">rvm get stable &amp;&amp; rvm reload</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Firstly, the OpenSSL comes with your OSX 10.7+ is outdated, you need to get latest version</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">rvm pkg install openssl</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Secondly, the readline library on OSX 10.7+ suffers UTF-8 issue in which method in UTF-8 is converted to characters under <code>irb</code>, the 
fix is to use latest version</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">rvm pkg install readline</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And you can install Ruby 2.0.0-p0 with:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">rvm reinstall 2.0.0 --with-readline-dir=$rvm_path/usr --with-openssl-dir=$rvm_path/usr</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Please note that <code>clang-425.0.24</code> that comes with Xcode successfully compile the source, should you bump into any compilation issue, you could try compiling it with <code>gcc-422</code></p>

<h2 id="rbenv">rbenv</h2>

<p>Make sure your <code>ruby-build</code> is up-to-date:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">cd ~/.rbenv/plugins/ruby-build &amp;&amp; git pull</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>rbenv does not fetch fixed readline lib, thus you are required to install them manually with <code>brew</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">brew update
</span><span class="line">brew install readline openssl
</span><span class="line">env CONFIGURE_OPTS=--with-readline-dir=`brew --prefix readline` rbenv install 2.0.0-p0</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to block old IE version with Rails]]></title>
    <link href="http://ruby-journal.com/how-to-block-old-ie-version-with-rails/"/>
    <updated>2013-03-16T17:56:00+11:00</updated>
    <id>http://ruby-journal.com/how-to-block-old-ie-version-with-rails</id>
    <content type="html"><![CDATA[
<p>There are many ways to detect browser agent, it could be front-end side with Javascript or backend.
In this short tutorial, I&#8217;ll walk you through on how to detect browser version with Ruby On Rails</p>

<p>This applies for Rails &gt; 2.x</p>

<!--more-->

<h2 id="how-does-thing-work">How does thing work?</h2>

<p>When you surf the site, your browser name and versions are stored in <code>HTTP_USER_AGENT</code> in the request. We need to process this string to work out the browser version and name to decide to greet viewers with warning text or not.</p>

<h2 id="implementation">Implementation</h2>

<p>We will use <code>ActionDispatch</code>&#8217;s <code>request.user_agent</code> to grab the <code>HTTP_USER_AGENT</code> string. An example of user agent string:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Mozilla/4.0 (compatible; MSIE 5.00; Windows 98)</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>With a bit of text processing, we could work out the browser version, OS platform. Sound simple, isn&#8217;t it? A bit of regex magic and you could write your own detect method. However, we will not do reinvent the wheel in this tutorial, instead we will use the <code>useragent</code> gem for the sake of convenience.</p>

<p>Install <code>useragent</code> gem by appending to <code>Gemfile</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">gem 'useragent'</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>then <code>bundle install</code></p>

<p>Now we will inject a filter in <code>ApplicationController</code> to detect user agent. Below is the source code:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">ApplicationController</span> <span class="o">&lt;</span> <span class="ss">ActionController</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class="line">
</span><span class="line">  <span class="n">before_filter</span> <span class="ss">:check_browser</span>
</span><span class="line">
</span><span class="line">  <span class="kp">private</span>
</span><span class="line">
</span><span class="line">    <span class="no">Browser</span> <span class="o">=</span> <span class="no">Struct</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:browser</span><span class="p">,</span> <span class="ss">:version</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="no">SupportedBrowsers</span> <span class="o">=</span> <span class="o">[</span>
</span><span class="line">      <span class="no">Browser</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;Safari&#39;</span><span class="p">,</span> <span class="s1">&#39;6.0.2&#39;</span><span class="p">),</span>
</span><span class="line">      <span class="no">Browser</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;Firefox&#39;</span><span class="p">,</span> <span class="s1">&#39;19.0.2&#39;</span><span class="p">),</span>
</span><span class="line">      <span class="no">Browser</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;Internet Explorer&#39;</span><span class="p">,</span> <span class="s1">&#39;9.0&#39;</span><span class="p">),</span>
</span><span class="line">      <span class="no">Browser</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;Chrome&#39;</span><span class="p">,</span> <span class="s1">&#39;25.0.1364.160&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="o">]</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">check_browser</span>
</span><span class="line">      <span class="n">user_agent</span> <span class="o">=</span> <span class="no">UserAgent</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">request</span><span class="o">.</span><span class="n">user_agent</span><span class="p">)</span>
</span><span class="line">      <span class="k">unless</span> <span class="no">SupportedBrowsers</span><span class="o">.</span><span class="n">detect</span> <span class="p">{</span> <span class="o">|</span><span class="n">browser</span><span class="o">|</span> <span class="n">user_agent</span> <span class="o">&gt;=</span> <span class="n">browser</span> <span class="p">}</span>
</span><span class="line">        <span class="n">render</span> <span class="ss">text</span><span class="p">:</span> <span class="s1">&#39;Your browser is not supported!&#39;</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Let&#8217;s digest what&#8217;s happening the code above.</p>

<p><code>Browsers</code> is a <code>Struct</code> object with two attributes <code>:browser</code> and <code>:version</code>. This models after the way <code>UserAgent</code> create browser object. Pay attention to <code>SupportedBrowsers</code> closely, this array defines a stack of supported browsers.</p>

<p><code>check_browser</code> will get called before any action, this method compare your current user agent with <code>SupportedBrowsers</code>. If the condition is not met, we render a simple text to warn the user. You could extend it to use HTML template if you like.</p>

<p>Please be noted that I assume all your controllers are subclass of <code>ApplicationController</code>. Please adapt the source code accordingly should your controllers extends different parent controller class.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to setup Rails app with puma and nginx]]></title>
    <link href="http://ruby-journal.com/how-to-setup-rails-app-with-puma-and-nginx/"/>
    <updated>2013-03-16T17:51:00+11:00</updated>
    <id>http://ruby-journal.com/how-to-setup-rails-app-with-puma-and-nginx</id>
    <content type="html"><![CDATA[
<p>In this tutorial, I&#8217;ll walk you through the concept behind using puma + nginx, plus thorough instructions on setting them up on CentOS and Ubuntu.</p>

<!--more-->

<h2 id="concept">Concept</h2>

<p>Many people who come from the old Apache HTTPd day often ask me how reverse proxy + web server work?</p>

<blockquote>
  <p><em>&#8220;It&#8217;s different paradigm&#8221;</em></p>
</blockquote>

<p>Reverse proxy software (such as Varnish or nginx) would acts as a load balancer that routes all external requests to a pool of web apps. The below diagram depicts simply how it works:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">                                           +---&gt; web app 1
</span><span class="line">                                           |              
</span><span class="line">[requests] &lt;------&gt;  [reverse proxy server]  --+---&gt; web app 2
</span><span class="line">                                           |
</span><span class="line">                                           +---&gt; web app 3</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In constrast to Apache way, which is depicted below:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">                +--- web process fork
</span><span class="line">                |
</span><span class="line">[requests] ------&gt;  +--- web process fork
</span><span class="line">                |
</span><span class="line">                +--- web process fork</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>in which Apache HTTPd will act as both load balancer that route request to only 1 dedicated web app and automatically tell itself to fork more processes to meet demand.</p>

<p>I am NOT going to dwelve into which way is better than which. My 5cent on this is, reverse proxy + web server is new way to do things, it offers distinct advantages on scalability on multi-tenancy scenario. In which you could up-scale and down-scale more web processes on demand without affecting other apps.</p>

<h2 id="installation">Installation</h2>

<h3 id="puma">puma</h3>

<p>puma is a multi-threaded high performance webserver written in Ruby. It is new in the market yet it has gained lots of traction. It can be used to server any ruby web app that support rack such as Sinatra or Ruby On Rails.</p>

<p>To install <code>puma</code> with Rails 3+ app, simply append to <code>Gemfile</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">gem 'puma', :github =&gt; 'puma/puma'</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>NOTE: as the time of this writing, puma 2.0 (in which <code>puma</code> CLI has <code>-d</code> option) is not yet released and we need to get the latest code from the repostiory instead.</p>

<p>then <code>bundle install</code></p>

<p>You can now start your app with puma with <code>rails s</code>.  You should see output if it is started correctly:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Puma 2.0.0 starting...
</span><span class="line">* Min threads: 0, max threads: 16
</span><span class="line">* Environment: development
</span><span class="line">...</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="nginx">nginx</h3>

<p>nginx is utilised as reverse proxy server for its <code>HttpProxyModule</code> could perform proxy passing request to many virtual hosts.</p>

<p>Firstly, we need to get the software installed on our server:</p>

<p><strong>CentOS 5+</strong></p>

<p>Create file name <code>/etc/yum.repos.d/nginx.repo</code> and paste following:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">[nginx]
</span><span class="line">name=nginx repo
</span><span class="line">baseurl=http://nginx.org/packages/centos/$releasever/$basearch/
</span><span class="line">gpgcheck=0
</span><span class="line">enabled=1</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Then we can install nginx with:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo yum install nginx</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and the server could be started with:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo /etc/init.d/nginx start</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>Ubuntu 12.04+</strong></p>

<p>It&#8217;s even simpler on Ubuntu with one command:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo apt-get install nginx</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and can be started with:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo service nginx start</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Once successfully installed, you could verify with:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">nginx -v
</span><span class="line"># nginx version: nginx/1.2.7</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="configuration">Configuration</h2>

<p>Due to the differences in file locations between CentOS and Ubuntu, I divide this section into two, please read the section that match your OS.</p>

<p>Before continuing, there are few assumptions I would like you to be aware of:</p>

<ul>
  <li>You are running your app under <code>RAILS_ENV=production</code></li>
  <li>Your rails app should be placed in <code>/var/www</code> folder.</li>
  <li>You have setup correctly all permissions and firewall settings for your environment</li>
</ul>

<h3 id="nginx-configuration">nginx configuration</h3>

<p>We are going to configure nginx to have an <code>upstream</code> directive, this directive tell nginx where to proxy parse the request to.
Next we will add a virtual host and use <code>proxy_pass</code> directive to tell nginx to pass the request to the pool of processes defined in <code>upstream</code> section.</p>

<p><strong>CentOS</strong></p>

<p>The very first thing I normally do is to delete all default virtual hosts files:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo rm /etc/nginx/conf.d/default.conf</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Next, let&#8217;s create a new host config file at <code>/etc/nginx/conf.d/my_app.conf</code> for our rails app, paste following:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class=""><span class="line">upstream my_app {
</span><span class="line">  server unix:///var/run/my_app.sock;
</span><span class="line">}
</span><span class="line">
</span><span class="line">server {
</span><span class="line">  listen 80;
</span><span class="line">  server_name my_app_url.com; # change to match your URL
</span><span class="line">  root /var/www/my_app/public; # I assume your app is located at this location
</span><span class="line">
</span><span class="line">  location / {
</span><span class="line">    proxy_pass http://my_app; # match the name of upstream directive which is defined above
</span><span class="line">    proxy_set_header Host $host;
</span><span class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
</span><span class="line">  }
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>then you can restart your nginx server:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo /etc/init.id/nginx restart</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>Ubuntu</strong></p>

<p>The very first thing I normally do is to disable default site by removing the symlink:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo rm /etc/nginx/conf.d/sites-enabled/default</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Next, let&#8217;s create a new virtual host config file at <code>/etc/nginx/sites-available/my_app.conf</code> for our rails app, paste following:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class=""><span class="line">upstream my_app {
</span><span class="line">  server unix:///var/run/my_app.sock;
</span><span class="line">}
</span><span class="line">
</span><span class="line">server {
</span><span class="line">  listen 80;
</span><span class="line">  server_name my_app_url.com; # change to match your URL
</span><span class="line">  root /var/www/my_app/public; # I assume your app is located at that location
</span><span class="line">
</span><span class="line">  location / {
</span><span class="line">    proxy_pass http://my_app; # match the name of upstream directive which is defined above
</span><span class="line">    proxy_set_header Host $host;
</span><span class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
</span><span class="line">  }
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and we need to enable it by creating symlink in <code>/etc/nginx/sites-enabled</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo ln -sf /etc/nginx/sites-available/my_app.conf /etc/nginx/sites-enabled/my_app.conf</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>then you can restart your nginx server:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo service nginx restart</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="start-your-app-server">start your app server</h3>

<p>Now we need to tell puma to start our app and bind it to a Unix socket:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">cd /var/www/my_app
</span><span class="line">RAILS_ENV=production bundle exec puma -e production -b unix:///var/run/my_app.sock</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>if nothing goes wrong, you should see this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Puma 2.0.0 starting...
</span><span class="line">* Min threads: 0, max threads: 16
</span><span class="line">* Environment: development
</span><span class="line">* Listening on unix:///var/run/my_app.sock
</span><span class="line">Use Ctrl-C to stop</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and now try to surf your site with Firefox or Chrome, open <code>my_app_url.com</code>. Please substitute it with your site domain name instead here. And you should not see any error page like 403.</p>

<p>Once you have verified that our puma has correctly serve the request, we now can run the puma server as daemon.</p>

<p>Press <code>CTRL-C</code> to stop the foreground running puma processing and run command with <code>-d</code> parameter:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">RAILS_ENV=production bundle exec puma -e production -d -b unix:///var/run/my_app.sock</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You could verify if the puma process are in bg by:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">ps aux | grep puma
</span><span class="line"># 9594 92.8  1.4 496844 117280 ?       Rl   17:25   0:25 ruby /usr/lib/ruby/1.9.1/bin/puma -e production -d -b unix:///var/run/my_app.sock</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="restartstop-your-app-server">restart/stop your app server</h3>

<p>So you guess we are at the end of the tutorial? I think not, we still have no clue how to restart/stop the puma server. Well, to stop it we could kill the PID. But there are a better way, introducing the awesome <code>pumactl</code> command line tool.</p>

<p><code>pumactl</code> is a command line that takes in parameter of the path where we store the puma process state. We need to tell puma to generate the state file first. So let&#8217;s just kill our current puma running in the background with</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo killall puma</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>then we start our server with <code>-S</code> parameter:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">RAILS_ENV=production bundle exec puma -e production -d -b unix:///var/run/my_app.sock -S /var/run/my_app.state --control 'unix:///var/run/my_app_pumactl.sock'</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>puma would generate <code>/var/run/my_app.state</code> file with content:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class=""><span class="line">---
</span><span class="line">pid: 9654
</span><span class="line">config: !ruby/object:Puma::Configuration
</span><span class="line">  options:
</span><span class="line">    :min_threads: 0
</span><span class="line">    :max_threads: 16
</span><span class="line">    :quiet: true
</span><span class="line">    :debug: false
</span><span class="line">    :binds:
</span><span class="line">    - unix:///var/run/my_app.sock
</span><span class="line">    :workers: 0
</span><span class="line">    :daemon: true
</span><span class="line">    :worker_boot: []
</span><span class="line">    :environment: production
</span><span class="line">    :worker_directory: /home/jr_deploy/staging/current
</span><span class="line">    :state: /var/run/my_app.state
</span><span class="line">    :control_url: unix:///var/run/my_app_pumactl.sock
</span><span class="line">    :control_auth_token: ebc1c8acff6766a29f93795ac8b74e</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>this is a serialized <code>Puma::Configuration</code> object, and <code>pumactl</code> would read in this object to figure out where you bind your puma process and other details.</p>

<p>Now to restart our puma, we do:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">bundle exec pumactl -S /var/run/my_app.state restart</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and if you want to stop puma:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">bundle exec pumactl -S /var/run/my_app.state stop</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now you know how puma works, you could adapt what you learned for your deployment. If you use <code>capistrano</code>, you could use the <code>puma/capistrano</code> tasks by append to your <code>config/deploy.rb</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">require 'puma/capistrano`</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Ubuntu with PXE via OSX]]></title>
    <link href="http://ruby-journal.com/install-ubuntu-with-pxe-via-osx/"/>
    <updated>2012-10-06T14:21:00+10:00</updated>
    <id>http://ruby-journal.com/install-ubuntu-with-pxe-via-osx</id>
    <content type="html"><![CDATA[
<p>In this tutorial, I&#8217;ll guide you through how to to setup OSX as PXE server to install Ubuntu on other hosts.</p>

<!--more-->

<h2 id="introduction">Introduction</h2>

<p><a href="http://en.wikipedia.org/wiki/Preboot_Execution_Environment" title="Preboot Execution Environment on Wikipedia">The Preboot Execution Environment (PXE)</a> is widely used in enterprise environment for mass deployment, however it is not well-known in home and office environment because it is always easier to install Ubuntu Linux using traditional CD/DVD or USB storage devices method.</p>

<p>If your box doesn&#8217;t have CD/DVD or USB storage devices, you can install Ubuntu using PXE. The concept is very simple, a computer that host TFTP server and the to-be-installed host support PXE.</p>

<p>I adapt the concept to OSX to show you that you could achieve the same result with Mac OSX. In this tutorial, I use OSX 10.8.2. However, it should also work with older versions.</p>

<h2 id="prerequisites">Prerequisites</h2>

<ul>
  <li><a href="http://cdimage.ubuntu.com/netboot/">Netboot installer for Ubuntu</a></li>
  <li>TFTP Server</li>
  <li>A PC that is to be installed to supports PXE</li>
  <li>Fast and reliable Internet connection</li>
  <li>Time and patience</li>
</ul>

<h2 id="download-ubuntu-netboot-installer">Download Ubuntu Netboot installer</h2>

<p>We only need the netboot installer of Ubuntu, you don&#8217;t have to download a full ISO for the purpose. The file that we need to download is the <code>netboot.tar.gz</code> which can be found at <a href="http://cdimage.ubuntu.com/netboot/">http://cdimage.ubuntu.com/netboot/</a>.</p>

<ol>
  <li>Open your <em>Terminal.app</em></li>
  <li>Use <em>curl</em> command to download the netboot installer:</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ cd /tmp
</span><span class="line">$ curl -O http://archive.ubuntu.com/ubuntu/dists/precise/main/installer-i386/current/images/netboot/netboot.tar.gz</span></code></pre></td></tr></table></div></figure></notextile></div>

<ol>
  <li>Extract <code>netboot.tar.gz</code> to suitable folder that we are going to use as TFTP root folder</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ mkdir ~/Downloads/tftp
</span><span class="line">$ tar -xvzf netboot.tar.gz -C ~/Downloads/tftp</span></code></pre></td></tr></table></div></figure></notextile></div>

<ol>
  <li>Fix folder permissions:</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ sudo chown -R nobody:nogroup ~/Downloads/tftp</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="set-up-tftp-server">Set up TFTP server</h2>

<h3 id="easy-setup-with-tftp-server-software">Easy setup with TFTP Server software</h3>

<p>Though OSX comes with <code>tftp</code> command line, it still takes more steps to setup manually. Alternatively, you can download the TFTP Server. It provides a GUI to configure the built-in tftp server on OSX.</p>

<ol>
  <li>Download the <a href="http://ww2.unime.it/flr/tftpserver/">TFTP Server</a>.</li>
  <li>Open the DMG file and drag the application into your Applications folder.</li>
  <li>Open the <em>TftpServer.app</em>.</li>
  <li>
    <p>We will NOT use the default <code>/private/tftpboot</code> as root for TFTP server. From <em>TftpServer.app</em>&#8217;s screen, click on <em>Change Path</em> icon and select <code>Downloads/tftp</code> and you should see the path bar change to <code>/Users/yourusername/Downloads/tftp</code>.</p>
  </li>
  <li>
    <p>Fixing folder permission by click on <em>Fix</em> buttons of both <code>Working path permission</code> and <code>Parentals folders permissions</code>. You should see <code>Attributes OK</code> if all goes well.</p>
  </li>
  <li>Start the server by clicking on <em>Start TFTP</em>. You should see <em>Server Status</em> change to <code>Running</code>.</li>
</ol>

<h3 id="hard-setup-using-built-in-tftp-server">Hard setup using built-in tftp server</h3>

<p>For whom who want to set up the <code>tftp</code> manually via CLI.</p>

<ol>
  <li>Configure the server by modify the <code>tftp.plist</code> into a suitable folder for modification:</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ cp /System/Library/LaunchDaemons/tftp.plist /tmp</span></code></pre></td></tr></table></div></figure></notextile></div>

<ol>
  <li>Edit the file <code>/tmp/tftp.plist</code> and change:</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">&lt;key&gt;Disabled&lt;/key&gt;
</span><span class="line">&lt;true/&gt;</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>to</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">&lt;key&gt;Disabled&lt;/key&gt;
</span><span class="line">&lt;false/&gt;</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>also modify your TFTP root folder into the <code>&lt;array&gt;</code> section:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">&lt;array&gt;
</span><span class="line">  &lt;string&gt;/usr/libexec/tftpd&lt;/string&gt;
</span><span class="line">  &lt;string&gt;-s&lt;/string&gt;
</span><span class="line">  &lt;string&gt;/Users/yourusername/Downloads/tftp&lt;/string&gt;
</span><span class="line">&lt;/array&gt;</span></code></pre></td></tr></table></div></figure></notextile></div>

<ol>
  <li>Backup the existing configuration file:</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ sudo mv /System/Library/LaunchDaemons/tftp.plist /System/Library/LaunchDaemons/tftp.plist.backup</span></code></pre></td></tr></table></div></figure></notextile></div>

<ol>
  <li>Copy our configuration file into <code>/System/Library/LaunchDaemons/</code>:</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ sudo mv /tmp/tftp.plist /System/Library/LaunchDaemons</span></code></pre></td></tr></table></div></figure></notextile></div>

<ol>
  <li>Start the server with:</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ sudo launchctl load -F /System/Library/LaunchDaemons/tftp.plist</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>OR</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ sudo launchctl start com.apple.tftpd</span></code></pre></td></tr></table></div></figure></notextile></div>

<ol>
  <li>Once installation is finished, you could disable it with:</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ sudo launchctl unload -F /System/Library/LaunchDaemons/tftp.plist</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>OR</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ sudo launchctl stop com.apple.tftpd</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="set-up-dhcp-server">Set up DHCP server</h2>

<p>In concept, PXE-bootable device will look for DHCP service in order to receive available PXE boot server. If you don&#8217;t have a DHCP servive running locally in router or in your LAN, you have to set up a DHCP server.</p>

<h3 id="with-isc-dchpd">With isc-dchpd</h3>

<ol>
  <li>Install isc-dhcpd with Homebrew:</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ brew install isc-dhcp</span></code></pre></td></tr></table></div></figure></notextile></div>

<ol>
  <li>Create configuration file at <code>/usr/local/etc/dhcpd.conf</code>:</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class=""><span class="line">default-lease-time 600;
</span><span class="line">max-lease-time 7200;
</span><span class="line">
</span><span class="line">subnet X.X.X.0 netmask Y.Y.Y.0 {
</span><span class="line">  range X.X.X.151 X.X.X.205;
</span><span class="line">}
</span><span class="line">
</span><span class="line">option domain-name-servers 8.8.8.8;
</span><span class="line">
</span><span class="line">host netbook {
</span><span class="line">  hardware ethernet ??:??:??:??:??:??;
</span><span class="line">  filename "pxelinux.0";
</span><span class="line">  next-server Z.Z.Z.Z; # the IP address of your TFTP server
</span><span class="line">  fixed-address X.X.X.202;
</span><span class="line">  option subnet-mask Y.Y.Y.0;
</span><span class="line">  option broadcast-address X.X.X.255;
</span><span class="line">  option routers X.X.X.1;
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>in which <code>X.X.X</code> is your network address, <code>Y.Y.Y</code> is your subnet mask, <code>??:??:??:??:??:??</code> is the MAC address of the box you want to install to and finally <code>Z.Z.Z.Z</code> is the address of TFTP server.</p>

<ol>
  <li>Start the server with:</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ sudo /usr/local/sbin/dhcpd -f -d -cf /usr/local/etc/dhcpd.conf</span></code></pre></td></tr></table></div></figure></notextile></div>

<ol>
  <li>Once the installation finished, clean up with:</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ brew uninstall isc-dhcp</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="with-built-in-bootpd">With built-in bootpd</h3>

<p>OSX does come with a built-in BOOTP server called <code>bootpd</code>, which offer also offer DHCP service. This technology is known as NetBoot and used to install OSX on CD/DVD-less machines like MacBook Air or Mac Mini. I adapt instructions at <a href="http://www.jacquesf.com/2011/04/mac-os-x-dhcp-server/" title="Mac OSX DHCP Server">Jacques Fortier&#8217;s blog</a> for this tutorial.</p>

<ol>
  <li>Create <code>/etc/bootpd.plist</code> with content:</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
</pre></td><td class="code"><pre><code class=""><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
</span><span class="line">&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;
</span><span class="line">&lt;plist version="1.0"&gt;
</span><span class="line">&lt;dict&gt;
</span><span class="line">    &lt;key&gt;bootp_enabled&lt;/key&gt;
</span><span class="line">    &lt;false/&gt;
</span><span class="line">    &lt;key&gt;detect_other_dhcp_server&lt;/key&gt;
</span><span class="line">    &lt;integer&gt;1&lt;/integer&gt;
</span><span class="line">    &lt;key&gt;dhcp_enabled&lt;/key&gt;
</span><span class="line">    &lt;array&gt;
</span><span class="line">        &lt;string&gt;en0&lt;/string&gt;
</span><span class="line">    &lt;/array&gt;
</span><span class="line">    &lt;key&gt;reply_threshold_seconds&lt;/key&gt;
</span><span class="line">    &lt;integer&gt;0&lt;/integer&gt;
</span><span class="line">    &lt;key&gt;Subnets&lt;/key&gt;
</span><span class="line">    &lt;array&gt;
</span><span class="line">        &lt;dict&gt;
</span><span class="line">            &lt;key&gt;allocate&lt;/key&gt;
</span><span class="line">            &lt;true/&gt;
</span><span class="line">            &lt;key&gt;lease_max&lt;/key&gt;
</span><span class="line">            &lt;integer&gt;86400&lt;/integer&gt;
</span><span class="line">            &lt;key&gt;lease_min&lt;/key&gt;
</span><span class="line">            &lt;integer&gt;86400&lt;/integer&gt;
</span><span class="line">            &lt;key&gt;name&lt;/key&gt;
</span><span class="line">            &lt;string&gt;192.168.1&lt;/string&gt;
</span><span class="line">            &lt;key&gt;net_address&lt;/key&gt;
</span><span class="line">            &lt;string&gt;192.168.1.0&lt;/string&gt;
</span><span class="line">            &lt;key&gt;net_mask&lt;/key&gt;
</span><span class="line">            &lt;string&gt;255.255.255.0&lt;/string&gt;
</span><span class="line">            &lt;key&gt;net_range&lt;/key&gt;
</span><span class="line">            &lt;array&gt;
</span><span class="line">                &lt;string&gt;192.168.1.101&lt;/string&gt;
</span><span class="line">                &lt;string&gt;192.168.1.202&lt;/string&gt;
</span><span class="line">            &lt;/array&gt;
</span><span class="line">        &lt;/dict&gt;
</span><span class="line">    &lt;/array&gt;
</span><span class="line">&lt;/dict&gt;
</span><span class="line">&lt;/plist&gt;</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The config file assume that the network address is 192.168.1.0 and the DHCP allocation pool is from .101 to .102.</p>

<ol>
  <li>To assign static IP address to our to-be-installed host, we create file <code>/etc/bootptab</code>:</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">%%
</span><span class="line"># machine entries have the following format:
</span><span class="line">#
</span><span class="line"># hostname      hwtype  hwaddr              ipaddr          bootfile
</span><span class="line">client1         1       00:1f:16:08:61:96   192.168.1.105   pxelinux.0</span></code></pre></td></tr></table></div></figure></notextile></div>

<ol>
  <li>To start the server, run the following command:</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ sudo /bin/launchctl load -w /System/Library/LaunchDaemons/bootps.plist</span></code></pre></td></tr></table></div></figure></notextile></div>

<ol>
  <li>Once done, stop the server with command:</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ sudo /bin/launchctl unload -w /System/Library/LaunchDaemons/bootps.plist</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="booting-ubuntu">Booting Ubuntu</h2>

<p>To boot from TFTP, you need to configure your PC to boot from the network interface in the BIOS.</p>

<p>Once booting into the installer, you can install Ubuntu by having sources download for a mirror.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debug your failed test in Travis CI]]></title>
    <link href="http://ruby-journal.com/debug-your-failed-test-in-travis-ci/"/>
    <updated>2012-08-24T13:04:00+10:00</updated>
    <id>http://ruby-journal.com/debug-your-failed-test-in-travis-ci</id>
    <content type="html"><![CDATA[
<p>Ever wondering why some tests passed locally but failed on Travis?
Ever questioning how could I go about to debug why that failed test on remote Travis?
Read on as I show you how</p>

<p><br />
<br />
<br />
<!--more--></p>

<p>In one occassion, I had a failed Ruby test on Travis which infact passed on my local box. So I tried
to put in <code>debugger</code> and see if Travis could let me drop into Irb or not. It turns out Travis hang
for quite a while until timed out. So debug remotely doesn&#8217;t work.</p>

<p>Right, plan B then. I spent some time dig into Travis documentation and learned that Travis server
provisioned new VM image for every test. So if I could get my hand on the VMs, I could replicate the
same environment that Travis run the test locally. Sound rational, doesn&#8217;t it? Unfortunately, I could
not find any traces nor URL where to download those VMs. Thanks to Josh at Travis, he sent me the URL
to VMs.</p>

<h2 id="download-vm">Download VM</h2>

<p>Travis VM are packaged Vagrant box.</p>

<p>You coud download VM here at:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">files.travis-ci.org/boxes/provisioned/travis-(box_name).box</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>in which <code>(box_name)</code> is the language you use, <code>ruby</code>, <code>php</code>, etc.</p>

<p>For my case, I was testing a Rails app, so I downloaded the ruby box:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">wget files.travis-ci.org/boxes/provisioned/travis-ruby.box</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Please note that those files are large in size ~&gt; 3GB</p>

<h2 id="install-vagrant">Install Vagrant</h2>

<p>Head to http://vagrantup.com/ and download the package for your OS.</p>

<h2 id="install-virtualbox">Install Virtualbox</h2>

<p>Head to https://www.virtualbox.org/ and download the app for your OS.</p>

<h2 id="import-the-vm-box">Import the VM box</h2>

<p>Once you have downloaded the VM box, the image can be imported to your system. In my case:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ vagrant box add travis-ruby travis-ruby.box</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If imported successfully, you should be able to see <code>travis-ruby</code> in the box list with:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ vagrant box list</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="bootstrap">Bootstrap</h2>

<p>Let&#8217;s get our box up so we could SSH and start playing around with it:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ vagrant init travis-ruby</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>A new <code>Vargrantfile</code> will be created for you in the current folder.
We could bring the box up with:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ vagrant up</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And now you can SSH into with:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ vagrant ssh</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Once you are in the box terminal, we run the post-install script:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ sh ./postinstall.sh</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This script install all essential packages like compilers, libraries.</p>

<h2 id="debug-your-test">Debug your test</h2>

<p>Copy your application to this VM box via <code>scp</code> or <code>git clone</code> and debug the test like you debug it on your local box.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Postgres.app on OSX 10.7+]]></title>
    <link href="http://ruby-journal.com/install-postgres-dot-app-on-osx-10-dot-7-plus/"/>
    <updated>2012-08-23T16:21:00+10:00</updated>
    <id>http://ruby-journal.com/install-postgres-dot-app-on-osx-10-dot-7-plus</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://ruby-journal.com/images/netsuke.png" /></p>

<p>Traditionally, pogstgresql is installed manually with MacPort or Homebrew on Mac OSX 10.7+. I used
to have lots of problem with the setup for the installation as it requires Xcode, this libs and that libs, etc.
In summary, it is not convenient enough and I want something as simple as dragging an OS app to my /Application.
Thanks to Heroku, they took the heed and create Postgres.app. A wrapper bundled with binary postgresql server.
It is not only easy to install but also easy to setup config file if you are using Rails.</p>

<p><br />
<br />
<br />
<!--more--></p>

<h2 id="installation">Installation</h2>

<p>If you have installed postgres using Homebrew or Macport, please make sure you uninstall it first.</p>

<p>Head to <a href="http://postgresapp.com/">http://postgresapp.com/</a> and download DMG into your localbox. Mount the DMG and drag the Postgres.app
icon into your Applications folder.</p>

<h2 id="configuration">Configuration</h2>

<p>No configuration at all! Simply click on Postgres.app to start it and the app will reside in your top bar tray (elephant icon).
You can set it to start on start up by click on Elephant Icon on top bar tray and click Automatically Start on Login. Thatâs it, dead simple compare to
setting up plist launcher file.</p>

<p>PostgreSQL ships with a constellation of useful binaries, like <code>pg_dump</code> or <code>pg_restore</code>, that you will likely want to use.
Go ahead and add the <code>/bin</code> directory that ships with Postgres.app to your <code>PATH</code>. Add this to your <code>.bash_profile</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">PATH="/Applications/Postgres.app/Contents/MacOS/bin:$PATH"</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Once setup, you could refresh your terminal session with:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ source .bash_profile</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And try to run <code>psql</code> without a host, if everything is correct, you should be able to get into the the postgres console</p>

<h2 id="configure-rails-database-connection">Configure Rails database connection</h2>

<p>Use following settings in <code>config/database.yml</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">development:
</span><span class="line">  adapter: postgresql
</span><span class="line">  database: [YOUR_DATABASE_NAME]
</span><span class="line">  host: localhost</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="install-pg-gem">Install pg gem</h2>

<p>In order to install <code>pg</code> gem, we need to uninstall <code>pg</code> first and re-installed with:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ gem uninstall pg
</span><span class="line">$ gem install pg -- --with-pg-lib=/Applications/Postgres.app/Contents/MacOS/lib</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spree 1.1 deployment on Heroku]]></title>
    <link href="http://ruby-journal.com/spree-1-1-stable-deployment-on-heroku/"/>
    <updated>2012-07-06T07:31:00+10:00</updated>
    <id>http://ruby-journal.com/spree-1-1-stable-deployment-on-heroku</id>
    <content type="html"><![CDATA[
<p>In this tutorial, I will show you how to create a Spree application on your local
box, configure and push it to Heroku.</p>

<p><br />
<br />
<br />
<!--more--></p>

<h2 id="prerequisites">Prerequisites</h2>

<p>All instructions are written for OSX 10.8.x system. However it
also works to UNIX and Linux systems with minor adaptations.</p>

<h4 id="heroku">Heroku</h4>

<p>If you have installed Heroku, please make sure you update to version 2.1.0 or higher
for Cedar support:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ heroku update
</span><span class="line">$ heroku --version
</span><span class="line">heroku-toolbelt/2.35.0 (x86_64-darwin10.8.0) ruby/1.9.3</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="ruby">Ruby</h4>

<p>Because we are going to deploy on Heroku Cedar stack with Ruby 1.9.3 chosen as default version. We should use the same Ruby version on our local box for consistency.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ rvm install 1.9.3</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="spree">Spree</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ gem install spree -v=1.1.7</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Check installed spree gems:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ gem list | grep 'spree'
</span><span class="line">spree (1.1.7)
</span><span class="line">spree_api (1.1.7)
</span><span class="line">spree_auth (1.1.7)
</span><span class="line">spree_cmd (1.1.7)
</span><span class="line">spree_core (1.1.7)
</span><span class="line">spree_dash (1.1.7)
</span><span class="line">spree_promo (1.1.7)
</span><span class="line">spree_sample (1.1.7)</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>spree</code> gem consists of many components, however you only need <code>spree_core</code>
to build an online store.</p>

<h4 id="postgresql">PostgreSQL</h4>

<p>Heroku only support PostgreSQL and the software can be installed with Homebrew:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ brew install postgresql</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Please make sure you read the Build Notes after the installation.</p>

<p>Additionally, <code>pg</code> is installed to provide DB adapter:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ gem install pg</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="other-dependencies">Other dependencies</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ brew install imagemagick</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="prepare-local-application">Prepare local application</h2>

<p>Create a new rails app default to postgreSQL</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">rails _3.2.12_ new fool-man-chew -d postgresql</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Configure database setting by editing <code>config/database.yml</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class=""><span class="line">development:
</span><span class="line">  adapter: postgresql
</span><span class="line">  encoding: unicode
</span><span class="line">  database: fool-man-chew_development
</span><span class="line">  pool: 5
</span><span class="line">  username: your_username
</span><span class="line">  password: your_password
</span><span class="line">
</span><span class="line">test:
</span><span class="line">  adapter: postgresql
</span><span class="line">  encoding: unicode
</span><span class="line">  database: fool-man-chew_development
</span><span class="line">  pool: 5
</span><span class="line">  username: your_username
</span><span class="line">  password: your_password
</span><span class="line">
</span><span class="line">production:
</span><span class="line">  adapter: postgresql
</span><span class="line">  encoding: unicode
</span><span class="line">  database: fool-man-chew_development
</span><span class="line">  pool: 5
</span><span class="line">  username: your_username
</span><span class="line">  password: your_password</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In fact, you could remove <code>production</code> from <code>config/database.yml</code> because Heroku
doesnât create db based on local box <code>config/database.yml</code> file though.</p>

<p>Donât forget to create databases with:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ bundle exec rake db:create:all</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="bootstraping-on-local-box">Bootstraping on local box</h2>

<p>There are two ways to bootstrap Spree, I prefer the latter method as it gives me
more control of bootstraping process.</p>

<p>Both ways runs Asset Precompiling rake task which fix an issue where Heroku could
not precompile asset, you could read more about this issue at <a href="#assets-precompiling">Assets Precompiling section</a></p>

<h4 id="wizard-mode">1. Wizard mode</h4>

<p><code>spree_cmd</code> gem provides the convenient <code>spree</code> command that add the Spree gem, create initializers, copy migrations and optionally generate sample products and orders.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ RAILS_ENV=development spree install fool-man-chew</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You can notice that I explicitly declare <code>RAILS_ENV=development</code> here. If not,
<code>spree install</code> will assume your <code>RAILS_ENV=production</code></p>

<p>The wizard will guide you through a list of questions, I opt <code>no</code> for Default Gateway
because I am not going to use skrill gateway for this tutorial.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Would you like to install the default gateways? (yes/no) [yes] no
</span><span class="line">Would you like to run the migrations? (yes/no) [yes] yes
</span><span class="line">Would you like to load the seed data? (yes/no) [yes] yes
</span><span class="line">Would you like to load the sample data? (yes/no) [yes] yes
</span><span class="line">Admin Email [spree@example.com] fool@man.ch
</span><span class="line">Admin Password [spree123] foo123</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>if nothing goes wrong, you would see:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class=""><span class="line">...
</span><span class="line">     loading  seed data
</span><span class="line">     loading  sample data
</span><span class="line">      insert  config/routes.rb
</span><span class="line">**************************************************
</span><span class="line">We added the following line to your application's config/routes.rb file:
</span><span class="line">
</span><span class="line">    mount Spree::Core::Engine, :at =&gt; '/'
</span><span class="line">**************************************************
</span><span class="line">Spree has been installed successfully. You're all ready to go!
</span><span class="line">
</span><span class="line">Enjoy!
</span><span class="line">precompiling  assets</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="manual-mode">2. Manual mode</h4>

<p>You could manually append <code>spree</code> gem into the end of your <code>Gemfile</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">gem 'spree', '~&gt; 1.1.7'</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If you have not yet run <code>bundle install</code>, please run it now:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ bundle install</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Next we invoke Spree install generator to copy migrations, initializers and
generate sample data:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ rails g spree:install</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>OR</p>

<p>Bootstraping manually with command:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ bundle exec rake spree:install:migrations
</span><span class="line">$ bundle exec rake db:migrate
</span><span class="line">$ bundle exec rake db:seed
</span><span class="line">$ bundle exec rake spree_sample:load</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Once the bootstrap is finished, we need to precompile our assets too:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ bundle exec rake assets:precompile:nondigest</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="deploy-to-heroku">Deploy to Heroku</h2>

<h3 id="configure-web-server">Configure web server</h3>

<p>By default, Heroku use the Thin server. However in this tutorial, we are going to
use Puma instead, just to show you the great new process types system that
Cedar support.</p>

<p>Append to <code>Gemfile</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">group :production do
</span><span class="line">  gem 'puma'
</span><span class="line">end</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and install the gem with:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ bundle install</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Then we set up Puma to use minium 4 threads. You can scale up to more Dynos should the app
need more processing power. Create a new file <code>config/puma.rb</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">threads 4, 16</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The great about Cedar stack is that Heroku introduces a new way to scale your app,
that is <a href="http://adam.heroku.com/past/2011/5/9/applying_the_unix_process_model_to_web_apps/" title="Heroku Process Model">Process Model</a>, now you could define a custom list of process type
that you want to run in the <code>Procfile</code> file.</p>

<p>We configure our unicorn which is of type <code>web</code> by creating new file in <code>Rails.root</code>
folder <code>Procfile</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">web: bundle exec puma -p $PORT -C ./config/puma.rb</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="heroku-setup">Heroku setup</h3>

<h4 id="create-heroku-app">Create Heroku app</h4>

<p>We are going to create an Cedar stack based app:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ heroku apps:create fool-man-chew</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If success, you would see below output:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Creating fool-man-chew... done, stack is cedar
</span><span class="line">http://fool-man-chew.herokuapp.com/ | git@heroku.com:fool-man-chew.git
</span><span class="line">Git remote heroku added</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and double check git remote you would see heroku remote listed:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ git remote show
</span><span class="line">heroku</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="install-ruby-193-for-heroku">Install ruby-1.9.3 for Heroku</h4>

<p>Cedar stack default to ruby-1.9.3.</p>

<p>We specify Ruby version in the Gemfile:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">source 'http://rubygems.org'
</span><span class="line">
</span><span class="line">ruby '1.9.3'</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="set-up-amazon-s3">Set up Amazon S3</h4>

<p>Heroku is diskless, thus assets storage is delegated to third-party cloud storage
service like Amazon S3.</p>

<h4 id="add-ssl-certificate">Add SSL certificate</h4>

<p>By default, Spree production mode enforce SSL. This step is very optional,
please read <a href="#disable-ssl-in-production-mode">Disable SSL in Production</a> section if you want to disable SSL in Production mode.</p>

<p>A Piggyback SSL is a now standard feature on all Heroku apps so you donât have
to enable. We are not going to buy a certificate for this test app. Instead, we are
going to set up a <a href="http://devcenter.heroku.com/articles/ssl-certificate-self" title="Creating a Self-Signed SSL Certificate">Self-Signed SSL Certificate</a>.</p>

<p>A private key and certificate signing request can be generated:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ openssl genrsa -des3 -out site.key 2048
</span><span class="line">    ...
</span><span class="line">   Enter pass phrase for site.key:
</span><span class="line">   Verifying - Enter pass phrase for site.key:
</span><span class="line">$ mv site.key site.orig.key
</span><span class="line">$ openssl rsa -in site.orig.key -out site.key
</span><span class="line">   Enter pass phrase for site.orig.key:
</span><span class="line">   writing RSA key
</span><span class="line">$ openssl req -new -key site.key -out site.csr
</span><span class="line">   ...
</span><span class="line">   Country Name (2 letter code) [AU]:US
</span><span class="line">   State or Province Name (full name) [Some-State]:California
</span><span class="line">   ...</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and now the self-signed SSL certificate is generated from the <code>site.key</code> private key and <code>site.csr</code> files:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ openssl x509 -req -days 365 -in site.csr -signkey site.key -out final.crt</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The <code>final.crt</code> file is your site certificate suitable for use with Herokuâs SSL add-on along with the <code>site.key</code> private key.</p>

<p>Now we upload those two files to Heroku:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ heroku domains:add fool-man-chew.herokuapp.com
</span><span class="line">$ heroku ssl:add final.crt site.key</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="bootstraping-spree-on-heroku">Bootstraping Spree on Heroku</h4>

<p>Now we could push our app to Heroku:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git init
</span><span class="line">git add -A
</span><span class="line">git commit -m "Initial commit"
</span><span class="line">git push heroku master</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><em>OPTIONAL</em>: If you ever bump into issues where Bundler fails to locate gems, the best workaround is to cache the bundle:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">bundle cache
</span><span class="line">git add -A
</span><span class="line">git commit -m 'Bundle cache'</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If all goes well, you would see following output:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class=""><span class="line">-----&gt; Heroku receiving push
</span><span class="line">-----&gt; Ruby/Rails app detected
</span><span class="line">-----&gt; Using RUBY_VERSION: ruby-1.9.3-p392
</span><span class="line">-----&gt; Installing dependencies using Bundler version 1.3.0.pre5
</span><span class="line">       Running: bundle install --without development:test --path vendor/bundle --binstubs bin/ --deployment
</span><span class="line">       Fetching gem metadata from http://rubygems.org/.......
</span><span class="line">       Fetching gem metadata from http://rubygems.org/..
</span><span class="line">       Fetching git://github.com/joneslee85/spree-heroku.git
</span><span class="line">       ....
</span><span class="line">       Writing config/database.yml to read from DATABASE_URL
</span><span class="line">-----&gt; Preparing app for Rails asset pipeline
</span><span class="line">       Detected manifest.yml, assuming assets were compiled locally
</span><span class="line">-----&gt; Rails plugin injection
</span><span class="line">       Injecting rails_log_stdout
</span><span class="line">       Injecting rails3_serve_static_assets
</span><span class="line">-----&gt; Discovering process types
</span><span class="line">       Procfile declares types      -&gt; web
</span><span class="line">       Default types for Ruby/Rails -&gt; console, rake, worker
</span><span class="line">-----&gt; Compiled slug size is 39.4MB
</span><span class="line">-----&gt; Launching... done, v9
</span><span class="line">       http://fool-man-chew.herokuapp.com deployed to Heroku</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Next we could repeat the same bootstraping step on our remote heroku:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ heroku run rails g spree:install</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now we could open app:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ heroku apps:open</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="custom-domain">Custom Domain</h4>

<p>Now we push a bit further by setting up custom domain for our shop, first we need
to set up Heroku to respond to requests at custom domains:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ heroku addons:add custom_domains
</span><span class="line">Adding custom_domains to fool-man-chew...done.</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And inform Heroku our beautiful <code>fool-man-chew.com</code> domain</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ heroku domains:add www.fool-man-chew.com
</span><span class="line">Added www.example.com as a custom domain name to fool-man-chew.heroku.com
</span><span class="line">$ heroku domains:add fool-man-chew.com
</span><span class="line">Added example.com as a custom domain name to fool-man-chew.heroku.com</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Then I point the domain DNS to Heroku. Please read more at <a href="http://devcenter.heroku.com/articles/custom-domains" title="Heroku Custom Domains">Heroku Custom Domain</a></p>

<p>We also need to let Spree know of our custom domain by append <code>site_url</code> in our
<code>config/initializers/spree.rb</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>config/initializers/spree.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">Spree</span><span class="o">.</span><span class="n">config</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class="line">  <span class="n">config</span><span class="o">.</span><span class="n">site_url</span> <span class="o">=</span> <span class="s1">&#39;fool-man-chew.com&#39;</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Add, commit and push again:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ git add config/initializers/spree.rb
</span><span class="line">$ git commit -m 'Use custom domain'
</span><span class="line">$ git push heroku master
</span><span class="line">$ git heroku:restart</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="issues">Issues</h3>

<h4 id="disable-ssl-in-production-mode">Disable SSL in Production mode</h4>

<p>Edit file <code>config/initializers/spree.rb</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>config/initializers/spree.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">Spree</span><span class="o">.</span><span class="n">config</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class="line">  <span class="n">config</span><span class="o">.</span><span class="n">allow_ssl_in_production</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Make sure you commit the changes to app repository.</p>

<h4 id="assets-precompiling">Assets Precompiling</h4>

<p>Heroku would fail precompiling assets in slug compilation. Following output show
the error:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class=""><span class="line">   Injecting rails_log_stdout
</span><span class="line">   Injecting rails3_serve_static_assets
</span><span class="line">-----&gt; Preparing app for Rails asset pipeline
</span><span class="line">   Running: rake assets:precompile
</span><span class="line">   rake aborted!
</span><span class="line">   could not connect to server: Connection refused
</span><span class="line">   Is the server running on host "127.0.0.1" and accepting
</span><span class="line">   TCP/IP connections on port 5432?
</span><span class="line">
</span><span class="line">   Tasks: TOP =&gt; environment
</span><span class="line">   (See full trace by running task with --trace)
</span><span class="line">   Precompiling assets failed, enabling runtime asset compilation
</span><span class="line">   Injecting rails31_enable_runtime_asset_compilation
</span><span class="line">   Please see this article for troubleshooting help:
</span><span class="line">   http://devcenter.heroku.com/articles/rails31_heroku_cedar#troubleshooting</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>It make some sense though because Spree requires access to DB to complete this task and yet before you push to Heroku the environment config is not present.</p>

<p>So we have to disable precompile on intialize by set <code>config.assets.initialize_on_precompile</code> to <code>false</code> in <code>config/application.rb</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">config.assets.initialize_on_precompile = false</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Then workaround this issue by locally precompile assets before deployment:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ bundle exec rake assets:precompile RAILS_ENV=development</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>What will happen next is Sprocket will compile our assets and place them in <code>public/assets</code> folder. What Heroku really care is the <code>public/assets/manifest.yml</code>. This file contains all MD5 checksums of our assets and Heroku will check the existence of the file to tell if we compile our assets locally or not.</p>

<p>If we push this file to our server:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ git add -A public/assets
</span><span class="line">$ git commit -m 'Added precompiled assets'
</span><span class="line">$ git push heroku master</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>you would see:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">....
</span><span class="line">-----&gt; Preparing app for Rails asset pipeline
</span><span class="line">       Detected manifest.yml, assuming assets were compiled locally
</span><span class="line">...</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You could read more on <a href="http://devcenter.heroku.com/articles/rails31_heroku_cedar/" title="Rails 3.1 Heroku Cedar">Rails 3.1 on Heroku</a></p>

<h3 id="conclusion">Conclusion</h3>

<p>Spree 1.1.x is not a revolutionary change from 1.0.x but it is an incremental changes with bug fixes and updates such as dependency on Rails 3.1.x. I highly recommend you upgrade if you are still on 1.0.x.</p>

<p>Again, Iâd extend to the core team to deliver another robust release.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Ghostscript on Heroku Cedar]]></title>
    <link href="http://ruby-journal.com/heroku/install-ghostscript-on-heroku/"/>
    <updated>2012-03-12T16:57:00+11:00</updated>
    <id>http://ruby-journal.com/heroku/install-ghostscript-on-heroku</id>
    <content type="html"><![CDATA[
<p>In this tutorial, I will show you how to install ghostscript on Heroku Cedar.
As you might have known that Heroku virtual machine does come with a system-wide
ghostscript version which is located at <code>/usr/bin/gs</code>. You can find out the
location of this version:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ heroku run bash
</span><span class="line">$ /usr/bin/gs --version
</span><span class="line">8.71</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>However, explicit dependencies is not recommended, you could read 12 Factor Approach
on dependencies at <a href="http://www.12factor.net/dependencies">http://www.12factor.net/dependencies</a>. Credit to <a href="https://github.com/rwdaigle">Ryan Daigle</a> who pointed it out for me and I agree with him.</p>

<p>To install ghostscript, we fetch the source under heroku console, fetch the source,
configure and compile the software:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ heroku run bash
</span><span class="line">$ curl -O http://downloads.ghostscript.com/public/ghostscript-9.05.tar.gz
</span><span class="line">$ tar xzvf ghostscript-9.05.tar.gz
</span><span class="line">$ cd ghostscript-9.05
</span><span class="line">$ ./configure --disable-cups --disable-gtk --with-drivers=FILES
</span><span class="line">$ make
</span><span class="line">$ cp bin/gs ~/bin</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You might notice that I only specify configuration parameters <code>--with-drivers=FILES</code>.
It is because I don&#8217;t need printer drivers for my app which only does think like
images and PDF manipulation.</p>

<p>Once the compilation is completed, copy the binary <code>ghostscript-9.05/bin/gs</code> to <code>~/bin</code>.
All binaries in <code>~/bin</code> will be available for your Heroku app now. You can verify
if the binary works by:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ gs --version
</span><span class="line">9.05</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And please do not forget to clean up:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ cd ~
</span><span class="line">$ rm -rf ghostscript-9.05*</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If you feel lazy, you could download my Ruby-wrapper of gs at <a href="https://github.com/joneslee85/ruby-ghostscript">https://github.com/joneslee85/ruby-ghostscript</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Exposing ActiveRecord model attributes to Liquid dynamically]]></title>
    <link href="http://ruby-journal.com/rails/exposing-activerecord-model-attributes-to-liquid-dynamically/"/>
    <updated>2012-03-12T12:52:00+11:00</updated>
    <id>http://ruby-journal.com/rails/exposing-activerecord-model-attributes-to-liquid-dynamically</id>
    <content type="html"><![CDATA[
<p><a href="http://liquidmarkup.org/">Liquid</a> is a powerful templating tool especially when
used with rails. It is quite common that you have to expose ActiveRecord attributes
to liquid. You can achieve that by implement <code>to_liquid</code> method in your ActiveRecord
model so it acts as if it were <code>Liquid::Drop</code>, OR you can use the helper <code>liquid_methods</code>
to tell which attributes / call-able methods of the instance that could be passed
with the <code>liquid_methods</code> call. In most of cases, people tend to use the latter method
because they could narrow the exposure scope to liquid.</p>

<p>However, what if your model has so many attributes and typing all them out for
the <code>liquid_methods</code> seems arduous, you can dynamically mapping attributes by
creating a module:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>lib/attributes_to_liquid_methods_mapper.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">module</span> <span class="nn">AttributesToLiquidMethodsMapper</span>
</span><span class="line">  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">included</span><span class="p">(</span><span class="n">base</span><span class="p">)</span>
</span><span class="line">    <span class="n">base</span><span class="o">.</span><span class="n">class_eval</span> <span class="k">do</span>
</span><span class="line">      <span class="n">base</span><span class="o">.</span><span class="n">attribute_names</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">attribute</span><span class="o">|</span>
</span><span class="line">        <span class="n">liquid_methods</span> <span class="n">attribute</span><span class="o">.</span><span class="n">to_sym</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And you also need to include the above module in the ActiveRecord classes that
you want to be exposed to Liquid:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">MyObject</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class="line">  <span class="nb">require</span> <span class="s1">&#39;attributes_to_liquid_methods_mapper&#39;</span>
</span><span class="line">  <span class="kp">include</span> <span class="no">AttributesToLiquidMethodsMapper</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Hope you enjoy this tutorial. Comments and feedbacks are greatly welcomed :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Define Fixtures with Polymorphic Association]]></title>
    <link href="http://ruby-journal.com/rails/define-fixtures-with-polymorphic-association/"/>
    <updated>2012-03-09T15:16:00+11:00</updated>
    <id>http://ruby-journal.com/rails/define-fixtures-with-polymorphic-association</id>
    <content type="html"><![CDATA[
<p>It is more than often that you have to write a fixtures for models with polymorphic
association. In this short tutorial, I will show you how to use few shortcut trick
to create fixtures.</p>

<p>Assume we have following code:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Car</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class="line">  <span class="n">belongs_to</span> <span class="ss">:borrowable</span><span class="p">,</span> <span class="ss">:polymorphic</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Company</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class="line">  <span class="n">has_many</span> <span class="ss">:cars</span><span class="p">,</span> <span class="ss">:as</span> <span class="o">=&gt;</span> <span class="ss">:borrowable</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Above is just a very simple code declaring a polymorphic association between
Company to Car. Next, we will write some fixtures for the sake
of testing.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># Company fixtures</span>
</span><span class="line"><span class="n">google</span><span class="p">:</span>
</span><span class="line">  <span class="nb">id</span><span class="p">:</span> <span class="mi">1</span>
</span><span class="line">  <span class="nb">name</span><span class="p">:</span> <span class="no">Google</span>
</span><span class="line">
</span><span class="line"><span class="c1"># car fixtures</span>
</span><span class="line"><span class="n">ferrari</span><span class="p">:</span>
</span><span class="line">  <span class="nb">name</span><span class="p">:</span> <span class="no">F430</span>
</span><span class="line">  <span class="n">borrowable_id</span><span class="p">:</span> <span class="mi">1</span>
</span><span class="line">  <span class="n">borrowable_type</span><span class="p">:</span> <span class="no">Company</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>We could do better by referencing to Company fixture via named fixture, so
the above car fixture would be:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">ferrari</span><span class="p">:</span>
</span><span class="line">  <span class="nb">name</span><span class="p">:</span> <span class="no">F430</span>
</span><span class="line">  <span class="n">borrowable</span><span class="p">:</span> <span class="n">google</span> <span class="p">(</span><span class="no">Company</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Please be noted that the syntax of line <code>borrowable</code> now has an additonal <code>(Company)</code>
keyword. This is to tell rails that the <code>borrowable_type</code> is of <code>Company</code> class.
Without that, the fixtures will set <code>borrowable_type</code> to <code>nil</code>, thus invalid.</p>

<p>Hope you find this tutorial useful. And please avoid using fixures as much as you can. Use factory_girl or machinist. See you in the next tutorial.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Say Hello to Dr.Indy Cat]]></title>
    <link href="http://ruby-journal.com/artwork/say-hello-to-doctor-indy-cat/"/>
    <updated>2012-02-25T23:24:00+11:00</updated>
    <id>http://ruby-journal.com/artwork/say-hello-to-doctor-indy-cat</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://ruby-journal.com/images/octocat/dr-octocat.png" width="448" height="448" title="'Dr. Indy Cat'" /></p>

<p>Iâve been a fan of Indiana Jones and GitHub. So I made a request for
my brother <a href="https://github.com/modology">Huey</a> and guess what he gave me. I just hope this artwork could be
featured in the Octodex.</p>

<p>The Illustrator source file can be found at:</p>

<p><a href="https://github.com/modology/octocats">https://github.com/modology/octocats</a></p>

<p>Please Like or leave comments if you like it.</p>

<!--more-->
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spree 1.0 deployment on Heroku]]></title>
    <link href="http://ruby-journal.com/spree-1-0-stable-deployment-on-heroku/"/>
    <updated>2012-02-21T06:40:00+11:00</updated>
    <id>http://ruby-journal.com/spree-1-0-stable-deployment-on-heroku</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://ruby-journal.com/images/spree-1.0.0-release-ribbon.png" /></p>

<p>Spree is without a doubt a de-facto eCommerce stack of Ruby world. Yet to many Spree
is still a pandora box. In this tutorial, I will try to go through step by step
from how to set up a Spree sandbox app on a local box to deployment to Heroku.</p>

<p>Please note that all instructions are written for Apple MacOSX 10.7.x system. However I
believe it applies to other UNIX and Linux systems too (maybe with minor adaptations).</p>

<p><br />
<br />
<br />
<!--more--></p>

<h2 id="prerequisites">Prerequisites</h2>

<h4 id="heroku">Heroku</h4>

<p>Install Heroku toolbelt via Rubygems:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">gem install heroku</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If you have installed Heroku, please ensure you update to version 2.1.0 or higher for Cedar support:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">heroku update
</span><span class="line">heroku --version
</span><span class="line">heroku-toolbelt/2.35.0 (x86_64-darwin10.8.0) ruby/1.9.3</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="ruby">Ruby</h4>

<p>By default, Heroku Cedar stack uses Ruby 1.9.3. And normally it is always the latest minor version, so it is recommended you to install the latest version on your local box:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">rvm get stable; rvm install 1.9.3; rvm reload</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I use RVM to manage rubies versions on my box, you can adapt this technique
if you use rbenv or precompiled binary package</p>

<h4 id="spree">Spree</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">gem install spree -v=1.0.7</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Check installed spree gems:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">gem list | grep 'spree'
</span><span class="line">spree (1.0.7)
</span><span class="line">spree_api (1.0.7)
</span><span class="line">spree_auth (1.0.7)
</span><span class="line">spree_cmd (1.0.7)
</span><span class="line">spree_core (1.0.7)
</span><span class="line">spree_dash (1.0.7)
</span><span class="line">spree_promo (1.0.7)
</span><span class="line">spree_sample (1.0.7)</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>spree</code> gem consists of many components, however please note that you only need <code>spree_core</code>
to build an online store.</p>

<h4 id="postgresql">PostgreSQL</h4>

<p>Heroku only supports PostgreSQL. It is a good practice to have you development
environment use the same DB.</p>

<p>PostgreSQL can be installed on OSX with either of these methods below:</p>

<h5 id="postgresapp-recommended">1. Postgres.app (RECOMMENDED)</h5>

<p>You can install the Postgres.app from Heroku guys at <a href="http://postgresapp.com/">http://postgresapp.com/</a></p>

<h5 id="homebrew">2. Homebrew</h5>

<p>If you arenât in a rush, PostgeSQL can be installed with Homebrew:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">brew install postgresql</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Though I do not recommend this method because you might bump into issues with compilation.
Please make sure you read the Build Notes after the installation.</p>

<h4 id="pg-gem">pg gem</h4>

<p>Now we need to install <code>pg</code> gem too:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">gem install pg</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="imagemagick">ImageMagick</h4>

<p>Spree uses <code>paperclip</code> gem which in turn require imagemagick. You search on Google
for binary DMG package or for my case, I install it with Homebrew:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">brew install imagemagick</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="prepare-local-application">Prepare local application</h2>

<p>Create a new rails app default to postgreSQL</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">rails _3.1.10_ new fool-man-chew -d postgresql</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Configure database setting by editing <code>config/database.yml</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class=""><span class="line">development:
</span><span class="line">  adapter: postgresql
</span><span class="line">  encoding: unicode
</span><span class="line">  database: fool-man-chew_development
</span><span class="line">  pool: 5
</span><span class="line">
</span><span class="line">test:
</span><span class="line">  adapter: postgresql
</span><span class="line">  encoding: unicode
</span><span class="line">  database: fool-man-chew_development
</span><span class="line">  pool: 5
</span><span class="line">
</span><span class="line">production:
</span><span class="line">  adapter: postgresql
</span><span class="line">  encoding: unicode
</span><span class="line">  database: fool-man-chew_development
</span><span class="line">  pool: 5</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>then create the DB tables:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">bundle exec rake db:create:all</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="bootstraping-on-local-box">Bootstraping on local box</h2>

<p>There are two ways to bootstrap Spree, I prefer the latter method as it gives me
more control of bootstraping process.</p>

<p>Both ways runs Asset Precompiling rake task which fix an issue where Heroku could
not precompile asset, you could read more about this issue at <a href="#assets-precompiling">Assets Precompiling section</a></p>

<h4 id="wizard-mode">1. Wizard mode</h4>

<p><code>spree_cmd</code> gem provides the convenient <code>spree</code> command that add the Spree gem, create initializers, copy migrations and optionally generate sample products and orders.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ RAILS_ENV=development spree install fool-man-chew</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You can notice that I explicitly declare <code>RAILS_ENV=development</code> here. If not,
<code>spree install</code> will assume your <code>RAILS_ENV=production</code></p>

<p>The wizard will guide you through a list of questions, I opt <code>no</code> for Default Gateway
because I am not going to use skrill gateway for this tutorial.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Would you like to install the default gateways? (yes/no) [yes] no
</span><span class="line">Would you like to run the migrations? (yes/no) [yes] yes
</span><span class="line">Would you like to load the seed data? (yes/no) [yes] yes
</span><span class="line">Would you like to load the sample data? (yes/no) [yes] yes
</span><span class="line">Admin Email [spree@example.com] fool@man.ch
</span><span class="line">Admin Password [spree123] foo123</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>if nothing goes wrong, you would see:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class=""><span class="line">...
</span><span class="line">     loading  seed data
</span><span class="line">     loading  sample data
</span><span class="line">      insert  config/routes.rb
</span><span class="line">**************************************************
</span><span class="line">We added the following line to your application's config/routes.rb file:
</span><span class="line">
</span><span class="line">    mount Spree::Core::Engine, :at =&gt; '/'
</span><span class="line">**************************************************
</span><span class="line">Spree has been installed successfully. You're all ready to go!
</span><span class="line">
</span><span class="line">Enjoy!
</span><span class="line">precompiling  assets</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="manual-mode">2. Manual mode</h4>

<p>You could manually append <code>spree</code> gem into the end of your <code>Gemfile</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">gem 'spree', '~&gt; 1.0.7'</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If you have not yet run <code>bundle install</code>, please run it now:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">bundle install</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Next we invoke Spree install generator to copy migrations, initializers and
generate sample data:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">rails g spree:install</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>OR</p>

<p>Bootstraping manually with command:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">bundle exec rake spree:install:migrations
</span><span class="line">bundle exec rake db:migrate
</span><span class="line">bundle exec rake db:seed
</span><span class="line">bundle exec rake spree_sample:load</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Once the bootstrap is finished, we need to precompile our assets too:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">bundle exec rake assets:precompile:nondigest</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="deploy-to-heroku">Deploy to Heroku</h2>

<h3 id="configure-web-server">Configure web server</h3>

<p>By default, Heroku use the <code>thin</code> webserver. However in this tutorial, we are going to
use <code>puma</code> instead, just to show you the great new process types system that
Cedar support.</p>

<p>Append to <code>Gemfile</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">group :production do
</span><span class="line">  gem 'puma'
</span><span class="line">end</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and install the gem with:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">bundle install</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The great thing about Cedar stack is that Heroku introduces a new way to scale your app,
that is <a href="http://adam.heroku.com/past/2011/5/9/applying_the_unix_process_model_to_web_apps/" title="Heroku Process Model">Process Model</a>, now you could define a custom list of process type
that you want to run in the <code>Procfile</code> file.</p>

<p>We configure our unicorn which is of type <code>web</code> by creating new file in <code>Rails.root</code>
folder <code>Procfile</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">web: bundle exec rails server puma -p $PORT -e $RACK_ENV</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="assets-storage">Assets Storage</h3>

<p>Because Heroku is disk-less therefore assets like images are not persistently
stored. The workaround is to use Cloud storage service like Amazon S3.</p>

<h4 id="spree-heroku-extension">spree-heroku extension</h4>

<p>The <code>spree_heroku</code> gem lets you store images and data to Amazon S3, to install it
we append to <code>Gemfile</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">gem 'spree_heroku', :git =&gt; 'git://github.com/joneslee85/spree-heroku.git', :branch =&gt; '1-0-stable'</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>then</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">bundle install</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Next, we create a new bucket âfool-man-chew_productionâ under US Standard region via AWS Management Console.</p>

<p>We need to tell Spree how to access our bucket, there are 2 ways to configure S3
settings.</p>

<p>First one is to create Heroku config vars (recommended way):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">heroku config:add S3_KEY='your_access_key'
</span><span class="line">heroku config:add S3_SECRET='secret_access_key'
</span><span class="line">heroku config:add S3_BUCKET='fool-man-chew_production'</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The second is to create a new file under <code>config/s3.yml</code> and modify the key in accordance to your S3 account:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">production:
</span><span class="line">  bucket: fool-man-chew_production
</span><span class="line">  access_key_id: your_access_key
</span><span class="line">  secret_access_key: secret_access_key</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="heroku-boostrap">Heroku boostrap</h4>

<p>We are going to create an Cedar stack app:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">heroku apps:create smooth-autumn-7451</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If success, you would see below output:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Creating smooth-autumn-7451... done, stack is cedar
</span><span class="line">http://smooth-autumn-7451.herokuapp.com/ | git@heroku.com:smooth-autumn-7451.git
</span><span class="line">Git remote heroku added</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and double check git remote you would see heroku remote listed:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git remote show
</span><span class="line">heroku</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="add-ssl-certificate">Add SSL certificate</h4>

<p>Spree production mode always enforce SSL. This step is very optional,
please read <a href="#disable-ssl-in-production-mode">Disable SSL in Production</a> section if you want to disable SSL in Production mode.</p>

<p>A Piggyback SSL is a now standard feature on all Heroku apps so you donât have
to enable. We are not going to buy a certificate for this test app. Instead, we are
going to set up a <a href="http://devcenter.heroku.com/articles/ssl-certificate-self" title="Creating a Self-Signed SSL Certificate">Self-Signed SSL Certificate</a>.</p>

<p>A private key and certificate signing request can be generated:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ openssl genrsa -des3 -out site.key 2048
</span><span class="line">    ...
</span><span class="line">   Enter pass phrase for site.key:
</span><span class="line">   Verifying - Enter pass phrase for site.key:
</span><span class="line">$ mv site.key site.orig.key
</span><span class="line">$ openssl rsa -in site.orig.key -out site.key
</span><span class="line">   Enter pass phrase for site.orig.key:
</span><span class="line">   writing RSA key
</span><span class="line">$ openssl req -new -key site.key -out site.csr
</span><span class="line">   ...
</span><span class="line">   Country Name (2 letter code) [AU]:US
</span><span class="line">   State or Province Name (full name) [Some-State]:California
</span><span class="line">   ...</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and now the self-signed SSL certificate is generated from the <code>site.key</code> private key and <code>site.csr</code> files:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ openssl x509 -req -days 365 -in site.csr -signkey site.key -out final.crt</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The <code>final.crt</code> file is your site certificate suitable for use with Herokuâs SSL add-on along with the <code>site.key</code> private key.</p>

<p>Now we upload those two files to Heroku:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ heroku domains:add smooth-autumn-7451.herokuapp.com
</span><span class="line">$ heroku ssl:add final.crt site.key</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="deploy-spree-to-heroku">Deploy Spree to Heroku</h4>

<p>Now we could push our app to Heroku:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git init
</span><span class="line">git add -A
</span><span class="line">git commit -m "Initial commit"
</span><span class="line">git push heroku master</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><em>OPTIONAL</em>: If you <em>ever</em> bump into issues where Bundler fails to locate gems, the best workaround is to cache the bundle:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">bundle cache
</span><span class="line">git add -A
</span><span class="line">git commit -m 'Bundle cache'</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If all goes well, you would see following output:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class=""><span class="line">-----&gt; Heroku receiving push
</span><span class="line">-----&gt; Ruby/Rails app detected
</span><span class="line">...
</span><span class="line">       Detected manifest.yml, assuming assets were compiled locally
</span><span class="line">-----&gt; Rails plugin injection
</span><span class="line">       Injecting rails_log_stdout
</span><span class="line">       Injecting rails3_serve_static_assets
</span><span class="line">-----&gt; Discovering process types
</span><span class="line">       Procfile declares types      -&gt; web
</span><span class="line">       Default types for Ruby/Rails -&gt; console, rake, worker
</span><span class="line">-----&gt; Compiled slug size is 39.4MB
</span><span class="line">-----&gt; Launching... done, v9
</span><span class="line">       http://smooth-autumn-7451.herokuapp.com deployed to Heroku</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Next we could repeat the same bootstraping step on our remote heroku:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ heroku run rails g spree:install</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now we could open app:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ heroku apps:open</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>However to your surprise you could see that there are no images displayed correctly.
This is expected behavior and worry not, I have your back covered, please read section
<a href="#assets-precompiling">Assset Pipeline</a></p>

<h4 id="assets-precompiling">Assets Precompiling</h4>

<p>Heroku would fail precompiling assets in slug compilation. Following output show
the error:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class=""><span class="line">   Injecting rails_log_stdout
</span><span class="line">   Injecting rails3_serve_static_assets
</span><span class="line">-----&gt; Preparing app for Rails asset pipeline
</span><span class="line">   Running: rake assets:precompile
</span><span class="line">   rake aborted!
</span><span class="line">   could not connect to server: Connection refused
</span><span class="line">   Is the server running on host "127.0.0.1" and accepting
</span><span class="line">   TCP/IP connections on port 5432?
</span><span class="line">
</span><span class="line">   Tasks: TOP =&gt; environment
</span><span class="line">   (See full trace by running task with --trace)
</span><span class="line">   Precompiling assets failed, enabling runtime asset compilation
</span><span class="line">   Injecting rails31_enable_runtime_asset_compilation
</span><span class="line">   Please see this article for troubleshooting help:
</span><span class="line">   http://devcenter.heroku.com/articles/rails31_heroku_cedar#troubleshooting</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>It make some sense though because Spree requires access to DB to complete this task and yet before you push to Heroku the environment config is not present.</p>

<p>So we have to disable precompile on initialization by set <code>config.assets.initialize_on_precompile</code> to <code>false</code> in <code>config/application.rb</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>config/application.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">config</span><span class="o">.</span><span class="n">assets</span><span class="o">.</span><span class="n">initialize_on_precompile</span> <span class="o">=</span> <span class="kp">false</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>To workaround this issue, there are 2 ways:</p>

<h5 id="locally-precompiling-assets">1. Locally Precompiling Assets</h5>

<p>We precompile the assets on localbox:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ RAILS_ENV=production bundle exec rake assets:precompile</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>What will happen next is Sprocket will compile our assets and place them in <code>public/assets</code> folder. What Heroku really care is the <code>public/assets/manifest.yml</code>. This file contains all MD5 checksums of our assets and Heroku will check the existence of the file to tell if we compile our assets locally or not. Make sure you double check your <code>.gitignore</code> and remove the <code>public/assets</code> if there is one so git wonât omit this path.</p>

<p>If we push this file to our server:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ git add -A public/assets
</span><span class="line">$ git commit -m 'Added precompiled assets'
</span><span class="line">$ git push heroku master</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>you would see:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">....
</span><span class="line">-----&gt; Preparing app for Rails asset pipeline
</span><span class="line">       Detected manifest.yml, assuming assets were compiled locally
</span><span class="line">...</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You could read more on <a href="http://devcenter.heroku.com/articles/rails31_heroku_cedar/" title="Rails 3.1 Heroku Cedar">Rails 3.1 on Heroku</a></p>

<p>Again, I do not recommend you using this method, because you pollute your source tree
with precompiled assets. Please avoid this at all cost and instead use a CDN like S3 or Rackspace
to serve our precompiled assets.</p>

<h5 id="serve-precompiled-assets-on-cdn-recommended">2. Serve precompiled assets on CDN (RECOMMENDED)</h5>

<p>First, we install <code>asset_sync</code> gem by appending to your <code>Gemfile</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">group :assets do
</span><span class="line">  # asset_sync is required as needed by application.rb
</span><span class="line">  gem 'asset_sync', :require =&gt; nil
</span><span class="line">end
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>then</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ bundle install</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Then we have to enable <code>user_env_compile</code> plugin first:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">heroku labs:enable user-env-compile</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Next, we configure asset_sync to sync with Amazon S3 by adding following variables into Heroku env:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ heroku config:add AWS_ACCESS_KEY_ID=xxxx
</span><span class="line">$ heroku config:add AWS_SECRET_ACCESS_KEY=xxxx
</span><span class="line">$ heroku config:add FOG_DIRECTORY=xxxx
</span><span class="line">$ heroku config:add FOG_PROVIDER=AWS
</span><span class="line"># and optionally:
</span><span class="line">$ heroku config:add FOG_REGION=eu-west-1
</span><span class="line">$ heroku config:add ASSET_SYNC_GZIP_COMPRESSION=true
</span><span class="line">$ heroku config:add ASSET_SYNC_MANIFEST=true
</span><span class="line">$ heroku config:add ASSET_SYNC_EXISTING_REMOTE_FILES=keep</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Configure <code>config/environments/production.rb</code> to use Amazon S3 as the asset host and ensure precompiling is enabled:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>config/environments/production.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">config</span><span class="o">.</span><span class="n">action_controller</span><span class="o">.</span><span class="n">asset_host</span> <span class="o">=</span> <span class="s2">&quot;//</span><span class="si">#{</span><span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;FOG_DIRECTORY&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2">.s3.amazonaws.com&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Also, ensure the following are defined (in <code>production.rb</code> or <code>application.rb</code>)</p>

<ul>
  <li>config.assets.digest is set to true.</li>
  <li>config.assets.enabled is set to true.</li>
</ul>

<p>Thatâs done. Commit changes and push to remote Heroku:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git commit -am "Added asset_sync gem and configure asset_host to serve from S3 bucket in production"
</span><span class="line">git push heroku master</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The <code>asset_sync</code> override <code>rake assets:precompile</code> deploy task and will automatically synchronized all modified and
new assets to S3.</p>

<p>You should see output like below if success:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class=""><span class="line">....
</span><span class="line">Preparing app for Rails asset pipeline
</span><span class="line">Running: rake assets:precompile
</span><span class="line">AssetSync: using default configuration from built-in initializer
</span><span class="line">AssetSync: using default configuration from built-in initializer
</span><span class="line">AssetSync: Syncing.
</span><span class="line">Using: Directory Search of /tmp/build_z7t7ti7lk5up/public/assets
</span><span class="line">Uploading: assets/admin/all-190f577bede460d23825559e6cfdd106.js
</span><span class="line">Uploading: assets/admin/all-190f577bede460d23825559e6cfdd106.js.gz
</span><span class="line">AssetSync: Done.
</span><span class="line">Asset precompilation completed (91.32s)
</span><span class="line">....</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="custom-domain">Custom Domain</h4>

<p>Now we push a bit further by setting up custom domain for our shop, first we need
to set up Heroku to respond to requests at custom domains:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ heroku addons:add custom_domains
</span><span class="line">Adding custom_domains to smooth-autumn-7451...done.</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And inform Heroku our beautiful <code>fool-man-chew.com</code> domain</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ heroku domains:add www.fool-man-chew.com
</span><span class="line">Added www.example.com as a custom domain name to smooth-autumn-7451.heroku.com
</span><span class="line">$ heroku domains:add fool-man-chew.com
</span><span class="line">Added example.com as a custom domain name to smooth-autumn-7451.heroku.com</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Then I point the domain DNS to Heroku. Please read more at <a href="http://devcenter.heroku.com/articles/custom-domains" title="Heroku Custom Domains">Heroku Custom Domain</a></p>

<p>We also need to let Spree know of our custom domain by append <code>site_url</code> in our
<code>config/initializers/spree.rb</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>config/initializers/spree.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">Spree</span><span class="o">.</span><span class="n">config</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class="line">  <span class="n">config</span><span class="o">.</span><span class="n">site_url</span> <span class="o">=</span> <span class="s1">&#39;fool-man-chew.com&#39;</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Add, commit and push again:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ git add config/initializers/spree.rb
</span><span class="line">$ git commit -m 'Use custom domain'
</span><span class="line">$ git push heroku master
</span><span class="line">$ git heroku:restart</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="extra">Extra</h3>

<h4 id="disable-ssl-in-production-mode">Disable SSL in Production mode</h4>

<p>Edit file <code>config/initializers/spree.rb</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>config/initializers/spree.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">Spree</span><span class="o">.</span><span class="n">config</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class="line">  <span class="n">config</span><span class="o">.</span><span class="n">allow_ssl_in_production</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Make sure you commit the changes to app repository.</p>

<h4 id="deploy-to-heroku-using-herokusan">Deploy to Heroku using heroku_san</h4>

<p>It is much quicker to setup and deploy to Heroku by using heroku_san gem.</p>

<p>Simply install <code>heroku_san</code> by appending to your <code>Gemfile</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">group :development do
</span><span class="line">  gem 'heroku_san'
</span><span class="line">end</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>then</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ bundle install</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Configure heroku_san by creating <code>config/heroku.yml</code> file with content:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class=""><span class="line">production:
</span><span class="line">  stack: cedar
</span><span class="line">  app: smooth-autumn-7451
</span><span class="line">  config:
</span><span class="line">    BUNDLE_WITHOUT: 'development:test'
</span><span class="line">  config:
</span><span class="line">    # vars for asset_sync
</span><span class="line">    AWS_ACCESS_KEY_ID: xxx
</span><span class="line">    AWS_SECRET_ACCESS_KEY:xxx
</span><span class="line">    FOG_DIRECTORY: 'skateshop'
</span><span class="line">    FOG_PROVIDER: 'AWS'
</span><span class="line">    # vars for spree_heroku
</span><span class="line">    S3_KEY='your_access_key'
</span><span class="line">    S3_SECRET='secret_access_key'
</span><span class="line">    S3_BUCKET='fool-man-chew_production'</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>We deploy to heroku by running following rake task:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ rake production deploy</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="conclusion">Conclusion</h3>

<p>Spree 1.0 is a big major leap. It is faster, more robust and
much easier to install. Outstanding issue such as âSuperclass mistmach bug with Calculator::PriceBucketâ, âBootstraping migration run failedâ are resolved. Yet
there are possibly issues that I am not aware of, so please file a ticket on <a href="https://github.com/spree/spree/issues" title="Spree Issues">GitHub Issues</a> and Iâll make sure it has my utmost attention.</p>

<p>Iâd like to extend my gratitude to the Spree community for the hardwork.</p>

]]></content>
  </entry>
  
</feed>
