<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ruby Journal]]></title>
  <link href="http://ruby-journal.com/atom.xml" rel="self"/>
  <link href="http://ruby-journal.com/"/>
  <updated>2013-11-22T17:38:41+11:00</updated>
  <id>http://ruby-journal.com/</id>
  <author>
    <name><![CDATA[Trung LÃª]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Digesting pumactl]]></title>
    <link href="http://ruby-journal.com/digesting-pumactl/"/>
    <updated>2013-11-22T16:39:00+11:00</updated>
    <id>http://ruby-journal.com/digesting-pumactl</id>
    <content type="html"><![CDATA[
<p>Puma is multi-threaded web server which is implemented in Ruby and has become a popular choice
for many production servers in the world. Given its short time of development, you&#8217;ll likely
to see issues. One of the issue that I and many people often bump into is processes management.
By default, puma offers <code>pumactl</code>, yet this utitlity hasn&#8217;t lived up to expectation (this is a year
ago), thus people seeks different approaches with custom bash script by calling <code>puma</code> directly,
upstart, monit, etc. However, today when I revisit <code>pumactl</code>, this tool has been polished and
now does exactly what it promises. In this short article, I&#8217;ll go through with you how to use
<code>pumactl</code> to manage your puma processes.</p>

<!--more-->

<h2 id="anatomy-of-puma-processes">Anatomy of puma processes</h2>

<p>Like any other UNIX web server, puma is run as daemon, spawning child processes (in puma term,
they called in puma cluster worker) to handle requests from the outside world.</p>

<p>For example:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ ps aux | grep puma
</span><span class="line">1000      2527  0.0  0.2  80824 20312 ?        Sl   Nov21   0:02 puma -C config/puma.rb
</span><span class="line">1000      2530  0.0  2.2 870928 184180 ?       Sl   Nov21   0:33 puma: cluster worker: 2527
</span><span class="line">1000      2533  0.0  2.3 870868 188284 ?       Sl   Nov21   0:32 puma: cluster worker: 2527</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You can see above that process with PID 2527 is our mother process which spawn two children.
Both children with PID 2530 and 2533 respectively clearly states that its mother is PID 2527.</p>

<p>Next, we are going to look into how to manage puma process manually.</p>

<h3 id="stop-puma-process">Stop puma process</h3>

<p>To stop this process, we send a SIGTERM signal to PID 2557</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ kill -s SIGTERM 2557</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And we could check if the process has been cleanly killed with:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ ps aux | grep puma | grep 2557
</span><span class="line"># yields no results</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="hard-restart-puma-process">Hard restart puma process</h3>

<p>To restart this process, we send a SIGUSR2 signal to PID 2557.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ kill -s SIGUSR 2557</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Please note, this action is equivalent to killing the mother process and start a new one. Avoid this thing in production environment at all cost. Because we do not want downtime.</p>

<p>Checking the ps yields:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ ps aux | grep puma
</span><span class="line">1000      3001  0.0  0.2  80824 20312 ?        Sl   Nov21   0:02 puma -C config/puma.rb
</span><span class="line">1000      3010  0.0  2.2 880321 184180 ?       Sl   Nov21   0:33 puma: cluster worker: 3001
</span><span class="line">1000      3020  0.0  2.3 700828 188284 ?       Sl   Nov21   0:32 puma: cluster worker: 3001</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The output shows that our PID 2557 is killed and a new PID 3001 is created.</p>

<h3 id="graceful-restart-puma-process">Graceful restart puma process</h3>

<p>In order to achieve zero downtime, we only kill these 2 children and respawn
with 2 new one instead of killing the mother process. In puma term, they call it <code>phased-restart</code>,
that is sending SIGUSR1 signal to PID 2557.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ kill -S SIGUSR1 2557</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Let verify the result:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ ps aux | grep puma
</span><span class="line">1000      2527  0.0  0.2  80824 20312 ?        Sl   Nov21   0:02 puma -C config/puma.rb
</span><span class="line">1000      3001  0.0  2.2 870928 184180 ?       Sl   Nov21   0:33 puma: cluster worker: 2527
</span><span class="line">1000      3002  0.0  2.3 870868 188284 ?       Sl   Nov21   0:32 puma: cluster worker: 2527</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The 2 children are killed and two new spawn children appears. Just what we expect.</p>

<h3 id="checking-status-of-puma-process">Checking status of puma process</h3>

<p>In order to check process, you have to start puma with <code>-S</code> parameter, this points to a state
file which stores all statuses of our puma process. Example:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ puma -S /var/run/app.state</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now you could hook this file into any monitoring tools. I find this state file idea not helpful
as many of us relies on other system to manage status such as monit or god.</p>

<h2 id="introduction-to-pumactl">Introduction to pumactl</h2>

<p>As we can see that above operations can be tedious and error prone and definitely not fun to work
with a big deployment scale. Introducing pumactl, this utility automates all of above tasks. Let&#8217;s
see how we could reproduce all above steps</p>

<h3 id="start-puma-process">Start puma process</h3>

<p>We setup a config file that asks puma to store its PID in a pid file and run in daemon mode. We&#8217;ll
carry out a test on an Rails app. Create <code>config/puma.rb</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">environment ENV['RAILS_ENV'] || 'production'
</span><span class="line">daemonize
</span><span class="line">
</span><span class="line">workers    2 # should be same number of your CPU core
</span><span class="line">threads    1, 6
</span><span class="line">
</span><span class="line">pidfile    "/var/run/puma_app1.pid"</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>We now can start puma with:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ bundle exec pumactl -F config/puma.rb start</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Verify with:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ ps aux | grep puma
</span><span class="line">1000      2527  0.0  0.2  80824 20312 ?        Sl   Nov21   0:02 puma -C config/puma.rb
</span><span class="line">1000      2530  0.0  2.2 870928 184180 ?       Sl   Nov21   0:33 puma: cluster worker: 2527
</span><span class="line">1000      2533  0.0  2.3 870868 188284 ?       Sl   Nov21   0:32 puma: cluster worker: 2527</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>we can see above that pumactl will start our server with <code>puma -C config/puma.rb</code>. Sweet. Next
we check to see if pid file store correct PID:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ cat /var/run/puma_app1.pid
</span><span class="line">2527</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Just as expected.</p>

<h3 id="stop-puma-process-1">Stop puma process</h3>

<p>Simply with:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ bundle exec pumactl -F config/puma.rb stop</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>There is no output yielded with</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ ps aux | grep puma | grep 2557</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>indicates that the process is cleanly killed</p>

<h3 id="hard-restart-puma-process-1">Hard restart puma process</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ bundle exec pumactl -F config/puma.rb restart</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ ps aux | grep puma
</span><span class="line">1000      3001  0.0  0.2  80824 20312 ?        Sl   Nov21   0:02 puma -C config/puma.rb
</span><span class="line">1000      3010  0.0  2.2 880321 184180 ?       Sl   Nov21   0:33 puma: cluster worker: 3001
</span><span class="line">1000      3020  0.0  2.3 700828 188284 ?       Sl   Nov21   0:32 puma: cluster worker: 3001</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The output shows that 2557 is killed and new PID 3001 is created. We could check to see if
our pid file is updated with 3001:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ cat /var/run/puma_app1.pid
</span><span class="line">3001</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Magic! It&#8217;s working!</p>

<h3 id="graceful-restart-puma-process-1">Graceful restart puma process</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ bundle exec pumactl -F config/puma.rb phased-restart</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and check again:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ ps aux | grep puma
</span><span class="line">1000      2527  0.0  0.2  80824 20312 ?        Sl   Nov21   0:02 puma -C config/puma.rb
</span><span class="line">1000      3001  0.0  2.2 870928 184180 ?       Sl   Nov21   0:33 puma: cluster worker: 2527
</span><span class="line">1000      3002  0.0  2.3 870868 188284 ?       Sl   Nov21   0:32 puma: cluster worker: 2527</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>PID 2527 is still there and only its children are respawned. Perfect!</p>

<h3 id="checking-status-of-puma-process-1">Checking status of puma process</h3>

<p>Now we do not need other tool to tell if our PID is running, we could do with one command:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ bundle exec pumactl -F config/puma.rb status</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>if PID is running we would get output:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">PID 2557 is running</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>else</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">No puma process</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="conclusion">Conclusion</h2>

<p>That&#8217;s it folk. Now you know how to use pumactl, why don&#8217;t you delete your custom script and replace
it with pumactl. See you in the next article.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to import millions records via ActiveRecord within minutes not hours]]></title>
    <link href="http://ruby-journal.com/how-to-import-millions-records-via-activerecord-within-minutes-not-hours/"/>
    <updated>2013-10-30T17:23:00+11:00</updated>
    <id>http://ruby-journal.com/how-to-import-millions-records-via-activerecord-within-minutes-not-hours</id>
    <content type="html"><![CDATA[
<p>In today tutorial, I&#8217;ll show you how to optimise a ActiveRecord import script by 300%. My solution is better than other solution as it doesn&#8217;t use any SQL hack, thus you can retain the integrity with the data by running it through ActiveRecord normally.</p>

<!--more-->

<p>At work, I am assigned a task to import millions rows of records from a 300MB CSV file into Rails app. The rake task takes in FILE and process it with ActiveRecord.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">FILE=/tmp/big_file.csv rake data:import</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And the rake task would call my <code>ProductsImporter.run</code> method, summarised below:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">ProductsImporter</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">run</span>
</span><span class="line">    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class="line">    <span class="c1"># read the CSV files and assigns rows to variable rows</span>
</span><span class="line">
</span><span class="line">    <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span><span class="o">.</span><span class="n">transaction</span> <span class="k">do</span>
</span><span class="line">      <span class="n">rows</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">row</span><span class="o">|</span>
</span><span class="line">        <span class="nb">p</span> <span class="o">=</span> <span class="no">Product</span><span class="o">.</span><span class="n">find_or_initialize_by_product_id</span><span class="p">(</span><span class="n">row</span><span class="o">[</span><span class="ss">:product_id</span><span class="o">]</span><span class="p">)</span>
</span><span class="line">        <span class="nb">p</span><span class="o">.</span><span class="n">assign_attributes</span><span class="p">(</span><span class="n">row</span><span class="p">)</span>
</span><span class="line">        <span class="nb">p</span><span class="o">.</span><span class="n">save!</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And soon I bumped into performance issue because ActiveRecord::Transaction could not release garbage effectively. The script tooks <em>~2hrs</em> to complete. This is unacceptable to my standard.</p>

<p>There are various workarounds on the net such as using <code>ar_import</code> gem which uses SQL INSERT. However I do not like these SQL solutions as there are so many callbacks with my models and data integrity is very important. So I come up with an alternative solution:</p>

<ul>
  <li>Split the big_file.csv into smaller files</li>
  <li>Loop through these smaller chunks and recursively run rake task on each</li>
</ul>

<p>So now you wonder how the above solution works better. It is because now we run many small processes in which Rails won&#8217;t have to deal much with big GC. Once a process is completed, memory will be instantly released. Now, let&#8217;s code this up using shell script, I chose bash as example (please adapt to fit your purpose):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c">#! /bin/bash</span>
</span><span class="line">
</span><span class="line"><span class="nv">NUMBER_OF_SPLIT_LINES</span><span class="o">=</span>50000
</span><span class="line"><span class="nv">SPLIT_FILE_PREFIX</span><span class="o">=</span><span class="s1">&#39;small_&#39;</span>
</span><span class="line"><span class="nv">BIG_FILE_PATH</span><span class="o">=</span>/tmp/big_file.csv
</span><span class="line"><span class="nv">SPLIT_FILES</span><span class="o">=</span>/tmp/<span class="nv">$SPLIT_FILE_PREFIX</span>*
</span><span class="line">
</span><span class="line">temp_home <span class="o">()</span> <span class="o">{</span>
</span><span class="line">  <span class="nb">cd</span> /tmp
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line">rails_app_home <span class="o">()</span> <span class="o">{</span>
</span><span class="line">  <span class="nb">cd</span> /your_app
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line">split_big_csv_into_small_chunks <span class="o">()</span> <span class="o">{</span>
</span><span class="line">  <span class="nb">echo</span> <span class="s2">&quot;Split $BIG_FILE_PATH file into small chunks with size $NUMBER_OF_SPLIT_LINES lines...&quot;</span>
</span><span class="line">  temp_home <span class="o">&amp;&amp;</span> split -l <span class="nv">$NUMBER_OF_SPLIT_LINES</span> <span class="nv">$BIG_FILE_PATH</span> <span class="nv">$SPLIT_FILE_PREFIX</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line">process_split_files <span class="o">()</span> <span class="o">{</span>
</span><span class="line">  <span class="k">for </span>f in <span class="nv">$SPLIT_FILES</span>
</span><span class="line">  <span class="k">do</span>
</span><span class="line"><span class="k">    </span><span class="nb">echo</span> <span class="s2">&quot;Processing $f file...&quot;</span>
</span><span class="line">    rails_app_home <span class="o">&amp;&amp;</span> <span class="nv">FILE</span><span class="o">=</span><span class="nv">$f</span> nohup rake data:import &amp;
</span><span class="line">  <span class="k">done</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line">split_big_csv_into_small_chunks
</span><span class="line">process_split_files
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Let&#8217;s go through the above script. I use <code>split</code> UNIX command to split the big file into many smaller files, each with 50000 lines. Then I loop through these small files and parse it to rake task to run. I utilise <code>nohup</code> to make sure my script is not killed by SIGHUP (in my case, I run this script on remote host via SSH). Be noted that, I run each process in the background.</p>

<p>If you want a better performant version of <code>split</code>, I highly recommend you give <code>csv_split</code> a try, please download it at https://github.com/PerformanceHorizonGroup/csv-split.</p>

<p>Now, how many minutes you think our bash script would take to finish? It is <em>3 mintutes</em> - no kidding! This is a massive gain compared to 2hrs.</p>

<p>Ruby/Rails are not the best for dealing with huge chunk of memory. So before deciding to try some SQL way, you can be pragmatic and abuse UNIX by spawning as many processes as your computer can handle and you&#8217;ll be surprised on how much gain you would achieve. Good luck!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Faster TravisCI test]]></title>
    <link href="http://ruby-journal.com/faster-travisci-test/"/>
    <updated>2013-10-11T12:37:00+11:00</updated>
    <id>http://ruby-journal.com/faster-travisci-test</id>
    <content type="html"><![CDATA[
<p>Running test suite is time consuming. There are various techniques to optimize the runtime performance of the CI by stub/mock, parallel_test, etc. In this short tutorial, I&#8217;ll show you how to optimize your TravisCI test suite by splitting your test suit into concurrent jobs, which drastically improve the build time.</p>

<!--more-->

<p>I have a Rails app with rspec. Here are specs that are run sequentially:</p>

<ul>
  <li>models</li>
  <li>controllers</li>
  <li>helpers</li>
  <li>routing</li>
  <li>views</li>
  <li>features</li>
</ul>

<p>Running specs sequentially is slow. Travis can break these specs into concurrent jobs for you. You need to modify your <code>.travis.yml</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class=""><span class="line">language: ruby
</span><span class="line">rvm:
</span><span class="line">  - 2.0.0
</span><span class="line">bundler_args: --without development production --quiet
</span><span class="line">env:
</span><span class="line">  - TEST_SUITE=features
</span><span class="line">  - TEST_SUITE=controllers
</span><span class="line">  - TEST_SUITE=helpers
</span><span class="line">  - TEST_SUITE=models
</span><span class="line">  - TEST_SUITE=routing
</span><span class="line">  - TEST_SUITE=views
</span><span class="line">script:
</span><span class="line">  - bundle exec rspec spec/$TEST_SUITE/*</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>As you can see in the above YAML file, we set <code>$TEST_SUITE</code> env variable with the name of our spec folders. This variable will get substitute into <code>bundle exec rspec spec/$TEST_SUITE/*</code> call.</p>

<p>Once you push new change to your GitHub, TravisCI now run 6 concurrent jobs at the same time. My build before take 45mins, now reduce to 18mins. That&#8217;s a great improvement. Please be noted that, please upgrade to 10 concurrent build plan if you are using Travis Pro service.</p>

<p>Furthmore, you could cut at least 3 more mins by enabling the experimental bundler caching (which is only available for Travis Pro plan now). Append to your <code>.travis.yml</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">cache: bundler</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Travis will cache your bundler and next build will not waste their time with bundler install anymore which save time.</p>

<p>By using <code>env</code> and <code>cache</code> option, you could reduce the build time by at least 60%. You could push further by breaking your slow specs and group them together and have them run separately too. Or you could introduce parallel_test gem into your app, this would save you at least 30% more. I hope you enjoy the tutorial and see you next time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to uninstall all Ruby gems]]></title>
    <link href="http://ruby-journal.com/how-to-uninstall-all-ruby-gems/"/>
    <updated>2013-10-11T12:01:00+11:00</updated>
    <id>http://ruby-journal.com/how-to-uninstall-all-ruby-gems</id>
    <content type="html"><![CDATA[
<p>In order to uninstall all gems, you have to loop through all entries in <code>gem list</code> with bash scripting. This method is very inconveninent. Thanks to Rubygems 2.1.0, you now could do it with one command.</p>

<!--more-->

<p>Firstly, please make sure you upgrade your Rubygems to 2.1.0 or newer:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">gem</span> <span class="n">update</span> <span class="o">--</span><span class="nb">system</span>
</span><span class="line"><span class="n">gem</span> <span class="o">--</span><span class="n">version</span>
</span><span class="line"><span class="c1"># 2.1.8</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and in order to uninstall all gems:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">gem</span> <span class="n">uninstall</span> <span class="o">--</span><span class="n">all</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>That&#8217;s it folks!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Becareful with space in lambda rocket syntax between Ruby 1.9 and 2.0]]></title>
    <link href="http://ruby-journal.com/becareful-with-space-in-lambda-hash-rocket-syntax-between-ruby-1-dot-9-and-2-dot-0/"/>
    <updated>2013-10-03T19:45:00+10:00</updated>
    <id>http://ruby-journal.com/becareful-with-space-in-lambda-hash-rocket-syntax-between-ruby-1-dot-9-and-2-dot-0</id>
    <content type="html"><![CDATA[
<p>Majority of Ruby 2.0 syntaxes are backward-compatible with Ruby 1.9. Yet there is one tiny change in the way that Ruby 2.0 does lambda rocket that would break backward-compatability with Ruby 1.9. That is&#8230;a single space. Yes, you heard it correctly.</p>

<!--more-->

<p>So, in Ruby 2.0, you could declare shorthand <code>lambda</code> with <code>-&gt;</code>. Here is example:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">hello_world</span> <span class="o">=</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="n">message</span><span class="p">)</span> <span class="p">{</span> <span class="nb">puts</span> <span class="n">message</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The above code runs fine under 2.0 yet failed spectacularly with 1.9:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="ss">SyntaxError</span><span class="p">:</span> <span class="p">(</span><span class="n">irb</span><span class="p">):</span><span class="mi">1</span><span class="p">:</span> <span class="n">syntax</span> <span class="n">error</span><span class="p">,</span> <span class="n">unexpected</span> <span class="n">tLPAREN_ARG</span><span class="p">,</span> <span class="n">expecting</span> <span class="n">keyword_do_LAMBDA</span> <span class="ow">or</span> <span class="n">tLAMBEG</span>
</span><span class="line"><span class="n">hello_world</span> <span class="o">=</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="n">message</span><span class="p">)</span> <span class="p">{</span> <span class="nb">puts</span> <span class="n">message</span> <span class="p">}</span>
</span><span class="line">                  <span class="o">^</span>
</span><span class="line"><span class="p">(</span><span class="n">irb</span><span class="p">):</span><span class="mi">1</span><span class="p">:</span> <span class="n">syntax</span> <span class="n">error</span><span class="p">,</span> <span class="n">unexpected</span> <span class="n">tLAMBEG</span><span class="p">,</span> <span class="n">expecting</span> <span class="vg">$end</span>
</span><span class="line"><span class="n">hello_world</span> <span class="o">=</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="n">message</span><span class="p">)</span> <span class="p">{</span> <span class="nb">puts</span> <span class="n">message</span> <span class="p">}</span>
</span><span class="line">                            <span class="o">^</span>
</span><span class="line">  <span class="n">from</span> <span class="sr">/Users/</span><span class="n">trung_le</span><span class="o">/.</span><span class="n">rubies</span><span class="o">/</span><span class="n">ruby</span><span class="o">-</span><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="o">-</span><span class="n">p448</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="ss">irb</span><span class="p">:</span><span class="mi">12</span><span class="ss">:in</span> <span class="sb">`&lt;main&gt;&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In order to fix this issue, we have to rid of the space between <code>-&gt;</code> and <code>(message)</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">hello_world</span> <span class="o">=</span> <span class="o">-&gt;</span><span class="p">(</span><span class="n">message</span><span class="p">)</span> <span class="p">{</span> <span class="nb">puts</span> <span class="n">message</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Weird, isn&#8217;t it? At least you are aware of this discrepancy now.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 4 changes habtm join table naming convention]]></title>
    <link href="http://ruby-journal.com/rails-4-changes-join-table-naming-convention/"/>
    <updated>2013-10-03T18:55:00+10:00</updated>
    <id>http://ruby-journal.com/rails-4-changes-join-table-naming-convention</id>
    <content type="html"><![CDATA[
<p>When upgrading my app from Rails 3.2.14 to Rails 4, I bumped into an error in which
habtm association complains missing DB join table. To my surprise, Rails 4 has changed the default naming convention for join table.</p>

<!--more-->

<p>Here is the Rails 3 code:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">ContactPlan</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class="line">  <span class="n">has_and_belongs_to_many</span> <span class="ss">:contact_types</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">ContactType</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class="line">  <span class="n">has_and_belongs_to_many</span> <span class="ss">:contact_plans</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">CreateContactPlansContactTypes</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Migration</span>
</span><span class="line">  <span class="n">create_table</span> <span class="ss">:contact_plans_contact_types</span><span class="p">,</span> <span class="nb">id</span><span class="p">:</span> <span class="kp">false</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class="line">    <span class="n">t</span><span class="o">.</span><span class="n">integer</span> <span class="ss">:contact_plan_id</span><span class="p">,</span> <span class="ss">null</span><span class="p">:</span> <span class="kp">false</span>
</span><span class="line">    <span class="n">t</span><span class="o">.</span><span class="n">integer</span> <span class="ss">:contact_type_id</span><span class="p">,</span> <span class="ss">null</span><span class="p">:</span> <span class="kp">false</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>As you can see from above migrarion, my join table naming is <code>contact_plans_contact_types</code>. Yet Rails 4 fails to run the migration and asks for the existence of <code>contact_plans_types</code>. If you are upgrading from Rails 3 app, I highly recommend you avoid renaming this join table. Instead, you should explicitly declare the join table for habtm association:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">ContactPlan</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class="line">  <span class="n">has_and_belongs_to_many</span> <span class="ss">:contact_types</span><span class="p">,</span> <span class="n">join_table</span><span class="p">:</span> <span class="ss">:contact_plans_contact_types</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">ContactType</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class="line">  <span class="n">has_and_belongs_to_many</span> <span class="ss">:contact_plans</span><span class="p">,</span> <span class="n">join_table</span><span class="p">:</span> <span class="ss">:contact_plans_contact_types</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This technique mitigates regressions. And you can always go back to renaming if you feel like after stablising the build.</p>

<p>I can see that Rails 4 try to be smart by detecting duplication in model naming. I welcome this sort of change as it would reduce the complexity in the naming. Furthermore, if you bump into this issue, it is very likely that you should rethink your model naming.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to track changes of a model in a `after_callbacks` in Rails 3 or newer]]></title>
    <link href="http://ruby-journal.com/how-to-track-changes-with-after-callbacks-in-rails-3-or-newer/"/>
    <updated>2013-09-23T16:43:00+10:00</updated>
    <id>http://ruby-journal.com/how-to-track-changes-with-after-callbacks-in-rails-3-or-newer</id>
    <content type="html"><![CDATA[
<p>You can track changes to a ActiveRecord model with <code>ActiveRecord::Dirty#changed?</code>. Yet there is one caveat though, the tracking is lost after the model is saved. In this tutorial I&#8217;ll show how to track the changes to a record even the record has been saved, this comes handy when being used with ActiveRecord <code>after</code> callbacks</p>

<!--more-->

<p>Imagine that we have a <code>Product</code> model with <code>name</code>, we make change to <code>name</code> with:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="vi">@product</span><span class="o">.</span><span class="n">name</span> <span class="c1"># =&gt; &quot;Diamond&quot;</span>
</span><span class="line"><span class="vi">@product</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;Ruby&#39;</span>
</span><span class="line"><span class="vi">@product</span><span class="o">.</span><span class="n">changed?</span> <span class="c1"># =&gt; true</span>
</span><span class="line"><span class="vi">@product</span><span class="o">.</span><span class="n">name_changed?</span> <span class="c1"># =&gt; true</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>By using ActiveRecord::Dirty, we could tell if the model or attribute <code>name</code> is changed.</p>

<p>If we save our model</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="vi">@product</span><span class="o">.</span><span class="n">save</span>
</span><span class="line"><span class="vi">@product</span><span class="o">.</span><span class="n">changed?</span> <span class="c1"># =&gt; false</span>
</span><span class="line"><span class="vi">@product</span><span class="o">.</span><span class="n">name_changed?</span> <span class="c1"># =&gt; false</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The <code>false</code> value indicates that ActiveRecord::Dirty is not persisent after the model is saved. What if now you are being asked to add in a code to notify the inventory system if product name is changed? We can
simply workaround by using <code>around</code> callback. Here is details:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Product</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class="line">  <span class="n">around_update</span> <span class="ss">:notify_systtem_if_name_is_changed</span>
</span><span class="line">
</span><span class="line">  <span class="kp">private</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">notify_systtem_if_name_is_changed</span>
</span><span class="line">    <span class="n">name_changed</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">name_changed?</span>
</span><span class="line">
</span><span class="line">    <span class="k">yield</span>
</span><span class="line">
</span><span class="line">    <span class="n">notify_system</span> <span class="k">if</span> <span class="n">named_changed</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>around</code> callback is introduced in Rails 3. This callback consists of 3 parts:</p>

<ul>
  <li>The part before <code>yield</code> is codes prior to the action is called</li>
  <li>The <code>yield</code> is action that gets called</li>
  <li>The part after <code>yield</code> is codes after the action is called</li>
</ul>

<p>In our example above, we store the changing state of attribute <code>name</code> into <code>named_change</code> variable. The <code>yield</code> executes the <code>update</code> action. The changing state then can be referenced afterward and will send out notification if name is truly changed.</p>

<p>The <code>around</code> callbacks are very powerful features of ActiveRecord. I hope that you should take advantage of it more. See you in the next tutorial.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to write Rails View test with RSpec]]></title>
    <link href="http://ruby-journal.com/how-to-write-rails-view-test-with-rspec/"/>
    <updated>2013-09-16T16:18:00+10:00</updated>
    <id>http://ruby-journal.com/how-to-write-rails-view-test-with-rspec</id>
    <content type="html"><![CDATA[
<p>In this short tutorial, I will show you how to do a View test with Rspec + capybara</p>

<!--more-->

<p>To my surprise that not many people is aware of View test provided by rspec-rails gem. It is partially
because they migrate from default Rails stack testing in which functional test performs both controllers
and views testing.</p>

<p>Testing View is to assert the template contain the piece of expected informations that is parsed from the controllers.</p>

<p>The default Rails stack ships with ActionDispatch::Assertions::SelectorAssertions which consits of method &#8216;assert_select&#8217;
to traverse through our DOM nodes whilst default rspec does not provide any CSS or XPath selector method, the only available
method is <code>contain</code>.</p>

<p>So if we have our view like the example below:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="erb"><span class="line"><span class="x"># app/views/products/show.html.erb</span>
</span><span class="line">
</span><span class="line"><span class="x">&lt;table id=&quot;product_</span><span class="cp">&lt;%=</span> <span class="vi">@product</span><span class="o">.</span><span class="n">id</span> <span class="cp">%&gt;</span><span class="x">&quot;&gt;</span>
</span><span class="line"><span class="x">  &lt;thead&gt;</span>
</span><span class="line"><span class="x">    &lt;tr&gt;</span>
</span><span class="line"><span class="x">      &lt;th&gt;Name&lt;/th&gt;</span>
</span><span class="line"><span class="x">      &lt;th&gt;Price&lt;/th&gt;</span>
</span><span class="line"><span class="x">    &lt;/tr&gt;</span>
</span><span class="line"><span class="x">  &lt;/thead&gt;</span>
</span><span class="line"><span class="x">  &lt;tbody&gt;</span>
</span><span class="line"><span class="x">    &lt;tr&gt;</span>
</span><span class="line"><span class="x">      &lt;td&gt;</span><span class="cp">&lt;%=</span> <span class="vi">@product</span><span class="o">.</span><span class="n">name</span> <span class="cp">%&gt;</span><span class="x">&lt;/td&gt;</span>
</span><span class="line"><span class="x">      &lt;td&gt;</span><span class="cp">&lt;%=</span> <span class="vi">@product</span><span class="o">.</span><span class="n">price</span> <span class="cp">%&gt;</span><span class="x">&lt;/td&gt;</span>
</span><span class="line"><span class="x">    &lt;/tr&gt;</span>
</span><span class="line"><span class="x">  &lt;/tbody&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>we could write our spec:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># spec/views/products/show.html.erb_spec.rb</span>
</span><span class="line">
</span><span class="line"><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">describe</span> <span class="s1">&#39;products/show.html.erb&#39;</span> <span class="k">do</span>
</span><span class="line">  <span class="n">it</span> <span class="s1">&#39;displays product details correctly&#39;</span> <span class="k">do</span>
</span><span class="line">    <span class="n">assign</span><span class="p">(</span><span class="ss">:product</span><span class="p">,</span> <span class="no">Product</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;Shirt&#39;</span><span class="p">,</span> <span class="ss">price</span><span class="p">:</span> <span class="mi">50</span><span class="o">.</span><span class="mi">0</span><span class="p">))</span>
</span><span class="line">
</span><span class="line">    <span class="n">render</span>
</span><span class="line">
</span><span class="line">    <span class="n">rendered</span><span class="o">.</span><span class="n">should</span> <span class="n">contain</span><span class="p">(</span><span class="s1">&#39;Shirt&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="n">rendered</span><span class="o">.</span><span class="n">should</span> <span class="n">contain</span><span class="p">(</span><span class="s1">&#39;50.0&#39;</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>the View spec is not associated with controller, thus we have to assign the @product into
<code>products/show.html.erb</code> template with method <code>#assign</code>. The <code>#render</code> method is the same
as <code>ActionView#render</code>. Lastly, the <code>#rendered</code> returns the HTML response, of which assertions
can be performed upon.</p>

<p>The <code>contain</code> matcher is not suffice to perform explicit check on DOM level. Therefore I
use capybara. Some might prefer webrat. Please ensure you install capybara with Gemfile
and add this line into your <code>spec/spec_helper.rb</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># spec/spec_helper.rb</span>
</span><span class="line">
</span><span class="line"><span class="nb">require</span> <span class="s1">&#39;capybara/rspec&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>that inject all rspec matchers that capybara provides, in which we are interested in <code>#has_selector</code> matcher.</p>

<p>and the above spec can be refactored to:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># spec/views/products/show.html.erb_spec.rb</span>
</span><span class="line">
</span><span class="line"><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">describe</span> <span class="s1">&#39;products/show.html.erb&#39;</span> <span class="k">do</span>
</span><span class="line">  <span class="n">it</span> <span class="s1">&#39;displays product details correctly&#39;</span> <span class="k">do</span>
</span><span class="line">    <span class="n">assign</span><span class="p">(</span><span class="ss">:product</span><span class="p">,</span> <span class="no">Product</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;Shirt&#39;</span><span class="p">,</span> <span class="ss">price</span><span class="p">:</span> <span class="mi">50</span><span class="o">.</span><span class="mi">0</span><span class="p">))</span>
</span><span class="line">
</span><span class="line">    <span class="n">render</span>
</span><span class="line">
</span><span class="line">    <span class="n">rendered</span><span class="o">.</span><span class="n">should</span> <span class="n">have_selector</span><span class="p">(</span><span class="s2">&quot;table#product_</span><span class="si">#{</span><span class="vi">@product</span><span class="o">.</span><span class="n">id</span><span class="si">}</span><span class="s2"> tbody tr:nth-of-type(1) td:nth-of-type(1)&quot;</span><span class="p">,</span> <span class="ss">text</span><span class="p">:</span> <span class="s1">&#39;Shirt&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="n">rendered</span><span class="o">.</span><span class="n">should</span> <span class="n">have_selector</span><span class="p">(</span><span class="s2">&quot;table#product_</span><span class="si">#{</span><span class="vi">@product</span><span class="o">.</span><span class="n">id</span><span class="si">}</span><span class="s2"> tbody tr:nth-of-type(1) td:nth-of-type(2)&quot;</span><span class="p">,</span> <span class="ss">text</span><span class="p">:</span> <span class="s1">&#39;50.0&#39;</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The <code>#has_selector</code> accept CSS and XPath rule and comes with many userful options, it fills in the gap of ActionDispatch::Assertions::SelectorAssertions.</p>

<p>I hope you like this short tutorial, comments are welcome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to do jQuery UI Autocomplete with capybara 2]]></title>
    <link href="http://ruby-journal.com/how-to-do-jqueryui-autocomplete-with-capybara-2/"/>
    <updated>2013-09-12T14:04:00+10:00</updated>
    <id>http://ruby-journal.com/how-to-do-jqueryui-autocomplete-with-capybara-2</id>
    <content type="html"><![CDATA[
<p>In this tutorial, I&#8217;ll show you how to do jQuery UI Autocomplete the better way with Capybara 2!
That is getting rid of <code>sleep</code> that many solutions on the Internet suggested. Furthermore this
solution works both with selenium and polstergeist driver.</p>

<!--more-->

<p>If you search on the Internet on how to do autocomplete with capybara, you&#8217;ll normally find
solutions for Capybara 1.x like below:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">s</span><span class="o">.</span><span class="n">fill_in</span> <span class="s2">&quot;Make&quot;</span><span class="p">,</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="s2">&quot;Make&quot;</span>
</span><span class="line"><span class="nb">sleep</span> <span class="mi">3</span>
</span><span class="line"><span class="n">page</span><span class="o">.</span><span class="n">execute_script</span><span class="p">(</span><span class="s2">&quot;$(&#39;.ui-menu-item a:contains(</span><span class="se">\&quot;</span><span class="s2">Make Two</span><span class="se">\&quot;</span><span class="s2">)&#39;).trigger(&#39;mouseenter&#39;).click();&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>It was a fine solution however the <code>sleep</code> call is not good. It tells the driver to passively
sleep while waiting for JS loading up. As of Capybara 2, there is no need to call <code>sleep</code> as
finder API will actively look for existence of the node and raise error if not found. Here is
a better solution:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">fill_autocomplete</span><span class="p">(</span><span class="n">field</span><span class="p">,</span> <span class="n">options</span> <span class="o">=</span> <span class="p">{})</span>
</span><span class="line">  <span class="n">fill_in</span> <span class="n">field</span><span class="p">,</span> <span class="ss">with</span><span class="p">:</span> <span class="n">options</span><span class="o">[</span><span class="ss">:with</span><span class="o">]</span>
</span><span class="line">
</span><span class="line">  <span class="n">page</span><span class="o">.</span><span class="n">execute_script</span> <span class="sx">%Q{ $(&#39;#</span><span class="si">#{</span><span class="n">field</span><span class="si">}</span><span class="sx">&#39;).trigger(&#39;focus&#39;) }</span>
</span><span class="line">  <span class="n">page</span><span class="o">.</span><span class="n">execute_script</span> <span class="sx">%Q{ $(&#39;#</span><span class="si">#{</span><span class="n">field</span><span class="si">}</span><span class="sx">&#39;).trigger(&#39;keydown&#39;) }</span>
</span><span class="line">  <span class="n">selector</span> <span class="o">=</span> <span class="sx">%Q{ul.ui-autocomplete li.ui-menu-item a:contains(&quot;</span><span class="si">#{</span><span class="n">options</span><span class="o">[</span><span class="ss">:select</span><span class="o">]</span><span class="si">}</span><span class="sx">&quot;)}</span>
</span><span class="line">
</span><span class="line">  <span class="n">page</span><span class="o">.</span><span class="n">should</span> <span class="n">have_selector</span><span class="p">(</span><span class="s1">&#39;ul.ui-autocomplete li.ui-menu-item a&#39;</span><span class="p">)</span>
</span><span class="line">  <span class="n">page</span><span class="o">.</span><span class="n">execute_script</span> <span class="sx">%Q{ $(&#39;</span><span class="si">#{</span><span class="n">selector</span><span class="si">}</span><span class="sx">&#39;).trigger(&#39;mouseenter&#39;).click() }</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>To use it, you call:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">fill_autocomplete</span><span class="p">(</span><span class="s1">&#39;field_id&#39;</span><span class="p">,</span> <span class="ss">with</span><span class="p">:</span> <span class="s1">&#39;term&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Please be noted that <code>field</code> parameter must be the CSS ID, not label nor name.</p>

<p>Let me digest the above code, first, I fill in the text field and I want the autocomplete
to kick in by trigger focus and keydown event on the field using JS. Then I check
the existence of <code>li.ui-menu-item a</code> instead of doing <code>sleep</code> to ensure that the JS
has popped the dropdown correctly. The final step is just to trigger mouseentter event to
do mouse hover then click.</p>

<p>Using <code>have_selector</code> is definitely a nicer way to check for JS initialization and I
encourage you apply this technique as often as possible. You&#8217;ll thank me later for saving
you from randomly failed test. That&#8217;s all for now. Good day!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to fill in FCKeditor with capybara 2]]></title>
    <link href="http://ruby-journal.com/how-to-fill-in-fckeditor-with-capybara-2/"/>
    <updated>2013-09-12T12:46:00+10:00</updated>
    <id>http://ruby-journal.com/how-to-fill-in-fckeditor-with-capybara-2</id>
    <content type="html"><![CDATA[
<p>In this short tutorial, I will show you how to fill in FCkeditor text area by using Capybara 2</p>

<!--more-->

<p>Just imagine you have a textarea:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">&lt;textarea cols=â"40" id=â"letter_content" name=â"letter[content]â" rows=â"20"&gt;â&lt;/textarea&gt;</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Once you apply FCKeditor for this textarea, the output yields following new DOM:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">&lt;textarea cols=â"40" id=â"letter_content" name=â"letter[content]â" rows=â"20"&gt;â&lt;/textarea&gt;
</span><span class="line">&lt;div id="cke_letter_content" class="cke_1 cke cke_reset cke_chrome cke_editor_letter_content cke_ltr cke_browser_webkit" dir="ltr" lang="en" role="application" aria-labelledby="cke_letter_content_arialbl"&gt;
</span><span class="line">  &lt;iframe src="" frameborder="0" class="cke_wysiwyg_frame cke_reset" style="width: 100%; height: 100%;" title="Rich Text Editor, letter_content" aria-describedby="cke_30" tabindex="0" allowtransparency="true"&gt;
</span><span class="line">    &lt;body contenteditable="true" class="cke_editable cke_editable_themed cke_contents_ltr cke_show_borders" spellcheck="false"&gt;
</span><span class="line">    &lt;/body&gt;
</span><span class="line">  &lt;/iframe&gt;
</span><span class="line">&lt;/div&gt;</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>As you can see in the DOM structure, FCKeditor will create new iframe and within this frame, we have a body tag with HTML5 contenteditable.
By common sense, in order to fill in this body tag, Iâd do following:</p>

<ul>
  <li>Switch to that editor frame</li>
  <li>Set the body content</li>
</ul>

<p>I sit down and give it a try on caypybara + selenium and capybara + polstergeist:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line">  <span class="c1"># WARNNING: not working!!</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">fckeditor_fill_in</span><span class="p">(</span><span class="n">frame_id</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span><span class="line">    <span class="n">within_frame</span><span class="p">(</span><span class="n">frame_id</span><span class="p">)</span> <span class="k">do</span>
</span><span class="line">      <span class="n">fill_in</span> <span class="s1">&#39;body&#39;</span><span class="p">,</span> <span class="ss">with</span><span class="p">:</span> <span class="n">value</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>to use it:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line">  <span class="n">fckeditor_fill_in</span><span class="p">(</span><span class="s1">&#39;#cke_letter_content iframe:nth-of-type(1)&#39;</span><span class="p">,</span> <span class="s1">&#39;Hello world&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>run the test and BOOM!, it failed. Firstly, <code>within_frame</code> does not work with selenium. Secondly, <code>fill_in</code> does not support edit contenteditable tag, there was a PR by Jon Rowe few months ago but not merged yet (as of this writing). It seems to me the only viable
solution left for me is to do it the monkey way, that is Javascript. And below is the working code:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line">  <span class="k">def</span> <span class="nf">fckeditor_fill_in</span><span class="p">(</span><span class="nb">id</span><span class="p">,</span> <span class="n">params</span> <span class="o">=</span> <span class="p">{})</span>
</span><span class="line">    <span class="n">page</span><span class="o">.</span><span class="n">execute_script</span> <span class="sx">%Q{</span>
</span><span class="line"><span class="sx">      var ckeditor = CKEDITOR.instances.</span><span class="si">#{</span><span class="nb">id</span><span class="si">}</span><span class="sx"></span>
</span><span class="line"><span class="sx">      ckeditor.setData(&#39;</span><span class="si">#{</span><span class="n">params</span><span class="o">[</span><span class="ss">:with</span><span class="o">]</span><span class="si">}</span><span class="sx">&#39;)</span>
</span><span class="line"><span class="sx">      ckeditor.focus()</span>
</span><span class="line"><span class="sx">      ckeditor.updateElement()</span>
</span><span class="line"><span class="sx">    }</span>
</span><span class="line">  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>to use it:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line">  <span class="n">fckeditor_fill_in</span><span class="p">(</span><span class="s1">&#39;letter_content&#39;</span><span class="p">,</span> <span class="s1">&#39;Hello world&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Vioala! It works smoothly. The lesson I learned with capybara is that it is still a pain to use the built-in DSL as it doesnât work across
drivers. If you get stuck, fallback to the primitive way. Feedbacks are greatly welcomed.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learn to know myself better]]></title>
    <link href="http://ruby-journal.com/learn-to-know-myself-better/"/>
    <updated>2013-08-27T22:59:00+10:00</updated>
    <id>http://ruby-journal.com/learn-to-know-myself-better</id>
    <content type="html"><![CDATA[
<p>Unlike some of my friends, I <em>occassionally</em> write or blog. Because I don&#8217;t know how to express myself in verbal or writting form. In fact I suck at both. It is not because I hate them, on the contrary I <em>love</em> communication and always get fascinated by charismatic speeches. I have been always avoiding confronting this very own problem of mine. Gradually I refrain to question the problem at all.</p>

<!--more-->

<p>However today is special. When everyone&#8217;s busy with hectic life, I am lying here, on the hospital bed waiting for the surgery. I have been admitted to hospital for 3 days, at the beginning the fear of surgery makes me anxious and terrified. The urge to express what are going in my head drove me crazy and hopeless. I could not able to focus until the day three, on which all the anxeties seems gone, I felt very peaceful and calm, as if I truly reach my own point of solitude. I learn to be patient and accept things that I could not control and most importantly I learn to accept myself.</p>

<p>I was born <strong>different</strong>.</p>

<p>I have never been good at talking and writting but I am gifted with different ability. Ability to conceive and interpret things visually, I could remember shapes and pictures and be able to draw them from memory and I could draw many shapes before I know how to write alphabets. My brain is programmed in a very graphical but <strong>organic</strong> way. It&#8217;s like Van Goh or Picasso artworks rather than Gantt or Pie charts. There are no rules to predicate how the artwork should be interpreted, just like a Picasso painting, it could mean a universe to some and a doodle work to some. The strength is that you are able to perceive things in multi-paradigms. However the caveat is that you are drown in the multiple streams of thoughts that you hardly be able to express ideas in a coherent way. And just like arts, it takes skills and time to build up the depth to appreciate.</p>

<p>So stop blaming other external factors before you have asserted yourself. Please ignoring all prejudices and expectations. Give yourself space and time to learn more about yourself. It&#8217;ll be a long journey but a rewarding one.</p>

<p>Good luck</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[minitest let() is lazy]]></title>
    <link href="http://ruby-journal.com/minitest-let-is-lazy/"/>
    <updated>2013-04-13T10:31:00+10:00</updated>
    <id>http://ruby-journal.com/minitest-let-is-lazy</id>
    <content type="html"><![CDATA[
<p>Don&#8217;t you know that minitest also have a similar <code>let()</code> helper that does exactly the same job as the one of RSpec. But some people do not fully understand the difference between defining object in <code>let()</code> and <code>before()</code> block.</p>

<!--more-->

<p>So you&#8217;ve been doing TDD, that is writing tests. Tests is like app documentation, it needs attention as much as the main code does. One good way to refactor your test is to use <code>let()</code>.</p>

<p>We have a simple spec below:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">describe</span> <span class="no">Post</span> <span class="k">do</span>
</span><span class="line">  <span class="n">before</span> <span class="k">do</span>
</span><span class="line">    <span class="vi">@post</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;Awesome Post&#39;</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="n">describe</span> <span class="s1">&#39;#publish&#39;</span> <span class="k">do</span>
</span><span class="line">    <span class="n">it</span> <span class="s1">&#39;should publish to the world wide web&#39;</span> <span class="k">do</span>
</span><span class="line">      <span class="vi">@post</span><span class="o">.</span><span class="n">publish</span>
</span><span class="line">      <span class="vi">@post</span><span class="o">.</span><span class="n">published</span><span class="o">.</span><span class="n">must_equal</span> <span class="kp">true</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>that could be refactored to:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">describe</span> <span class="no">Post</span> <span class="k">do</span>
</span><span class="line">  <span class="n">let</span><span class="p">(</span><span class="ss">:post</span><span class="p">)</span> <span class="p">{</span> <span class="no">Post</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;Awesome Post&#39;</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="n">describe</span> <span class="s1">&#39;#publish&#39;</span> <span class="k">do</span>
</span><span class="line">    <span class="n">it</span> <span class="s1">&#39;should publish to the world wide web&#39;</span> <span class="k">do</span>
</span><span class="line">      <span class="n">post</span><span class="o">.</span><span class="n">publish</span>
</span><span class="line">      <span class="n">post</span><span class="o">.</span><span class="n">published</span><span class="o">.</span><span class="n">must_equal</span> <span class="kp">true</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Our test is now easier to read. Some developers naively believes the <code>let()</code> just provides a syntax sugar to the test, in fact it is totally different from the block way. It&#8217;s lazy loaded. See the code below:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">let</span><span class="p">(</span><span class="ss">:post</span><span class="p">)</span> <span class="p">{</span> <span class="no">Post</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;Awesome Post&#39;</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="no">Post</span><span class="o">.</span><span class="n">count</span>
</span><span class="line"><span class="c1"># 0</span>
</span><span class="line">
</span><span class="line"><span class="n">post</span>
</span><span class="line">
</span><span class="line"><span class="no">Post</span><span class="o">.</span><span class="n">count</span>
</span><span class="line"><span class="c1"># 1</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>the <code>post</code> is not created until it is invoked. This definitely helps improve the speed of test in which object is initialized upon being referenced. Yet a caveat for tests on collection of objects that does not reference the object directly in the test. For example:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">describe</span> <span class="no">Post</span> <span class="k">do</span>
</span><span class="line">  <span class="n">let</span><span class="p">(</span><span class="ss">:post1</span><span class="p">)</span> <span class="p">{</span> <span class="no">Post</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;Awesome Post&#39;</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line">  <span class="n">let</span><span class="p">(</span><span class="ss">:post2</span><span class="p">)</span> <span class="p">{</span> <span class="no">Post</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;Awesome Post&#39;</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="n">describe</span> <span class="s1">&#39;.bulk_publish&#39;</span> <span class="k">do</span>
</span><span class="line">    <span class="n">it</span> <span class="s1">&#39;should bulk publish to the world wide web&#39;</span> <span class="k">do</span>
</span><span class="line">      <span class="no">Post</span><span class="o">.</span><span class="n">bulk_publish</span>
</span><span class="line">      <span class="n">post1</span><span class="o">.</span><span class="n">published</span><span class="o">.</span><span class="n">must_equal</span> <span class="kp">true</span>
</span><span class="line">      <span class="n">post2</span><span class="o">.</span><span class="n">published</span><span class="o">.</span><span class="n">must_equal</span> <span class="kp">true</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>To some people surprise, the test will fail because we do not invoke <code>post1</code> and <code>post2</code> in the test, thus 2 posts are not created before <code>Post.bulk_publish</code> is invoked. You tap those 2 objects before the test with:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">describe</span> <span class="s1">&#39;.bulk_publish&#39;</span> <span class="k">do</span>
</span><span class="line">  <span class="n">before</span> <span class="k">do</span>
</span><span class="line">    <span class="n">post1</span>
</span><span class="line">    <span class="n">post2</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Which I find very ugly. In such cases, it&#8217;d be best interest to use the block way to define objects.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">describe</span> <span class="no">Post</span> <span class="k">do</span>
</span><span class="line">  <span class="n">describe</span> <span class="s1">&#39;.bulk_publish&#39;</span> <span class="k">do</span>
</span><span class="line">    <span class="n">before</span> <span class="k">do</span>
</span><span class="line">      <span class="vi">@post1</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;Awesome Post&#39;</span><span class="p">)</span>
</span><span class="line">      <span class="vi">@post2</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;Awesome Post&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">
</span><span class="line">    <span class="n">it</span> <span class="s1">&#39;should bulk publish to the world wide web&#39;</span> <span class="k">do</span>
</span><span class="line">      <span class="no">Post</span><span class="o">.</span><span class="n">bulk_publish</span>
</span><span class="line">      <span class="vi">@post1</span><span class="o">.</span><span class="n">published</span><span class="o">.</span><span class="n">must_equal</span> <span class="kp">true</span>
</span><span class="line">      <span class="vi">@post2</span><span class="o">.</span><span class="n">published</span><span class="o">.</span><span class="n">must_equal</span> <span class="kp">true</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>So now you know the behaviour of <code>let()</code>, I highly recommend you go through your test and apply what you have learned. See you guys in the next tutorial.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to install Ruby 2.0 on OSX 10.7 or newer]]></title>
    <link href="http://ruby-journal.com/how-to-install-ruby-2-dot-0-on-osx-10-dot-7-or-newer/"/>
    <updated>2013-03-16T17:58:00+11:00</updated>
    <id>http://ruby-journal.com/how-to-install-ruby-2-dot-0-on-osx-10-dot-7-or-newer</id>
    <content type="html"><![CDATA[
<p>This short tutorial, I will show you how to install Ruby 2.0.0 on OSX 10.7+ or newer</p>

<!--more-->

<h2 id="rvm">RVM:</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">rvm get stable &amp;&amp; rvm reload</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Firstly, the OpenSSL comes with your OSX 10.7+ is outdated, you need to get latest version</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">rvm pkg install openssl</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Secondly, the readline library on OSX 10.7+ suffers UTF-8 issue in which method in UTF-8 is converted to characters under <code>irb</code>, the
fix is to use latest version</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">rvm pkg install readline</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And you can install Ruby 2.0.0-p0 with:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">rvm reinstall 2.0.0 --with-readline-dir=$rvm_path/usr --with-openssl-dir=$rvm_path/usr</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Please note that <code>clang-425.0.24</code> that comes with Xcode successfully compile the source, should you bump into any compilation issue, you could try compiling it with <code>gcc-422</code></p>

<h2 id="rbenv">rbenv</h2>

<p>Make sure your <code>ruby-build</code> is up-to-date:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">cd ~/.rbenv/plugins/ruby-build &amp;&amp; git pull</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>rbenv does not fetch fixed readline lib, thus you are required to install them manually with <code>brew</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">brew update
</span><span class="line">brew install readline openssl
</span><span class="line">env CONFIGURE_OPTS=--with-readline-dir=`brew --prefix readline` rbenv install 2.0.0-p0</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to block old IE version with Rails]]></title>
    <link href="http://ruby-journal.com/how-to-block-old-ie-version-with-rails/"/>
    <updated>2013-03-16T17:56:00+11:00</updated>
    <id>http://ruby-journal.com/how-to-block-old-ie-version-with-rails</id>
    <content type="html"><![CDATA[
<p>There are many ways to detect browser agent, it could be front-end side with Javascript or backend.
In this short tutorial, I&#8217;ll walk you through on how to detect browser version with Ruby On Rails</p>

<p>This applies for Rails &gt; 2.x</p>

<!--more-->

<h2 id="how-does-thing-work">How does thing work?</h2>

<p>When you surf the site, your browser name and versions are stored in <code>HTTP_USER_AGENT</code> in the request. We need to process this string to work out the browser version and name to decide to greet viewers with warning text or not.</p>

<h2 id="implementation">Implementation</h2>

<p>We will use <code>ActionDispatch</code>&#8217;s <code>request.user_agent</code> to grab the <code>HTTP_USER_AGENT</code> string. An example of user agent string:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Mozilla/4.0 (compatible; MSIE 5.00; Windows 98)</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>With a bit of text processing, we could work out the browser version, OS platform. Sound simple, isn&#8217;t it? A bit of regex magic and you could write your own detect method. However, we will not do reinvent the wheel in this tutorial, instead we will use the <code>useragent</code> gem for the sake of convenience.</p>

<p>Install <code>useragent</code> gem by appending to <code>Gemfile</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">gem 'useragent'</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>then <code>bundle install</code></p>

<p>Now we will inject a filter in <code>ApplicationController</code> to detect user agent. Below is the source code:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">ApplicationController</span> <span class="o">&lt;</span> <span class="ss">ActionController</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class="line">
</span><span class="line">  <span class="n">before_filter</span> <span class="ss">:check_browser</span>
</span><span class="line">
</span><span class="line">  <span class="kp">private</span>
</span><span class="line">
</span><span class="line">    <span class="no">Browser</span> <span class="o">=</span> <span class="no">Struct</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:browser</span><span class="p">,</span> <span class="ss">:version</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="no">SupportedBrowsers</span> <span class="o">=</span> <span class="o">[</span>
</span><span class="line">      <span class="no">Browser</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;Safari&#39;</span><span class="p">,</span> <span class="s1">&#39;6.0.2&#39;</span><span class="p">),</span>
</span><span class="line">      <span class="no">Browser</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;Firefox&#39;</span><span class="p">,</span> <span class="s1">&#39;19.0.2&#39;</span><span class="p">),</span>
</span><span class="line">      <span class="no">Browser</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;Internet Explorer&#39;</span><span class="p">,</span> <span class="s1">&#39;9.0&#39;</span><span class="p">),</span>
</span><span class="line">      <span class="no">Browser</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;Chrome&#39;</span><span class="p">,</span> <span class="s1">&#39;25.0.1364.160&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="o">]</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">check_browser</span>
</span><span class="line">      <span class="n">user_agent</span> <span class="o">=</span> <span class="no">UserAgent</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">request</span><span class="o">.</span><span class="n">user_agent</span><span class="p">)</span>
</span><span class="line">      <span class="k">unless</span> <span class="no">SupportedBrowsers</span><span class="o">.</span><span class="n">detect</span> <span class="p">{</span> <span class="o">|</span><span class="n">browser</span><span class="o">|</span> <span class="n">user_agent</span> <span class="o">&gt;=</span> <span class="n">browser</span> <span class="p">}</span>
</span><span class="line">        <span class="n">render</span> <span class="ss">text</span><span class="p">:</span> <span class="s1">&#39;Your browser is not supported!&#39;</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Let&#8217;s digest what&#8217;s happening the code above.</p>

<p><code>Browsers</code> is a <code>Struct</code> object with two attributes <code>:browser</code> and <code>:version</code>. This models after the way <code>UserAgent</code> create browser object. Pay attention to <code>SupportedBrowsers</code> closely, this array defines a stack of supported browsers.</p>

<p><code>check_browser</code> will get called before any action, this method compare your current user agent with <code>SupportedBrowsers</code>. If the condition is not met, we render a simple text to warn the user. You could extend it to use HTML template if you like.</p>

<p>Please be noted that I assume all your controllers are subclass of <code>ApplicationController</code>. Please adapt the source code accordingly should your controllers extends different parent controller class.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to setup Rails app with puma and NGINX]]></title>
    <link href="http://ruby-journal.com/how-to-setup-rails-app-with-puma-and-nginx/"/>
    <updated>2013-03-16T17:51:00+11:00</updated>
    <id>http://ruby-journal.com/how-to-setup-rails-app-with-puma-and-nginx</id>
    <content type="html"><![CDATA[
<p>In this tutorial, I&#8217;ll walk you through the concept behind using puma + NGINX, plus thorough instructions on setting them up on CentOS and Ubuntu.</p>

<!--more-->

<h2 id="concept">Concept</h2>

<p>Many people who come from the old Apache HTTPd day often ask me how reverse proxy + web server work?</p>

<blockquote>
  <p><em>&#8220;It&#8217;s different paradigm&#8221;</em></p>
</blockquote>

<p>Reverse proxy software (such as Varnish or NGINX) would acts as a load balancer that routes all external requests to a pool of web apps. The below diagram depicts simply how it works:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">                                           +---&gt; web app process 1 --&gt; threads
</span><span class="line">                                           |
</span><span class="line">[requests] &lt;------&gt;  [reverse proxy server]  --+---&gt; web app process 2 --&gt; threads
</span><span class="line">                                           |
</span><span class="line">                                           +---&gt; web app process 3 --&gt; threads</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In constrast to Apache way, which is depicted below:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">                +--- web process fork
</span><span class="line">                |
</span><span class="line">[requests] ------&gt;  +--- web process fork
</span><span class="line">                |
</span><span class="line">                +--- web process fork</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>in which Apache HTTPd will act as both load balancer that route request to only 1 dedicated web app and automatically tell itself to fork more processes to meet demand.</p>

<p>I am NOT going to dwelve into which way is better than which. My 5cent on this is, reverse proxy + web server is new way to do things, it offers distinct advantages on scalability on multi-tenancy scenario. In which you could up-scale and down-scale more web processes on demand without affecting other apps. The downside is you have to deal with process monitoring which requires understanding of UNIX processes.</p>

<h2 id="installation">Installation</h2>

<h3 id="puma">puma</h3>

<p>puma is a multi-threaded high performance webserver written in Ruby. It is new in the market yet it has gained lots of traction. It can be used to server any ruby web app that support rack such as Sinatra or Ruby On Rails.</p>

<p>As a first class Ruby project, you could install <code>puma</code> via RubyGems.</p>

<p>With Rails 3+ app, simply append to <code>Gemfile</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">gem 'puma', '~&gt; 2.3.2'</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>then <code>bundle install</code></p>

<p>You can now start your app with puma with <code>rails s</code>.  You should see output if it is started correctly:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Puma starting in single mode...
</span><span class="line">* Version 2.3.2, codename: Delicious Thin Mints
</span><span class="line">* Min threads: 0, max threads: 16
</span><span class="line">* Environment: development
</span><span class="line">...</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="nginx">NGINX</h3>

<p>NGINX is utilised as reverse proxy server for its <code>HttpProxyModule</code> could perform proxy passing request to many virtual hosts.</p>

<p>Firstly, we need to get the software installed on our server:</p>

<p><strong>CentOS 5+</strong></p>

<p>Create file name <code>/etc/yum.repos.d/nginx.repo</code> and paste following:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">[nginx]
</span><span class="line">name=nginx repo
</span><span class="line">baseurl=http://nginx.org/packages/centos/$releasever/$basearch/
</span><span class="line">gpgcheck=0
</span><span class="line">enabled=1</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Then we can install NGINX with:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo yum install nginx</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and the server could be started with:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo /etc/init.d/nginx start</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>Ubuntu 12.04</strong></p>

<p>The NGINX version in the Ubuntu repo is quite old (ie. 1.2.6), you could install
newer version by adding the official nginx.org repo:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys ABF5BD827BD9BF62</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>then add following line into the end of file <code>/etc/apt/sources.list</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">deb http://nginx.org/packages/ubuntu/ precise nginx</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>NOTE: If you have installed NGINX before, make sure you remove it first:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo apt-get purge nginx*</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>then you can install the package with:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo apt-get update
</span><span class="line">sudo apt-get install nginx</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Once successfully installed, you could verify with:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">nginx -v
</span><span class="line"># nginx version: nginx/1.4.0</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>you can manually start the daemon using Upstart:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo service nginx start</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="configuration">Configuration</h2>

<p>Due to the differences in file locations between CentOS and Ubuntu, I divide this section into two, please read the section that match your OS.</p>

<p>Before continuing, there are few assumptions I would like you to be aware of:</p>

<ul>
  <li>You are running on Ruby 1.9.3 or newer</li>
  <li>Your Rails app is 3.x or newer</li>
  <li>You are running your app under <code>RAILS_ENV=production</code></li>
  <li>Your rails app should be placed in <code>/var/www</code> folder.</li>
  <li>You have setup correctly all permissions and firewall settings for your environment</li>
</ul>

<h3 id="nginx-configuration">NGINX configuration</h3>

<p>We are going to configure NGINX to have an <code>upstream</code> directive, this directive tell NGINX where to proxy parse the request to.
Next we will add a virtual host and use <code>proxy_pass</code> directive to tell NGINX to pass the request to the pool of processes defined in <code>upstream</code> section.</p>

<p><strong>CentOS</strong></p>

<p>The very first thing I normally do is to delete all default virtual hosts files:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo rm /etc/nginx/conf.d/default.conf</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Next, let&#8217;s create a new host config file at <code>/etc/nginx/conf.d/my_app.conf</code> for our rails app, paste following:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
</pre></td><td class="code"><pre><code class=""><span class="line">upstream my_app {
</span><span class="line">  server unix:///var/run/my_app.sock;
</span><span class="line">}
</span><span class="line">
</span><span class="line">server {
</span><span class="line">  listen 80;
</span><span class="line">  server_name my_app_url.com; # change to match your URL
</span><span class="line">  root /var/www/my_app/public; # I assume your app is located at this location
</span><span class="line">
</span><span class="line">  location / {
</span><span class="line">    proxy_pass http://my_app; # match the name of upstream directive which is defined above
</span><span class="line">    proxy_set_header Host $host;
</span><span class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
</span><span class="line">  }
</span><span class="line">
</span><span class="line">  location ~* ^/assets/ {
</span><span class="line">    # Per RFC2616 - 1 year maximum expiry
</span><span class="line">    expires 1y;
</span><span class="line">    add_header Cache-Control public;
</span><span class="line">
</span><span class="line">    # Some browsers still send conditional-GET requests if there's a
</span><span class="line">    # Last-Modified header or an ETag header even if they haven't
</span><span class="line">    # reached the expiry date sent in the Expires header.
</span><span class="line">    add_header Last-Modified "";
</span><span class="line">    add_header ETag "";
</span><span class="line">    break;
</span><span class="line">  }
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>then you can restart your NGINX server:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo /etc/init.id/nginx restart</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>Ubuntu</strong></p>

<p>The very first thing I normally do is to disable default site by removing the symlink:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo rm /etc/nginx/conf.d/sites-enabled/default</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Next, let&#8217;s create a new virtual host config file at <code>/etc/nginx/sites-available/my_app.conf</code> for our rails app, paste following:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
</pre></td><td class="code"><pre><code class=""><span class="line">upstream my_app {
</span><span class="line">  server unix:///var/run/my_app.sock;
</span><span class="line">}
</span><span class="line">
</span><span class="line">server {
</span><span class="line">  listen 80;
</span><span class="line">  server_name my_app_url.com; # change to match your URL
</span><span class="line">  root /var/www/my_app/public; # I assume your app is located at that location
</span><span class="line">
</span><span class="line">  location / {
</span><span class="line">    proxy_pass http://my_app; # match the name of upstream directive which is defined above
</span><span class="line">    proxy_set_header Host $host;
</span><span class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
</span><span class="line">  }
</span><span class="line">
</span><span class="line">  location ~* ^/assets/ {
</span><span class="line">    # Per RFC2616 - 1 year maximum expiry
</span><span class="line">    expires 1y;
</span><span class="line">    add_header Cache-Control public;
</span><span class="line">
</span><span class="line">    # Some browsers still send conditional-GET requests if there's a
</span><span class="line">    # Last-Modified header or an ETag header even if they haven't
</span><span class="line">    # reached the expiry date sent in the Expires header.
</span><span class="line">    add_header Last-Modified "";
</span><span class="line">    add_header ETag "";
</span><span class="line">    break;
</span><span class="line">  }
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and we need to enable it by creating symlink in <code>/etc/nginx/sites-enabled</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo ln -sf /etc/nginx/sites-available/my_app.conf /etc/nginx/sites-enabled/my_app.conf</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>then you can restart your nginx server:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo service nginx restart</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="start-your-app-server">start your app server</h3>

<p>Now we need to tell puma to start our app and bind it to a Unix socket:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">cd /var/www/my_app
</span><span class="line">bundle exec puma -e production -b unix:///var/run/my_app.sock</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>if nothing goes wrong, you should see this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Puma starting in single mode...
</span><span class="line">* Version 2.3.2, codename: Delicious Thin Mints
</span><span class="line">* Min threads: 0, max threads: 16
</span><span class="line">* Environment: development
</span><span class="line">* Listening on unix:///var/run/my_app.sock
</span><span class="line">Use Ctrl-C to stop</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and now try to surf your site with Firefox or Chrome, open <code>my_app_url.com</code>. Please substitute it with your site domain name instead here. And you should not see any error page like 403.</p>

<p>Once you have verified that our puma has correctly serve the request, we now can run the puma server as daemon.</p>

<p>Press <code>CTRL-C</code> to stop the foreground running puma processing and run command with <code>-d</code> parameter:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">bundle exec puma -e production -d -b unix:///var/run/my_app.sock</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You could verify if the puma process is in background or not:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">ps aux | grep puma
</span><span class="line"># 9594 92.8  1.4 496844 117280 ?       Rl   17:25   0:25 ruby /usr/lib/ruby/1.9.1/bin/puma -e production -d -b unix:///var/run/my_app.sock</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="restartstop-your-daemon-puma-server">restart/stop your daemon puma server</h3>

<p>In order to restart our server, we use command <code>kill</code> to send in <code>SIGUSR2</code> signal
to the puma PID, in our case the PID is 9594:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">kill -s SIGUSR2 9594</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The process kills itself and fork a new process with new PID</p>

<p>If you want to stop the server, simply send <code>SIGTERM</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">kill -s SIGTERM 9594</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>you can verify if the process has been killed or not with <code>ps</code>.</p>

<p>If you want UNIX fetch you the PID, you can start puma server with <code>--pidfile</code> params:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">bundle exec puma -e production -d -b unix:///var/run/my_app.sock --pidfile /var/run/puma.pid</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The PID will be store in <code>/var/run/puma.pid</code> and now you could just <code>cat</code> the PID out easily:</p>

<p>To restart:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">kill -s SIGUSR2 `cat /var/run/puma.pid`</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>To stop:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">kill -s SIGTERM `cat /var/run/puma.pid`</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="a-better-way-to-manage-your-puma-processes">a better way to manage your puma processes</h3>

<p>Dealing with UNIX PID is not something you want to deal with everyday. There are
many tools to manage processes such as <code>god</code> or <code>monit</code>. You need to spend time
to configure them correctly. Thanksfully, puma comes with a built-in process
manager that help ease your admin job, introducing the awesome <code>pumactl</code> command line tool.</p>

<p><code>pumactl</code> is the puma processes monitor and controller, it allows you to start/restart/stop the server with 3 ways:</p>

<ul>
  <li>PID</li>
  <li>State file</li>
  <li>Control Server</li>
</ul>

<p><em>WARNING</em>: Sadly, <code>pumactl</code> is very broken and yield inconsitent bugs. So for now, please <em>AVOID</em> using <code>pumactl</code> and instead use my production-grade bash script:</p>

<p>https://gist.github.com/joneslee85/5844933</p>

<p>Please read on if you want to know how <code>pumactl</code> does thing. If not, just skip it.</p>

<h4 id="pid">PID</h4>

<p>This is exactly like the traditional way of sending signal to process with <code>kill</code>. Please be noted that we could not start our server with this way because <code>pumactl</code> has no idea what our configuration, so you have to start the server the normal way with <code>puma</code> command.</p>

<p>However, for existing running puma process, you could stop it with:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">bundle exec pumactl -p &lt;pid&gt; stop
</span><span class="line"># Command stop sent success</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and to restart it:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">bundle exec pumactl -p &lt;pid&gt; resart
</span><span class="line"># Command restart sent success</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And in the case where you tell puma to store its PID in pid file:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">bundle exec puma -e production -d -b unix:///var/run/my_app.sock --pidfile /var/run/puma.pid</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and then we could restart the process with:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">bundle exec pumactl -P /var/run/puma.pid restart</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and stop process with:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">bundle exec pumactl -P /var/run/puma.pid stop</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Isn&#8217;t that more civilized? At the moment of this writing, I find dealing with PID is very reliable. The downside is that you have to manually manage the process. I highly recommend you to use <code>monit</code> or <code>god</code> to manage the process instead of <code>pumactl</code> because <code>pumactl</code> suffers few bugs.</p>

<h4 id="state-file-avoid">State file (AVOID)</h4>

<p>Dealing with PID is painful, you need to type the whole <code>puma</code> start line over and over again. However, there is a better way, by storing all the configurations into one state file, <code>pumactl</code> would be able to manage processes easily.</p>

<p>So firstly, we need to kill all puma processes running:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo killall puma</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>then we start our server with <code>-S</code> parameter:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">bundle exec puma -e production -d -b unix:///var/run/my_app.sock -S /var/run/my_app.state</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>puma would generate <code>/var/run/my_app.state</code> file with content:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class=""><span class="line">---
</span><span class="line">pid: 9654
</span><span class="line">config: !ruby/object:Puma::Configuration
</span><span class="line">  options:
</span><span class="line">    :min_threads: 0
</span><span class="line">    :max_threads: 16
</span><span class="line">    :quiet: true
</span><span class="line">    :debug: false
</span><span class="line">    :binds:
</span><span class="line">    - unix:///var/run/my_app.sock
</span><span class="line">    :workers: 0
</span><span class="line">    :daemon: true
</span><span class="line">    :worker_boot: []
</span><span class="line">    :environment: production
</span><span class="line">    :worker_directory: /home/jr_deploy/staging/current
</span><span class="line">    :state: /var/run/my_app.state</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>this is a serialized <code>Puma::Configuration</code> object, and <code>pumactl</code> would read this object to figure out where you bind your puma process and other details.</p>

<p>Now to restart our puma, we do:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">bundle exec pumactl -S /var/run/my_app.state restart
</span><span class="line"># Command restart sent success</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and if you want to stop puma:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">bundle exec pumactl -S /var/run/my_app.state stop
</span><span class="line"># Command stop sent success</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The interesting thing is that <code>/var/run/my_app.state</code> will be peristent and you could start the server with all configurations retained:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">bundle exec pumactl -S /var/run/my_app.state start</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>the output I get is:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Puma 2.1.1 starting...
</span><span class="line">* Min threads: 0, max threads: 16
</span><span class="line">* Environment: development
</span><span class="line">* Listening on tcp://0.0.0.0:9292
</span><span class="line">Use Ctrl-C to stop</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>which is not the way I expected because the server is started in non-daemon mode and use TCP mode. I believe this is an issue with puma. So for now, please refrain from starting the server with pumactl. Instead, remove file <code>/var/run/my_app.state</code> and repeat the whole process again. I&#8217;ve lodged this issue with @evanphx at https://github.com/puma/puma/issues/287</p>

<h4 id="control-server-avoid">Control Server (AVOID)</h4>

<p>puma also comes with a built-in control server which will be started on localhost port 9293 when you run puma with <code>--control</code> params:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">RAILS_ENV=production bundle exec puma -e production -d -b unix:///var/run/my_app.sock --control unix:///var/run/my_app_pumactl.sock --control-token foo</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If nothing goes wrong, you should see:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Puma 2.1.1 starting...
</span><span class="line">* Min threads: 0, max threads: 16
</span><span class="line">* Environment: development
</span><span class="line">* Listening on unix:///var/run/my_app.sock
</span><span class="line">* Starting status server on unix:///var/run/my_app_pumactl.sock
</span><span class="line">Use Ctrl-C to stop</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Please pay attention to <code>--control-token</code> param, this is auth token which is required by <code>pumactl</code> to talk to this control server.</p>

<p>You can query status of the server with:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">pumactl -C unix://var/run/my_app_pumactl.sock [status|restart|halt|stop]</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You should see:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Puma is started</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now let&#8217;s try to halt/stop/restart the server:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">pumactl -C unix://var/run/my_app_pumactl.sock -T foo [restart|halt|restart]</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Please be noted, if your <code>-T</code> token does not match the token the server used, in our case <code>foo</code>, you would get this error:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Unauthorized access to server (wrong auth token)</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Okay, so far all goes well, let&#8217;s try to stop the server first then start it with:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">pumactl -C unix://var/run/my_app_pumactl.sock -T foo start</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and the output:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Puma 2.1.1 starting...
</span><span class="line">* Min threads: 0, max threads: 16
</span><span class="line">* Environment: development
</span><span class="line">* Listening on tcp://0.0.0.0:9292
</span><span class="line">Use Ctrl-C to stop</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>which is wrong, it seems to me puma suffers the same issue as of the State file. So please refrain from using State File and Control Server methods to monitor puma process. Instead, just go for the PID way and use <code>monit</code> or <code>god</code> instead. I&#8217;ll update this section once the issue is resolved.</p>

<h3 id="capistrano-deployment">Capistrano deployment</h3>

<p>Now you know how puma works, you could adapt what you learned for your deployment. If you use <code>capistrano</code>, you could use the <code>puma/capistrano</code> tasks by append to your <code>config/deploy.rb</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">require 'puma/capistrano`</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and then</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">bundle exec cap puma:start
</span><span class="line">bundle exec cap puma:restart
</span><span class="line">bundle exec cap puma:stop</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Ubuntu with PXE via OSX]]></title>
    <link href="http://ruby-journal.com/install-ubuntu-with-pxe-via-osx/"/>
    <updated>2012-10-06T14:21:00+10:00</updated>
    <id>http://ruby-journal.com/install-ubuntu-with-pxe-via-osx</id>
    <content type="html"><![CDATA[
<p>In this tutorial, I&#8217;ll guide you through how to to setup OSX as PXE server to install Ubuntu on other hosts.</p>

<!--more-->

<h2 id="introduction">Introduction</h2>

<p><a href="http://en.wikipedia.org/wiki/Preboot_Execution_Environment" title="Preboot Execution Environment on Wikipedia">The Preboot Execution Environment (PXE)</a> is widely used in enterprise environment for mass deployment, however it is not well-known in home and office environment because it is always easier to install Ubuntu Linux using traditional CD/DVD or USB storage devices method.</p>

<p>If your box doesn&#8217;t have CD/DVD or USB storage devices, you can install Ubuntu using PXE. The concept is very simple, a computer that host TFTP server and the to-be-installed host support PXE.</p>

<p>I adapt the concept to OSX to show you that you could achieve the same result with Mac OSX. In this tutorial, I use OSX 10.8.2. However, it should also work with older versions.</p>

<h2 id="prerequisites">Prerequisites</h2>

<ul>
  <li><a href="http://cdimage.ubuntu.com/netboot/">Netboot installer for Ubuntu</a></li>
  <li>TFTP Server</li>
  <li>A PC that is to be installed to supports PXE</li>
  <li>Fast and reliable Internet connection</li>
  <li>Time and patience</li>
</ul>

<h2 id="download-ubuntu-netboot-installer">Download Ubuntu Netboot installer</h2>

<p>We only need the netboot installer of Ubuntu, you don&#8217;t have to download a full ISO for the purpose. The file that we need to download is the <code>netboot.tar.gz</code> which can be found at <a href="http://cdimage.ubuntu.com/netboot/">http://cdimage.ubuntu.com/netboot/</a>.</p>

<ol>
  <li>Open your <em>Terminal.app</em></li>
  <li>Use <em>curl</em> command to download the netboot installer:</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ cd /tmp
</span><span class="line">$ curl -O http://archive.ubuntu.com/ubuntu/dists/precise/main/installer-i386/current/images/netboot/netboot.tar.gz</span></code></pre></td></tr></table></div></figure></notextile></div>

<ol>
  <li>Extract <code>netboot.tar.gz</code> to suitable folder that we are going to use as TFTP root folder</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ mkdir ~/Downloads/tftp
</span><span class="line">$ tar -xvzf netboot.tar.gz -C ~/Downloads/tftp</span></code></pre></td></tr></table></div></figure></notextile></div>

<ol>
  <li>Fix folder permissions:</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ sudo chown -R nobody:nogroup ~/Downloads/tftp</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="set-up-tftp-server">Set up TFTP server</h2>

<h3 id="easy-setup-with-tftp-server-software">Easy setup with TFTP Server software</h3>

<p>Though OSX comes with <code>tftp</code> command line, it still takes more steps to setup manually. Alternatively, you can download the TFTP Server. It provides a GUI to configure the built-in tftp server on OSX.</p>

<ol>
  <li>Download the <a href="http://ww2.unime.it/flr/tftpserver/">TFTP Server</a>.</li>
  <li>Open the DMG file and drag the application into your Applications folder.</li>
  <li>Open the <em>TftpServer.app</em>.</li>
  <li>
    <p>We will NOT use the default <code>/private/tftpboot</code> as root for TFTP server. From <em>TftpServer.app</em>&#8217;s screen, click on <em>Change Path</em> icon and select <code>Downloads/tftp</code> and you should see the path bar change to <code>/Users/yourusername/Downloads/tftp</code>.</p>
  </li>
  <li>
    <p>Fixing folder permission by click on <em>Fix</em> buttons of both <code>Working path permission</code> and <code>Parentals folders permissions</code>. You should see <code>Attributes OK</code> if all goes well.</p>
  </li>
  <li>Start the server by clicking on <em>Start TFTP</em>. You should see <em>Server Status</em> change to <code>Running</code>.</li>
</ol>

<h3 id="hard-setup-using-built-in-tftp-server">Hard setup using built-in tftp server</h3>

<p>For whom who want to set up the <code>tftp</code> manually via CLI.</p>

<ol>
  <li>Configure the server by modify the <code>tftp.plist</code> into a suitable folder for modification:</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ cp /System/Library/LaunchDaemons/tftp.plist /tmp</span></code></pre></td></tr></table></div></figure></notextile></div>

<ol>
  <li>Edit the file <code>/tmp/tftp.plist</code> and change:</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">&lt;key&gt;Disabled&lt;/key&gt;
</span><span class="line">&lt;true/&gt;</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>to</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">&lt;key&gt;Disabled&lt;/key&gt;
</span><span class="line">&lt;false/&gt;</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>also modify your TFTP root folder into the <code>&lt;array&gt;</code> section:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">&lt;array&gt;
</span><span class="line">  &lt;string&gt;/usr/libexec/tftpd&lt;/string&gt;
</span><span class="line">  &lt;string&gt;-s&lt;/string&gt;
</span><span class="line">  &lt;string&gt;/Users/yourusername/Downloads/tftp&lt;/string&gt;
</span><span class="line">&lt;/array&gt;</span></code></pre></td></tr></table></div></figure></notextile></div>

<ol>
  <li>Backup the existing configuration file:</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ sudo mv /System/Library/LaunchDaemons/tftp.plist /System/Library/LaunchDaemons/tftp.plist.backup</span></code></pre></td></tr></table></div></figure></notextile></div>

<ol>
  <li>Copy our configuration file into <code>/System/Library/LaunchDaemons/</code>:</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ sudo mv /tmp/tftp.plist /System/Library/LaunchDaemons</span></code></pre></td></tr></table></div></figure></notextile></div>

<ol>
  <li>Start the server with:</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ sudo launchctl load -F /System/Library/LaunchDaemons/tftp.plist</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>OR</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ sudo launchctl start com.apple.tftpd</span></code></pre></td></tr></table></div></figure></notextile></div>

<ol>
  <li>Once installation is finished, you could disable it with:</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ sudo launchctl unload -F /System/Library/LaunchDaemons/tftp.plist</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>OR</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ sudo launchctl stop com.apple.tftpd</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="set-up-dhcp-server">Set up DHCP server</h2>

<p>In concept, PXE-bootable device will look for DHCP service in order to receive available PXE boot server. If you don&#8217;t have a DHCP servive running locally in router or in your LAN, you have to set up a DHCP server.</p>

<h3 id="with-isc-dchpd">With isc-dchpd</h3>

<ol>
  <li>Install isc-dhcpd with Homebrew:</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ brew install isc-dhcp</span></code></pre></td></tr></table></div></figure></notextile></div>

<ol>
  <li>Create configuration file at <code>/usr/local/etc/dhcpd.conf</code>:</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class=""><span class="line">default-lease-time 600;
</span><span class="line">max-lease-time 7200;
</span><span class="line">
</span><span class="line">subnet X.X.X.0 netmask Y.Y.Y.0 {
</span><span class="line">  range X.X.X.151 X.X.X.205;
</span><span class="line">}
</span><span class="line">
</span><span class="line">option domain-name-servers 8.8.8.8;
</span><span class="line">
</span><span class="line">host netbook {
</span><span class="line">  hardware ethernet ??:??:??:??:??:??;
</span><span class="line">  filename "pxelinux.0";
</span><span class="line">  next-server Z.Z.Z.Z; # the IP address of your TFTP server
</span><span class="line">  fixed-address X.X.X.202;
</span><span class="line">  option subnet-mask Y.Y.Y.0;
</span><span class="line">  option broadcast-address X.X.X.255;
</span><span class="line">  option routers X.X.X.1;
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>in which <code>X.X.X</code> is your network address, <code>Y.Y.Y</code> is your subnet mask, <code>??:??:??:??:??:??</code> is the MAC address of the box you want to install to and finally <code>Z.Z.Z.Z</code> is the address of TFTP server.</p>

<ol>
  <li>Start the server with:</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ sudo /usr/local/sbin/dhcpd -f -d -cf /usr/local/etc/dhcpd.conf</span></code></pre></td></tr></table></div></figure></notextile></div>

<ol>
  <li>Once the installation finished, clean up with:</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ brew uninstall isc-dhcp</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="with-built-in-bootpd">With built-in bootpd</h3>

<p>OSX does come with a built-in BOOTP server called <code>bootpd</code>, which offer also offer DHCP service. This technology is known as NetBoot and used to install OSX on CD/DVD-less machines like MacBook Air or Mac Mini. I adapt instructions at <a href="http://www.jacquesf.com/2011/04/mac-os-x-dhcp-server/" title="Mac OSX DHCP Server">Jacques Fortier&#8217;s blog</a> for this tutorial.</p>

<ol>
  <li>Create <code>/etc/bootpd.plist</code> with content:</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
</pre></td><td class="code"><pre><code class=""><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
</span><span class="line">&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;
</span><span class="line">&lt;plist version="1.0"&gt;
</span><span class="line">&lt;dict&gt;
</span><span class="line">    &lt;key&gt;bootp_enabled&lt;/key&gt;
</span><span class="line">    &lt;false/&gt;
</span><span class="line">    &lt;key&gt;detect_other_dhcp_server&lt;/key&gt;
</span><span class="line">    &lt;integer&gt;1&lt;/integer&gt;
</span><span class="line">    &lt;key&gt;dhcp_enabled&lt;/key&gt;
</span><span class="line">    &lt;array&gt;
</span><span class="line">        &lt;string&gt;en0&lt;/string&gt;
</span><span class="line">    &lt;/array&gt;
</span><span class="line">    &lt;key&gt;reply_threshold_seconds&lt;/key&gt;
</span><span class="line">    &lt;integer&gt;0&lt;/integer&gt;
</span><span class="line">    &lt;key&gt;Subnets&lt;/key&gt;
</span><span class="line">    &lt;array&gt;
</span><span class="line">        &lt;dict&gt;
</span><span class="line">            &lt;key&gt;allocate&lt;/key&gt;
</span><span class="line">            &lt;true/&gt;
</span><span class="line">            &lt;key&gt;lease_max&lt;/key&gt;
</span><span class="line">            &lt;integer&gt;86400&lt;/integer&gt;
</span><span class="line">            &lt;key&gt;lease_min&lt;/key&gt;
</span><span class="line">            &lt;integer&gt;86400&lt;/integer&gt;
</span><span class="line">            &lt;key&gt;name&lt;/key&gt;
</span><span class="line">            &lt;string&gt;192.168.1&lt;/string&gt;
</span><span class="line">            &lt;key&gt;net_address&lt;/key&gt;
</span><span class="line">            &lt;string&gt;192.168.1.0&lt;/string&gt;
</span><span class="line">            &lt;key&gt;net_mask&lt;/key&gt;
</span><span class="line">            &lt;string&gt;255.255.255.0&lt;/string&gt;
</span><span class="line">            &lt;key&gt;net_range&lt;/key&gt;
</span><span class="line">            &lt;array&gt;
</span><span class="line">                &lt;string&gt;192.168.1.101&lt;/string&gt;
</span><span class="line">                &lt;string&gt;192.168.1.202&lt;/string&gt;
</span><span class="line">            &lt;/array&gt;
</span><span class="line">        &lt;/dict&gt;
</span><span class="line">    &lt;/array&gt;
</span><span class="line">&lt;/dict&gt;
</span><span class="line">&lt;/plist&gt;</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The config file assume that the network address is 192.168.1.0 and the DHCP allocation pool is from .101 to .102.</p>

<ol>
  <li>To assign static IP address to our to-be-installed host, we create file <code>/etc/bootptab</code>:</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">%%
</span><span class="line"># machine entries have the following format:
</span><span class="line">#
</span><span class="line"># hostname      hwtype  hwaddr              ipaddr          bootfile
</span><span class="line">client1         1       00:1f:16:08:61:96   192.168.1.105   pxelinux.0</span></code></pre></td></tr></table></div></figure></notextile></div>

<ol>
  <li>To start the server, run the following command:</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ sudo /bin/launchctl load -w /System/Library/LaunchDaemons/bootps.plist</span></code></pre></td></tr></table></div></figure></notextile></div>

<ol>
  <li>Once done, stop the server with command:</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ sudo /bin/launchctl unload -w /System/Library/LaunchDaemons/bootps.plist</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="booting-ubuntu">Booting Ubuntu</h2>

<p>To boot from TFTP, you need to configure your PC to boot from the network interface in the BIOS.</p>

<p>Once booting into the installer, you can install Ubuntu by having sources download for a mirror.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debug your failed test in Travis CI]]></title>
    <link href="http://ruby-journal.com/debug-your-failed-test-in-travis-ci/"/>
    <updated>2012-08-24T13:04:00+10:00</updated>
    <id>http://ruby-journal.com/debug-your-failed-test-in-travis-ci</id>
    <content type="html"><![CDATA[
<p>Ever wondering why some tests passed locally but failed on Travis?
Ever questioning how could I go about to debug why that failed test on remote Travis?
Read on as I show you how</p>

<p><br />
<br />
<br />
<!--more--></p>

<p>In one occassion, I had a failed Ruby test on Travis which infact passed on my local box. So I tried
to put in <code>debugger</code> and see if Travis could let me drop into Irb or not. It turns out Travis hang
for quite a while until timed out. So debug remotely doesn&#8217;t work.</p>

<p>Right, plan B then. I spent some time dig into Travis documentation and learned that Travis server
provisioned new VM image for every test. So if I could get my hand on the VMs, I could replicate the
same environment that Travis run the test locally. Sound rational, doesn&#8217;t it? Unfortunately, I could
not find any traces nor URL where to download those VMs. Thanks to Josh at Travis, he sent me the URL
to VMs.</p>

<h2 id="download-vm">Download VM</h2>

<p>Travis VM are packaged Vagrant box.</p>

<p>You coud download VM here at:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">files.travis-ci.org/boxes/provisioned/travis-(box_name).box</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>in which <code>(box_name)</code> is the language you use, <code>ruby</code>, <code>php</code>, etc.</p>

<p>For my case, I was testing a Rails app, so I downloaded the ruby box:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">wget files.travis-ci.org/boxes/provisioned/travis-ruby.box</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Please note that those files are large in size ~&gt; 3GB</p>

<h2 id="install-vagrant">Install Vagrant</h2>

<p>Head to http://vagrantup.com/ and download the package for your OS.</p>

<h2 id="install-virtualbox">Install Virtualbox</h2>

<p>Head to https://www.virtualbox.org/ and download the app for your OS.</p>

<h2 id="import-the-vm-box">Import the VM box</h2>

<p>Once you have downloaded the VM box, the image can be imported to your system. In my case:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ vagrant box add travis-ruby travis-ruby.box</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If imported successfully, you should be able to see <code>travis-ruby</code> in the box list with:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ vagrant box list</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="bootstrap">Bootstrap</h2>

<p>Let&#8217;s get our box up so we could SSH and start playing around with it:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ vagrant init travis-ruby</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>A new <code>Vargrantfile</code> will be created for you in the current folder.
We could bring the box up with:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ vagrant up</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And now you can SSH into with:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ vagrant ssh</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Once you are in the box terminal, we run the post-install script:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ sh ./postinstall.sh</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This script install all essential packages like compilers, libraries.</p>

<h2 id="debug-your-test">Debug your test</h2>

<p>Copy your application to this VM box via <code>scp</code> or <code>git clone</code> and debug the test like you debug it on your local box.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Postgres.app on OSX 10.7+]]></title>
    <link href="http://ruby-journal.com/install-postgres-dot-app-on-osx-10-dot-7-plus/"/>
    <updated>2012-08-23T16:21:00+10:00</updated>
    <id>http://ruby-journal.com/install-postgres-dot-app-on-osx-10-dot-7-plus</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://ruby-journal.com/images/netsuke.png" /></p>

<p>Traditionally, pogstgresql is installed manually with MacPort or Homebrew on Mac OSX 10.7+. I used
to have lots of problem with the setup for the installation as it requires Xcode, this libs and that libs, etc.
In summary, it is not convenient enough and I want something as simple as dragging an OS app to my /Application.
Thanks to Heroku, they took the heed and create Postgres.app. A wrapper bundled with binary postgresql server.
It is not only easy to install but also easy to setup config file if you are using Rails.</p>

<p><br />
<br />
<br />
<!--more--></p>

<h2 id="installation">Installation</h2>

<p>If you have installed postgres using Homebrew or Macport, please make sure you uninstall it first.</p>

<p>Head to <a href="http://postgresapp.com/">http://postgresapp.com/</a> and download DMG into your localbox. Mount the DMG and drag the Postgres.app
icon into your Applications folder.</p>

<h2 id="configuration">Configuration</h2>

<p>No configuration at all! Simply click on Postgres.app to start it and the app will reside in your top bar tray (elephant icon).
You can set it to start on start up by click on Elephant Icon on top bar tray and click Automatically Start on Login. Thatâs it, dead simple compare to
setting up plist launcher file.</p>

<p>PostgreSQL ships with a constellation of useful binaries, like <code>pg_dump</code> or <code>pg_restore</code>, that you will likely want to use.
Go ahead and add the <code>/bin</code> directory that ships with Postgres.app to your <code>PATH</code>. Add this to your <code>.bash_profile</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">PATH="/Applications/Postgres.app/Contents/MacOS/bin:$PATH"</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Once setup, you could refresh your terminal session with:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ source .bash_profile</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And try to run <code>psql</code> without a host, if everything is correct, you should be able to get into the the postgres console</p>

<h2 id="configure-rails-database-connection">Configure Rails database connection</h2>

<p>Use following settings in <code>config/database.yml</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">development:
</span><span class="line">  adapter: postgresql
</span><span class="line">  database: [YOUR_DATABASE_NAME]
</span><span class="line">  host: localhost</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="install-pg-gem">Install pg gem</h2>

<p>In order to install <code>pg</code> gem, we need to uninstall <code>pg</code> first and re-installed with:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ gem uninstall pg
</span><span class="line">$ gem install pg -- --with-pg-lib=/Applications/Postgres.app/Contents/MacOS/lib</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spree 1.1 deployment on Heroku]]></title>
    <link href="http://ruby-journal.com/spree-1-1-stable-deployment-on-heroku/"/>
    <updated>2012-07-06T07:31:00+10:00</updated>
    <id>http://ruby-journal.com/spree-1-1-stable-deployment-on-heroku</id>
    <content type="html"><![CDATA[
<p>In this tutorial, I will show you how to create a Spree application on your local
box, configure and push it to Heroku.</p>

<p><br />
<br />
<br />
<!--more--></p>

<h2 id="prerequisites">Prerequisites</h2>

<p>All instructions are written for OSX 10.8.x system. However it
also works to UNIX and Linux systems with minor adaptations.</p>

<h4 id="heroku">Heroku</h4>

<p>If you have installed Heroku, please make sure you update to version 2.1.0 or higher
for Cedar support:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ heroku update
</span><span class="line">$ heroku --version
</span><span class="line">heroku-toolbelt/2.35.0 (x86_64-darwin10.8.0) ruby/1.9.3</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="ruby">Ruby</h4>

<p>Because we are going to deploy on Heroku Cedar stack with Ruby 1.9.3 chosen as default version. We should use the same Ruby version on our local box for consistency.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ rvm install 1.9.3</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="spree">Spree</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ gem install spree -v=1.1.7</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Check installed spree gems:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ gem list | grep 'spree'
</span><span class="line">spree (1.1.7)
</span><span class="line">spree_api (1.1.7)
</span><span class="line">spree_auth (1.1.7)
</span><span class="line">spree_cmd (1.1.7)
</span><span class="line">spree_core (1.1.7)
</span><span class="line">spree_dash (1.1.7)
</span><span class="line">spree_promo (1.1.7)
</span><span class="line">spree_sample (1.1.7)</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>spree</code> gem consists of many components, however you only need <code>spree_core</code>
to build an online store.</p>

<h4 id="postgresql">PostgreSQL</h4>

<p>Heroku only support PostgreSQL and the software can be installed with Homebrew:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ brew install postgresql</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Please make sure you read the Build Notes after the installation.</p>

<p>Additionally, <code>pg</code> is installed to provide DB adapter:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ gem install pg</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="other-dependencies">Other dependencies</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ brew install imagemagick</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="prepare-local-application">Prepare local application</h2>

<p>Create a new rails app default to postgreSQL</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">rails _3.2.12_ new fool-man-chew -d postgresql</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Configure database setting by editing <code>config/database.yml</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class=""><span class="line">development:
</span><span class="line">  adapter: postgresql
</span><span class="line">  encoding: unicode
</span><span class="line">  database: fool-man-chew_development
</span><span class="line">  pool: 5
</span><span class="line">  username: your_username
</span><span class="line">  password: your_password
</span><span class="line">
</span><span class="line">test:
</span><span class="line">  adapter: postgresql
</span><span class="line">  encoding: unicode
</span><span class="line">  database: fool-man-chew_development
</span><span class="line">  pool: 5
</span><span class="line">  username: your_username
</span><span class="line">  password: your_password
</span><span class="line">
</span><span class="line">production:
</span><span class="line">  adapter: postgresql
</span><span class="line">  encoding: unicode
</span><span class="line">  database: fool-man-chew_development
</span><span class="line">  pool: 5
</span><span class="line">  username: your_username
</span><span class="line">  password: your_password</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In fact, you could remove <code>production</code> from <code>config/database.yml</code> because Heroku
doesnât create db based on local box <code>config/database.yml</code> file though.</p>

<p>Donât forget to create databases with:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ bundle exec rake db:create:all</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="bootstraping-on-local-box">Bootstraping on local box</h2>

<p>There are two ways to bootstrap Spree, I prefer the latter method as it gives me
more control of bootstraping process.</p>

<p>Both ways runs Asset Precompiling rake task which fix an issue where Heroku could
not precompile asset, you could read more about this issue at <a href="#assets-precompiling">Assets Precompiling section</a></p>

<h4 id="wizard-mode">1. Wizard mode</h4>

<p><code>spree_cmd</code> gem provides the convenient <code>spree</code> command that add the Spree gem, create initializers, copy migrations and optionally generate sample products and orders.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ RAILS_ENV=development spree install fool-man-chew</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You can notice that I explicitly declare <code>RAILS_ENV=development</code> here. If not,
<code>spree install</code> will assume your <code>RAILS_ENV=production</code></p>

<p>The wizard will guide you through a list of questions, I opt <code>no</code> for Default Gateway
because I am not going to use skrill gateway for this tutorial.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Would you like to install the default gateways? (yes/no) [yes] no
</span><span class="line">Would you like to run the migrations? (yes/no) [yes] yes
</span><span class="line">Would you like to load the seed data? (yes/no) [yes] yes
</span><span class="line">Would you like to load the sample data? (yes/no) [yes] yes
</span><span class="line">Admin Email [spree@example.com] fool@man.ch
</span><span class="line">Admin Password [spree123] foo123</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>if nothing goes wrong, you would see:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class=""><span class="line">...
</span><span class="line">     loading  seed data
</span><span class="line">     loading  sample data
</span><span class="line">      insert  config/routes.rb
</span><span class="line">**************************************************
</span><span class="line">We added the following line to your application's config/routes.rb file:
</span><span class="line">
</span><span class="line">    mount Spree::Core::Engine, :at =&gt; '/'
</span><span class="line">**************************************************
</span><span class="line">Spree has been installed successfully. You're all ready to go!
</span><span class="line">
</span><span class="line">Enjoy!
</span><span class="line">precompiling  assets</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="manual-mode">2. Manual mode</h4>

<p>You could manually append <code>spree</code> gem into the end of your <code>Gemfile</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">gem 'spree', '~&gt; 1.1.7'</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If you have not yet run <code>bundle install</code>, please run it now:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ bundle install</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Next we invoke Spree install generator to copy migrations, initializers and
generate sample data:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ rails g spree:install</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>OR</p>

<p>Bootstraping manually with command:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ bundle exec rake spree:install:migrations
</span><span class="line">$ bundle exec rake db:migrate
</span><span class="line">$ bundle exec rake db:seed
</span><span class="line">$ bundle exec rake spree_sample:load</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Once the bootstrap is finished, we need to precompile our assets too:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ bundle exec rake assets:precompile:nondigest</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="deploy-to-heroku">Deploy to Heroku</h2>

<h3 id="configure-web-server">Configure web server</h3>

<p>By default, Heroku use the Thin server. However in this tutorial, we are going to
use Puma instead, just to show you the great new process types system that
Cedar support.</p>

<p>Append to <code>Gemfile</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">group :production do
</span><span class="line">  gem 'puma'
</span><span class="line">end</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and install the gem with:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ bundle install</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Then we set up Puma to use minium 4 threads. You can scale up to more Dynos should the app
need more processing power. Create a new file <code>config/puma.rb</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">threads 4, 16</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The great about Cedar stack is that Heroku introduces a new way to scale your app,
that is <a href="http://adam.heroku.com/past/2011/5/9/applying_the_unix_process_model_to_web_apps/" title="Heroku Process Model">Process Model</a>, now you could define a custom list of process type
that you want to run in the <code>Procfile</code> file.</p>

<p>We configure our unicorn which is of type <code>web</code> by creating new file in <code>Rails.root</code>
folder <code>Procfile</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">web: bundle exec puma -p $PORT -C ./config/puma.rb</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="heroku-setup">Heroku setup</h3>

<h4 id="create-heroku-app">Create Heroku app</h4>

<p>We are going to create an Cedar stack based app:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ heroku apps:create fool-man-chew</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If success, you would see below output:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Creating fool-man-chew... done, stack is cedar
</span><span class="line">http://fool-man-chew.herokuapp.com/ | git@heroku.com:fool-man-chew.git
</span><span class="line">Git remote heroku added</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and double check git remote you would see heroku remote listed:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ git remote show
</span><span class="line">heroku</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="install-ruby-193-for-heroku">Install ruby-1.9.3 for Heroku</h4>

<p>Cedar stack default to ruby-1.9.3.</p>

<p>We specify Ruby version in the Gemfile:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">source 'http://rubygems.org'
</span><span class="line">
</span><span class="line">ruby '1.9.3'</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="set-up-amazon-s3">Set up Amazon S3</h4>

<p>Heroku is diskless, thus assets storage is delegated to third-party cloud storage
service like Amazon S3.</p>

<h4 id="add-ssl-certificate">Add SSL certificate</h4>

<p>By default, Spree production mode enforce SSL. This step is very optional,
please read <a href="#disable-ssl-in-production-mode">Disable SSL in Production</a> section if you want to disable SSL in Production mode.</p>

<p>A Piggyback SSL is a now standard feature on all Heroku apps so you donât have
to enable. We are not going to buy a certificate for this test app. Instead, we are
going to set up a <a href="http://devcenter.heroku.com/articles/ssl-certificate-self" title="Creating a Self-Signed SSL Certificate">Self-Signed SSL Certificate</a>.</p>

<p>A private key and certificate signing request can be generated:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ openssl genrsa -des3 -out site.key 2048
</span><span class="line">    ...
</span><span class="line">   Enter pass phrase for site.key:
</span><span class="line">   Verifying - Enter pass phrase for site.key:
</span><span class="line">$ mv site.key site.orig.key
</span><span class="line">$ openssl rsa -in site.orig.key -out site.key
</span><span class="line">   Enter pass phrase for site.orig.key:
</span><span class="line">   writing RSA key
</span><span class="line">$ openssl req -new -key site.key -out site.csr
</span><span class="line">   ...
</span><span class="line">   Country Name (2 letter code) [AU]:US
</span><span class="line">   State or Province Name (full name) [Some-State]:California
</span><span class="line">   ...</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and now the self-signed SSL certificate is generated from the <code>site.key</code> private key and <code>site.csr</code> files:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ openssl x509 -req -days 365 -in site.csr -signkey site.key -out final.crt</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The <code>final.crt</code> file is your site certificate suitable for use with Herokuâs SSL add-on along with the <code>site.key</code> private key.</p>

<p>Now we upload those two files to Heroku:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ heroku domains:add fool-man-chew.herokuapp.com
</span><span class="line">$ heroku ssl:add final.crt site.key</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="bootstraping-spree-on-heroku">Bootstraping Spree on Heroku</h4>

<p>Now we could push our app to Heroku:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git init
</span><span class="line">git add -A
</span><span class="line">git commit -m "Initial commit"
</span><span class="line">git push heroku master</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><em>OPTIONAL</em>: If you ever bump into issues where Bundler fails to locate gems, the best workaround is to cache the bundle:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">bundle cache
</span><span class="line">git add -A
</span><span class="line">git commit -m 'Bundle cache'</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If all goes well, you would see following output:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class=""><span class="line">-----&gt; Heroku receiving push
</span><span class="line">-----&gt; Ruby/Rails app detected
</span><span class="line">-----&gt; Using RUBY_VERSION: ruby-1.9.3-p392
</span><span class="line">-----&gt; Installing dependencies using Bundler version 1.3.0.pre5
</span><span class="line">       Running: bundle install --without development:test --path vendor/bundle --binstubs bin/ --deployment
</span><span class="line">       Fetching gem metadata from http://rubygems.org/.......
</span><span class="line">       Fetching gem metadata from http://rubygems.org/..
</span><span class="line">       Fetching git://github.com/joneslee85/spree-heroku.git
</span><span class="line">       ....
</span><span class="line">       Writing config/database.yml to read from DATABASE_URL
</span><span class="line">-----&gt; Preparing app for Rails asset pipeline
</span><span class="line">       Detected manifest.yml, assuming assets were compiled locally
</span><span class="line">-----&gt; Rails plugin injection
</span><span class="line">       Injecting rails_log_stdout
</span><span class="line">       Injecting rails3_serve_static_assets
</span><span class="line">-----&gt; Discovering process types
</span><span class="line">       Procfile declares types      -&gt; web
</span><span class="line">       Default types for Ruby/Rails -&gt; console, rake, worker
</span><span class="line">-----&gt; Compiled slug size is 39.4MB
</span><span class="line">-----&gt; Launching... done, v9
</span><span class="line">       http://fool-man-chew.herokuapp.com deployed to Heroku</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Next we could repeat the same bootstraping step on our remote heroku:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ heroku run rails g spree:install</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now we could open app:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ heroku apps:open</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="custom-domain">Custom Domain</h4>

<p>Now we push a bit further by setting up custom domain for our shop, first we need
to set up Heroku to respond to requests at custom domains:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ heroku addons:add custom_domains
</span><span class="line">Adding custom_domains to fool-man-chew...done.</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And inform Heroku our beautiful <code>fool-man-chew.com</code> domain</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ heroku domains:add www.fool-man-chew.com
</span><span class="line">Added www.example.com as a custom domain name to fool-man-chew.heroku.com
</span><span class="line">$ heroku domains:add fool-man-chew.com
</span><span class="line">Added example.com as a custom domain name to fool-man-chew.heroku.com</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Then I point the domain DNS to Heroku. Please read more at <a href="http://devcenter.heroku.com/articles/custom-domains" title="Heroku Custom Domains">Heroku Custom Domain</a></p>

<p>We also need to let Spree know of our custom domain by append <code>site_url</code> in our
<code>config/initializers/spree.rb</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>config/initializers/spree.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">Spree</span><span class="o">.</span><span class="n">config</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class="line">  <span class="n">config</span><span class="o">.</span><span class="n">site_url</span> <span class="o">=</span> <span class="s1">&#39;fool-man-chew.com&#39;</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Add, commit and push again:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ git add config/initializers/spree.rb
</span><span class="line">$ git commit -m 'Use custom domain'
</span><span class="line">$ git push heroku master
</span><span class="line">$ git heroku:restart</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="issues">Issues</h3>

<h4 id="disable-ssl-in-production-mode">Disable SSL in Production mode</h4>

<p>Edit file <code>config/initializers/spree.rb</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>config/initializers/spree.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">Spree</span><span class="o">.</span><span class="n">config</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class="line">  <span class="n">config</span><span class="o">.</span><span class="n">allow_ssl_in_production</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Make sure you commit the changes to app repository.</p>

<h4 id="assets-precompiling">Assets Precompiling</h4>

<p>Heroku would fail precompiling assets in slug compilation. Following output show
the error:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class=""><span class="line">   Injecting rails_log_stdout
</span><span class="line">   Injecting rails3_serve_static_assets
</span><span class="line">-----&gt; Preparing app for Rails asset pipeline
</span><span class="line">   Running: rake assets:precompile
</span><span class="line">   rake aborted!
</span><span class="line">   could not connect to server: Connection refused
</span><span class="line">   Is the server running on host "127.0.0.1" and accepting
</span><span class="line">   TCP/IP connections on port 5432?
</span><span class="line">
</span><span class="line">   Tasks: TOP =&gt; environment
</span><span class="line">   (See full trace by running task with --trace)
</span><span class="line">   Precompiling assets failed, enabling runtime asset compilation
</span><span class="line">   Injecting rails31_enable_runtime_asset_compilation
</span><span class="line">   Please see this article for troubleshooting help:
</span><span class="line">   http://devcenter.heroku.com/articles/rails31_heroku_cedar#troubleshooting</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>It make some sense though because Spree requires access to DB to complete this task and yet before you push to Heroku the environment config is not present.</p>

<p>So we have to disable precompile on intialize by set <code>config.assets.initialize_on_precompile</code> to <code>false</code> in <code>config/application.rb</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">config.assets.initialize_on_precompile = false</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Then workaround this issue by locally precompile assets before deployment:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ bundle exec rake assets:precompile RAILS_ENV=development</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>What will happen next is Sprocket will compile our assets and place them in <code>public/assets</code> folder. What Heroku really care is the <code>public/assets/manifest.yml</code>. This file contains all MD5 checksums of our assets and Heroku will check the existence of the file to tell if we compile our assets locally or not.</p>

<p>If we push this file to our server:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ git add -A public/assets
</span><span class="line">$ git commit -m 'Added precompiled assets'
</span><span class="line">$ git push heroku master</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>you would see:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">....
</span><span class="line">-----&gt; Preparing app for Rails asset pipeline
</span><span class="line">       Detected manifest.yml, assuming assets were compiled locally
</span><span class="line">...</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You could read more on <a href="http://devcenter.heroku.com/articles/rails31_heroku_cedar/" title="Rails 3.1 Heroku Cedar">Rails 3.1 on Heroku</a></p>

<h3 id="conclusion">Conclusion</h3>

<p>Spree 1.1.x is not a revolutionary change from 1.0.x but it is an incremental changes with bug fixes and updates such as dependency on Rails 3.1.x. I highly recommend you upgrade if you are still on 1.0.x.</p>

<p>Again, Iâd extend to the core team to deliver another robust release.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Ghostscript on Heroku Cedar]]></title>
    <link href="http://ruby-journal.com/heroku/install-ghostscript-on-heroku/"/>
    <updated>2012-03-12T16:57:00+11:00</updated>
    <id>http://ruby-journal.com/heroku/install-ghostscript-on-heroku</id>
    <content type="html"><![CDATA[
<p>In this tutorial, I will show you how to install ghostscript on Heroku Cedar.
As you might have known that Heroku virtual machine does come with a system-wide
ghostscript version which is located at <code>/usr/bin/gs</code>. You can find out the
location of this version:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ heroku run bash
</span><span class="line">$ /usr/bin/gs --version
</span><span class="line">8.71</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>However, explicit dependencies is not recommended, you could read 12 Factor Approach
on dependencies at <a href="http://www.12factor.net/dependencies">http://www.12factor.net/dependencies</a>. Credit to <a href="https://github.com/rwdaigle">Ryan Daigle</a> who pointed it out for me and I agree with him.</p>

<p>To install ghostscript, we fetch the source under heroku console, fetch the source,
configure and compile the software:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ heroku run bash
</span><span class="line">$ curl -O http://downloads.ghostscript.com/public/ghostscript-9.05.tar.gz
</span><span class="line">$ tar xzvf ghostscript-9.05.tar.gz
</span><span class="line">$ cd ghostscript-9.05
</span><span class="line">$ ./configure --disable-cups --disable-gtk --with-drivers=FILES
</span><span class="line">$ make
</span><span class="line">$ cp bin/gs ~/bin</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You might notice that I only specify configuration parameters <code>--with-drivers=FILES</code>.
It is because I don&#8217;t need printer drivers for my app which only does think like
images and PDF manipulation.</p>

<p>Once the compilation is completed, copy the binary <code>ghostscript-9.05/bin/gs</code> to <code>~/bin</code>.
All binaries in <code>~/bin</code> will be available for your Heroku app now. You can verify
if the binary works by:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ gs --version
</span><span class="line">9.05</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And please do not forget to clean up:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ cd ~
</span><span class="line">$ rm -rf ghostscript-9.05*</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If you feel lazy, you could download my Ruby-wrapper of gs at <a href="https://github.com/joneslee85/ruby-ghostscript">https://github.com/joneslee85/ruby-ghostscript</a>.</p>
]]></content>
  </entry>
  
</feed>
